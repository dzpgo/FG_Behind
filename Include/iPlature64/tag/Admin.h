// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __tag___Admin_h__
#define __tag___Admin_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <tag/TagDefines.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iPlature
{

class AdminInterface;

}

}

namespace iPlature
{

class AdminInterface;
bool operator==(const AdminInterface&, const AdminInterface&);
bool operator<(const AdminInterface&, const AdminInterface&);

}

namespace IceInternal
{

::Ice::Object* upCast(::iPlature::AdminInterface*);
::IceProxy::Ice::Object* upCast(::IceProxy::iPlature::AdminInterface*);

}

namespace iPlature
{

typedef ::IceInternal::Handle< ::iPlature::AdminInterface> AdminInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iPlature::AdminInterface> AdminInterfacePrx;

void __read(::IceInternal::BasicStream*, AdminInterfacePrx&);
void __patch__AdminInterfacePtr(void*, ::Ice::ObjectPtr&);

}

namespace iPlature
{

class Callback_AdminInterface_GetActual_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_GetActual_Base> Callback_AdminInterface_GetActualPtr;

class Callback_AdminInterface_CyclicPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_CyclicPut_Base> Callback_AdminInterface_CyclicPutPtr;

class Callback_AdminInterface_EventPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_EventPut_Base> Callback_AdminInterface_EventPutPtr;

class Callback_AdminInterface_MDPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_MDPut_Base> Callback_AdminInterface_MDPutPtr;

class Callback_AdminInterface_SyncMDPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_SyncMDPut_Base> Callback_AdminInterface_SyncMDPutPtr;

class Callback_AdminInterface_TimerPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_TimerPut_Base> Callback_AdminInterface_TimerPutPtr;

class Callback_AdminInterface_BasicTimerPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_BasicTimerPut_Base> Callback_AdminInterface_BasicTimerPutPtr;

class Callback_AdminInterface_RegisterGraphTag_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_RegisterGraphTag_Base> Callback_AdminInterface_RegisterGraphTagPtr;

class Callback_AdminInterface_Write2Level1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_Write2Level1_Base> Callback_AdminInterface_Write2Level1Ptr;

class Callback_AdminInterface_StartCyclic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_StartCyclic_Base> Callback_AdminInterface_StartCyclicPtr;

class Callback_AdminInterface_StopCyclic_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_StopCyclic_Base> Callback_AdminInterface_StopCyclicPtr;

class Callback_AdminInterface_EnableArchive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_EnableArchive_Base> Callback_AdminInterface_EnableArchivePtr;

class Callback_AdminInterface_EnableAllArchives_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_EnableAllArchives_Base> Callback_AdminInterface_EnableAllArchivesPtr;

class Callback_AdminInterface_L1CyclicPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_L1CyclicPut_Base> Callback_AdminInterface_L1CyclicPutPtr;

class Callback_AdminInterface_L1EventPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_L1EventPut_Base> Callback_AdminInterface_L1EventPutPtr;

class Callback_AdminInterface_RegisterEventWatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_RegisterEventWatch_Base> Callback_AdminInterface_RegisterEventWatchPtr;

class Callback_AdminInterface_RegisterTimerWatch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_RegisterTimerWatch_Base> Callback_AdminInterface_RegisterTimerWatchPtr;

class Callback_AdminInterface_ReReadConfiguration_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdminInterface_ReReadConfiguration_Base> Callback_AdminInterface_ReReadConfigurationPtr;

}

namespace IceProxy
{

namespace iPlature
{

class AdminInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return GetActual(tagNames, tagPairs, 0);
    }
    ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return GetActual(tagNames, tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return begin_GetActual(tagNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return begin_GetActual(tagNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetActual(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetActual(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::Callback_AdminInterface_GetActualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetActual(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_GetActualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetActual(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetActual(::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetActual(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return CyclicPut(tagPairs, 0);
    }
    ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return CyclicPut(tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_CyclicPut(tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_CyclicPut(tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdminInterface_CyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_CyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_CyclicPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return EventPut(tagPairs, eventName, eventValue, 0);
    }
    ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return EventPut(tagPairs, eventName, eventValue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::iPlature::Callback_AdminInterface_EventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_EventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_EventPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return MDPut(tagTimeStamp, tagPairs, 0);
    }
    ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return MDPut(tagTimeStamp, tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdminInterface_MDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_MDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_MDPut(tagTimeStamp, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_MDPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName)
    {
        return SyncMDPut(tagTimeStamp, tagPairs, strTopicName, 0);
    }
    ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::Ice::Context& __ctx)
    {
        return SyncMDPut(tagTimeStamp, tagPairs, strTopicName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::Ice::Context& __ctx)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::iPlature::Callback_AdminInterface_SyncMDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& strTopicName, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_SyncMDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SyncMDPut(tagTimeStamp, tagPairs, strTopicName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SyncMDPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return TimerPut(tagNames, tagPairs, 0);
    }
    ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return TimerPut(tagNames, tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_TimerPut(tagNames, tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_TimerPut(tagNames, tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TimerPut(tagNames, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TimerPut(tagNames, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdminInterface_TimerPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TimerPut(tagNames, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_TimerPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_TimerPut(tagNames, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_TimerPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return BasicTimerPut(tagPairs, 0);
    }
    ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return BasicTimerPut(tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_BasicTimerPut(tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_BasicTimerPut(tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BasicTimerPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BasicTimerPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdminInterface_BasicTimerPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BasicTimerPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_BasicTimerPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_BasicTimerPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_BasicTimerPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return RegisterGraphTag(tagNames, 0);
    }
    ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return RegisterGraphTag(tagNames, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return begin_RegisterGraphTag(tagNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return begin_RegisterGraphTag(tagNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterGraphTag(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterGraphTag(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::Callback_AdminInterface_RegisterGraphTagPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterGraphTag(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_RegisterGraphTagPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterGraphTag(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RegisterGraphTag(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType)
    {
        return Write2Level1(tagPairs, nType, 0);
    }
    ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx)
    {
        return Write2Level1(tagPairs, nType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType)
    {
        return begin_Write2Level1(tagPairs, nType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx)
    {
        return begin_Write2Level1(tagPairs, nType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Write2Level1(tagPairs, nType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Write2Level1(tagPairs, nType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::iPlature::Callback_AdminInterface_Write2Level1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Write2Level1(tagPairs, nType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_Write2Level1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Write2Level1(tagPairs, nType, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_Write2Level1(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StartCyclic()
    {
        return StartCyclic(0);
    }
    ::Ice::Int StartCyclic(const ::Ice::Context& __ctx)
    {
        return StartCyclic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic()
    {
        return begin_StartCyclic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic(const ::Ice::Context& __ctx)
    {
        return begin_StartCyclic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCyclic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCyclic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic(const ::iPlature::Callback_AdminInterface_StartCyclicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCyclic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StartCyclic(const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_StartCyclicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StartCyclic(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_StartCyclic(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StartCyclic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StartCyclic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int StopCyclic()
    {
        return StopCyclic(0);
    }
    ::Ice::Int StopCyclic(const ::Ice::Context& __ctx)
    {
        return StopCyclic(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic()
    {
        return begin_StopCyclic(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic(const ::Ice::Context& __ctx)
    {
        return begin_StopCyclic(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCyclic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCyclic(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic(const ::iPlature::Callback_AdminInterface_StopCyclicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCyclic(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_StopCyclic(const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_StopCyclicPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_StopCyclic(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_StopCyclic(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int StopCyclic(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_StopCyclic(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return EnableArchive(bFlag, tagNames, 0);
    }
    ::Ice::Int EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return EnableArchive(bFlag, tagNames, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return begin_EnableArchive(bFlag, tagNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return begin_EnableArchive(bFlag, tagNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableArchive(bFlag, tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableArchive(bFlag, tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::Callback_AdminInterface_EnableArchivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableArchive(bFlag, tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_EnableArchivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableArchive(bFlag, tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_EnableArchive(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int EnableAllArchives(bool bFlag)
    {
        return EnableAllArchives(bFlag, 0);
    }
    ::Ice::Int EnableAllArchives(bool bFlag, const ::Ice::Context& __ctx)
    {
        return EnableAllArchives(bFlag, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag)
    {
        return begin_EnableAllArchives(bFlag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag, const ::Ice::Context& __ctx)
    {
        return begin_EnableAllArchives(bFlag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableAllArchives(bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableAllArchives(bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag, const ::iPlature::Callback_AdminInterface_EnableAllArchivesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableAllArchives(bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool bFlag, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_EnableAllArchivesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EnableAllArchives(bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_EnableAllArchives(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int EnableAllArchives(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_EnableAllArchives(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return L1CyclicPut(tagPairs, 0);
    }
    ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return L1CyclicPut(tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_L1CyclicPut(tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_L1CyclicPut(tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1CyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1CyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdminInterface_L1CyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1CyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_L1CyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1CyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_L1CyclicPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return L1EventPut(tagPairs, eventName, eventValue, 0);
    }
    ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return L1EventPut(tagPairs, eventName, eventValue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::iPlature::Callback_AdminInterface_L1EventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_L1EventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_L1EventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_L1EventPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag)
    {
        return RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, 0);
    }
    ::Ice::Int RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::Ice::Context& __ctx)
    {
        return RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::Ice::Context& __ctx)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::iPlature::Callback_AdminInterface_RegisterEventWatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nEventWatchMode, bool bFlag, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_RegisterEventWatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterEventWatch(strTopicName, tagNames, nEventWatchMode, bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RegisterEventWatch(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag)
    {
        return RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, 0);
    }
    ::Ice::Int RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::Ice::Context& __ctx)
    {
        return RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::Ice::Context& __ctx)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::iPlature::Callback_AdminInterface_RegisterTimerWatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string& strTopicName, const ::iPlature::TAGNAMEARRAY& tagNames, ::Ice::Int nTimerWatchMode, bool bFlag, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_RegisterTimerWatchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterTimerWatch(strTopicName, tagNames, nTimerWatchMode, bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RegisterTimerWatch(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ReReadConfiguration()
    {
        return ReReadConfiguration(0);
    }
    ::Ice::Int ReReadConfiguration(const ::Ice::Context& __ctx)
    {
        return ReReadConfiguration(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration()
    {
        return begin_ReReadConfiguration(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::Ice::Context& __ctx)
    {
        return begin_ReReadConfiguration(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReReadConfiguration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReReadConfiguration(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::iPlature::Callback_AdminInterface_ReReadConfigurationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReReadConfiguration(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::Ice::Context& __ctx, const ::iPlature::Callback_AdminInterface_ReReadConfigurationPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReReadConfiguration(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_ReReadConfiguration(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ReReadConfiguration(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReReadConfiguration(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdminInterface> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdminInterface*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<AdminInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iPlature
{

class AdminInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int StartCyclic(const ::Ice::Context*) = 0;

    virtual ::Ice::Int StopCyclic(const ::Ice::Context*) = 0;

    virtual ::Ice::Int EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int EnableAllArchives(bool, const ::Ice::Context*) = 0;

    virtual ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*) = 0;

    virtual ::Ice::Int RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*) = 0;

    virtual ::Ice::Int ReReadConfiguration(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace iPlature
{

class AdminInterface : virtual public ::IceDelegate::iPlature::AdminInterface,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int StartCyclic(const ::Ice::Context*);

    virtual ::Ice::Int StopCyclic(const ::Ice::Context*);

    virtual ::Ice::Int EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int EnableAllArchives(bool, const ::Ice::Context*);

    virtual ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);

    virtual ::Ice::Int RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);

    virtual ::Ice::Int ReReadConfiguration(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace iPlature
{

class AdminInterface : virtual public ::IceDelegate::iPlature::AdminInterface,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int StartCyclic(const ::Ice::Context*);

    virtual ::Ice::Int StopCyclic(const ::Ice::Context*);

    virtual ::Ice::Int EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int EnableAllArchives(bool, const ::Ice::Context*);

    virtual ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);

    virtual ::Ice::Int RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Context*);

    virtual ::Ice::Int ReReadConfiguration(const ::Ice::Context*);
};

}

}

namespace iPlature
{

class AdminInterface : virtual public ::Ice::Object
{
public:

    typedef AdminInterfacePrx ProxyType;
    typedef AdminInterfacePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int GetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetActual(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CyclicPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___EventPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int MDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___MDPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SyncMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SyncMDPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int TimerPut(const ::iPlature::TAGNAMEARRAY&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___TimerPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int BasicTimerPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___BasicTimerPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RegisterGraphTag(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterGraphTag(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int Write2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Write2Level1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StartCyclic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StartCyclic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int StopCyclic(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___StopCyclic(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int EnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___EnableArchive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int EnableAllArchives(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___EnableAllArchives(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int L1CyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___L1CyclicPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int L1EventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___L1EventPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RegisterEventWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterEventWatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RegisterTimerWatch(const ::std::string&, const ::iPlature::TAGNAMEARRAY&, ::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterTimerWatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ReReadConfiguration(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReReadConfiguration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const AdminInterface& l, const AdminInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AdminInterface& l, const AdminInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iPlature
{

template<class T>
class CallbackNC_AdminInterface_GetActual : public Callback_AdminInterface_GetActual_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::TAGVALUEMAP&);

    CallbackNC_AdminInterface_GetActual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::iPlature::TAGVALUEMAP tagPairs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetActual(tagPairs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tagPairs);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, tagPairs);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_GetActualPtr
newCallback_AdminInterface_GetActual(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_GetActual<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_GetActualPtr
newCallback_AdminInterface_GetActual(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_GetActual<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_GetActual : public Callback_AdminInterface_GetActual_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&);

    Callback_AdminInterface_GetActual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::iPlature::TAGVALUEMAP tagPairs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetActual(tagPairs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tagPairs, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, tagPairs, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_GetActualPtr
newCallback_AdminInterface_GetActual(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_GetActual<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_GetActualPtr
newCallback_AdminInterface_GetActual(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_GetActual<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_CyclicPut : public Callback_AdminInterface_CyclicPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_CyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_CyclicPutPtr
newCallback_AdminInterface_CyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_CyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_CyclicPutPtr
newCallback_AdminInterface_CyclicPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_CyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_CyclicPut : public Callback_AdminInterface_CyclicPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_CyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_CyclicPutPtr
newCallback_AdminInterface_CyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_CyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_CyclicPutPtr
newCallback_AdminInterface_CyclicPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_CyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_EventPut : public Callback_AdminInterface_EventPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_EventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_EventPutPtr
newCallback_AdminInterface_EventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EventPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_EventPutPtr
newCallback_AdminInterface_EventPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EventPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_EventPut : public Callback_AdminInterface_EventPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_EventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_EventPutPtr
newCallback_AdminInterface_EventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_EventPutPtr
newCallback_AdminInterface_EventPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_MDPut : public Callback_AdminInterface_MDPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_MDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_MDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_MDPutPtr
newCallback_AdminInterface_MDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_MDPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_MDPutPtr
newCallback_AdminInterface_MDPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_MDPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_MDPut : public Callback_AdminInterface_MDPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_MDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_MDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_MDPutPtr
newCallback_AdminInterface_MDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_MDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_MDPutPtr
newCallback_AdminInterface_MDPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_MDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_SyncMDPut : public Callback_AdminInterface_SyncMDPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_SyncMDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SyncMDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_SyncMDPutPtr
newCallback_AdminInterface_SyncMDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_SyncMDPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_SyncMDPutPtr
newCallback_AdminInterface_SyncMDPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_SyncMDPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_SyncMDPut : public Callback_AdminInterface_SyncMDPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_SyncMDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SyncMDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_SyncMDPutPtr
newCallback_AdminInterface_SyncMDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_SyncMDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_SyncMDPutPtr
newCallback_AdminInterface_SyncMDPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_SyncMDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_TimerPut : public Callback_AdminInterface_TimerPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_TimerPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_TimerPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_TimerPutPtr
newCallback_AdminInterface_TimerPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_TimerPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_TimerPutPtr
newCallback_AdminInterface_TimerPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_TimerPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_TimerPut : public Callback_AdminInterface_TimerPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_TimerPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_TimerPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_TimerPutPtr
newCallback_AdminInterface_TimerPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_TimerPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_TimerPutPtr
newCallback_AdminInterface_TimerPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_TimerPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_BasicTimerPut : public Callback_AdminInterface_BasicTimerPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_BasicTimerPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_BasicTimerPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_BasicTimerPutPtr
newCallback_AdminInterface_BasicTimerPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_BasicTimerPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_BasicTimerPutPtr
newCallback_AdminInterface_BasicTimerPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_BasicTimerPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_BasicTimerPut : public Callback_AdminInterface_BasicTimerPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_BasicTimerPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_BasicTimerPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_BasicTimerPutPtr
newCallback_AdminInterface_BasicTimerPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_BasicTimerPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_BasicTimerPutPtr
newCallback_AdminInterface_BasicTimerPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_BasicTimerPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_RegisterGraphTag : public Callback_AdminInterface_RegisterGraphTag_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_RegisterGraphTag(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterGraphTag(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_RegisterGraphTagPtr
newCallback_AdminInterface_RegisterGraphTag(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterGraphTag<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_RegisterGraphTagPtr
newCallback_AdminInterface_RegisterGraphTag(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterGraphTag<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_RegisterGraphTag : public Callback_AdminInterface_RegisterGraphTag_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_RegisterGraphTag(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterGraphTag(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_RegisterGraphTagPtr
newCallback_AdminInterface_RegisterGraphTag(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterGraphTag<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_RegisterGraphTagPtr
newCallback_AdminInterface_RegisterGraphTag(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterGraphTag<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_Write2Level1 : public Callback_AdminInterface_Write2Level1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_Write2Level1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Write2Level1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_Write2Level1Ptr
newCallback_AdminInterface_Write2Level1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_Write2Level1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_Write2Level1Ptr
newCallback_AdminInterface_Write2Level1(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_Write2Level1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_Write2Level1 : public Callback_AdminInterface_Write2Level1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_Write2Level1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Write2Level1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_Write2Level1Ptr
newCallback_AdminInterface_Write2Level1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_Write2Level1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_Write2Level1Ptr
newCallback_AdminInterface_Write2Level1(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_Write2Level1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_StartCyclic : public Callback_AdminInterface_StartCyclic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_StartCyclic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartCyclic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_StartCyclicPtr
newCallback_AdminInterface_StartCyclic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_StartCyclic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_StartCyclicPtr
newCallback_AdminInterface_StartCyclic(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_StartCyclic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_StartCyclic : public Callback_AdminInterface_StartCyclic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_StartCyclic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StartCyclic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_StartCyclicPtr
newCallback_AdminInterface_StartCyclic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_StartCyclic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_StartCyclicPtr
newCallback_AdminInterface_StartCyclic(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_StartCyclic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_StopCyclic : public Callback_AdminInterface_StopCyclic_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_StopCyclic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopCyclic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_StopCyclicPtr
newCallback_AdminInterface_StopCyclic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_StopCyclic<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_StopCyclicPtr
newCallback_AdminInterface_StopCyclic(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_StopCyclic<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_StopCyclic : public Callback_AdminInterface_StopCyclic_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_StopCyclic(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_StopCyclic(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_StopCyclicPtr
newCallback_AdminInterface_StopCyclic(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_StopCyclic<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_StopCyclicPtr
newCallback_AdminInterface_StopCyclic(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_StopCyclic<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_EnableArchive : public Callback_AdminInterface_EnableArchive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_EnableArchive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EnableArchive(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_EnableArchivePtr
newCallback_AdminInterface_EnableArchive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EnableArchive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_EnableArchivePtr
newCallback_AdminInterface_EnableArchive(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EnableArchive<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_EnableArchive : public Callback_AdminInterface_EnableArchive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_EnableArchive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EnableArchive(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_EnableArchivePtr
newCallback_AdminInterface_EnableArchive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EnableArchive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_EnableArchivePtr
newCallback_AdminInterface_EnableArchive(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EnableArchive<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_EnableAllArchives : public Callback_AdminInterface_EnableAllArchives_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_EnableAllArchives(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EnableAllArchives(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_EnableAllArchivesPtr
newCallback_AdminInterface_EnableAllArchives(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EnableAllArchives<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_EnableAllArchivesPtr
newCallback_AdminInterface_EnableAllArchives(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_EnableAllArchives<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_EnableAllArchives : public Callback_AdminInterface_EnableAllArchives_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_EnableAllArchives(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_EnableAllArchives(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_EnableAllArchivesPtr
newCallback_AdminInterface_EnableAllArchives(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EnableAllArchives<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_EnableAllArchivesPtr
newCallback_AdminInterface_EnableAllArchives(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_EnableAllArchives<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_L1CyclicPut : public Callback_AdminInterface_L1CyclicPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_L1CyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_L1CyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_L1CyclicPutPtr
newCallback_AdminInterface_L1CyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_L1CyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_L1CyclicPutPtr
newCallback_AdminInterface_L1CyclicPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_L1CyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_L1CyclicPut : public Callback_AdminInterface_L1CyclicPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_L1CyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_L1CyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_L1CyclicPutPtr
newCallback_AdminInterface_L1CyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_L1CyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_L1CyclicPutPtr
newCallback_AdminInterface_L1CyclicPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_L1CyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_L1EventPut : public Callback_AdminInterface_L1EventPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_L1EventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_L1EventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_L1EventPutPtr
newCallback_AdminInterface_L1EventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_L1EventPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_L1EventPutPtr
newCallback_AdminInterface_L1EventPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_L1EventPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_L1EventPut : public Callback_AdminInterface_L1EventPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_L1EventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_L1EventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_L1EventPutPtr
newCallback_AdminInterface_L1EventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_L1EventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_L1EventPutPtr
newCallback_AdminInterface_L1EventPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_L1EventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_RegisterEventWatch : public Callback_AdminInterface_RegisterEventWatch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_RegisterEventWatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterEventWatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_RegisterEventWatchPtr
newCallback_AdminInterface_RegisterEventWatch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterEventWatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_RegisterEventWatchPtr
newCallback_AdminInterface_RegisterEventWatch(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterEventWatch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_RegisterEventWatch : public Callback_AdminInterface_RegisterEventWatch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_RegisterEventWatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterEventWatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_RegisterEventWatchPtr
newCallback_AdminInterface_RegisterEventWatch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterEventWatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_RegisterEventWatchPtr
newCallback_AdminInterface_RegisterEventWatch(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterEventWatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_RegisterTimerWatch : public Callback_AdminInterface_RegisterTimerWatch_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_RegisterTimerWatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterTimerWatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_RegisterTimerWatchPtr
newCallback_AdminInterface_RegisterTimerWatch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterTimerWatch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_RegisterTimerWatchPtr
newCallback_AdminInterface_RegisterTimerWatch(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_RegisterTimerWatch<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_RegisterTimerWatch : public Callback_AdminInterface_RegisterTimerWatch_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_RegisterTimerWatch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterTimerWatch(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_RegisterTimerWatchPtr
newCallback_AdminInterface_RegisterTimerWatch(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterTimerWatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_RegisterTimerWatchPtr
newCallback_AdminInterface_RegisterTimerWatch(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_RegisterTimerWatch<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdminInterface_ReReadConfiguration : public Callback_AdminInterface_ReReadConfiguration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdminInterface_ReReadConfiguration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReReadConfiguration(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdminInterface_ReReadConfigurationPtr
newCallback_AdminInterface_ReReadConfiguration(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_ReReadConfiguration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdminInterface_ReReadConfigurationPtr
newCallback_AdminInterface_ReReadConfiguration(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdminInterface_ReReadConfiguration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdminInterface_ReReadConfiguration : public Callback_AdminInterface_ReReadConfiguration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdminInterface_ReReadConfiguration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdminInterfacePrx __proxy = ::iPlature::AdminInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ReReadConfiguration(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdminInterface_ReReadConfigurationPtr
newCallback_AdminInterface_ReReadConfiguration(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_ReReadConfiguration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdminInterface_ReReadConfigurationPtr
newCallback_AdminInterface_ReReadConfiguration(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdminInterface_ReReadConfiguration<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
