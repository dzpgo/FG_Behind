// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `TagAdapter.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __tag___TagAdapter_h__
#define __tag___TagAdapter_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <tag/TagDefines.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iPlature
{

class AdapterInterface;

}

}

namespace iPlature
{

class AdapterInterface;
bool operator==(const AdapterInterface&, const AdapterInterface&);
bool operator<(const AdapterInterface&, const AdapterInterface&);

}

namespace IceInternal
{

::Ice::Object* upCast(::iPlature::AdapterInterface*);
::IceProxy::Ice::Object* upCast(::IceProxy::iPlature::AdapterInterface*);

}

namespace iPlature
{

typedef ::IceInternal::Handle< ::iPlature::AdapterInterface> AdapterInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iPlature::AdapterInterface> AdapterInterfacePrx;

void __read(::IceInternal::BasicStream*, AdapterInterfacePrx&);
void __patch__AdapterInterfacePtr(void*, ::Ice::ObjectPtr&);

}

namespace iPlature
{

class Callback_AdapterInterface_AdapterGetActual_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterGetActual_Base> Callback_AdapterInterface_AdapterGetActualPtr;

class Callback_AdapterInterface_AdapterCyclicPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterCyclicPut_Base> Callback_AdapterInterface_AdapterCyclicPutPtr;

class Callback_AdapterInterface_AdapterEventPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterEventPut_Base> Callback_AdapterInterface_AdapterEventPutPtr;

class Callback_AdapterInterface_AdapterMDPut_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterMDPut_Base> Callback_AdapterInterface_AdapterMDPutPtr;

class Callback_AdapterInterface_AdapterWrite2Level1_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterWrite2Level1_Base> Callback_AdapterInterface_AdapterWrite2Level1Ptr;

class Callback_AdapterInterface_AdapterEnableArchive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterEnableArchive_Base> Callback_AdapterInterface_AdapterEnableArchivePtr;

class Callback_AdapterInterface_AdapterEnableAllArchives_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AdapterInterface_AdapterEnableAllArchives_Base> Callback_AdapterInterface_AdapterEnableAllArchivesPtr;

}

namespace IceProxy
{

namespace iPlature
{

class AdapterInterface : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return AdapterGetActual(tagNames, tagPairs, 0);
    }
    ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return AdapterGetActual(tagNames, tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return begin_AdapterGetActual(tagNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return begin_AdapterGetActual(tagNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterGetActual(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterGetActual(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::Callback_AdapterInterface_AdapterGetActualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterGetActual(tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterGetActualPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterGetActual(tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterGetActual(::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return AdapterCyclicPut(tagPairs, 0);
    }
    ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return AdapterCyclicPut(tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_AdapterCyclicPut(tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_AdapterCyclicPut(tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterCyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterCyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdapterInterface_AdapterCyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterCyclicPut(tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterCyclicPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterCyclicPut(tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterCyclicPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return AdapterEventPut(tagPairs, eventName, eventValue, 0);
    }
    ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return AdapterEventPut(tagPairs, eventName, eventValue, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::iPlature::Callback_AdapterInterface_AdapterEventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP& tagPairs, const ::std::string& eventName, const ::std::string& eventValue, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterEventPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEventPut(tagPairs, eventName, eventValue, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterEventPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return AdapterMDPut(tagTimeStamp, tagPairs, 0);
    }
    ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return AdapterMDPut(tagTimeStamp, tagPairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::iPlature::Callback_AdapterInterface_AdapterMDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP& tagTimeStamp, const ::iPlature::TAGVALUEMAP& tagPairs, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterMDPutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterMDPut(tagTimeStamp, tagPairs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterMDPut(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType)
    {
        return AdapterWrite2Level1(tagPairs, nType, 0);
    }
    ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx)
    {
        return AdapterWrite2Level1(tagPairs, nType, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::iPlature::Callback_AdapterInterface_AdapterWrite2Level1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP& tagPairs, ::Ice::Int nType, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterWrite2Level1Ptr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterWrite2Level1(tagPairs, nType, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterWrite2Level1(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return AdapterEnableArchive(bFlag, tagNames, 0);
    }
    ::Ice::Int AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return AdapterEnableArchive(bFlag, tagNames, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::iPlature::Callback_AdapterInterface_AdapterEnableArchivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool bFlag, const ::iPlature::TAGNAMEARRAY& tagNames, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterEnableArchivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableArchive(bFlag, tagNames, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterEnableArchive(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AdapterEnableAllArchives(bool bFlag)
    {
        return AdapterEnableAllArchives(bFlag, 0);
    }
    ::Ice::Int AdapterEnableAllArchives(bool bFlag, const ::Ice::Context& __ctx)
    {
        return AdapterEnableAllArchives(bFlag, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag)
    {
        return begin_AdapterEnableAllArchives(bFlag, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag, const ::Ice::Context& __ctx)
    {
        return begin_AdapterEnableAllArchives(bFlag, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableAllArchives(bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableAllArchives(bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag, const ::iPlature::Callback_AdapterInterface_AdapterEnableAllArchivesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableAllArchives(bFlag, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool bFlag, const ::Ice::Context& __ctx, const ::iPlature::Callback_AdapterInterface_AdapterEnableAllArchivesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AdapterEnableAllArchives(bFlag, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AdapterEnableAllArchives(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AdapterEnableAllArchives(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AdapterEnableAllArchives(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<AdapterInterface> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<AdapterInterface*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<AdapterInterface*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iPlature
{

class AdapterInterface : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int AdapterEnableAllArchives(bool, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace iPlature
{

class AdapterInterface : virtual public ::IceDelegate::iPlature::AdapterInterface,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEnableAllArchives(bool, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace iPlature
{

class AdapterInterface : virtual public ::IceDelegate::iPlature::AdapterInterface,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Context*);

    virtual ::Ice::Int AdapterEnableAllArchives(bool, const ::Ice::Context*);
};

}

}

namespace iPlature
{

class AdapterInterface : virtual public ::Ice::Object
{
public:

    typedef AdapterInterfacePrx ProxyType;
    typedef AdapterInterfacePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int AdapterGetActual(const ::iPlature::TAGNAMEARRAY&, ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterGetActual(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterCyclicPut(const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterCyclicPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterEventPut(const ::iPlature::TAGVALUEMAP&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterEventPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterMDPut(const ::iPlature::TAGVALUEMAP&, const ::iPlature::TAGVALUEMAP&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterMDPut(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterWrite2Level1(const ::iPlature::TAGVALUEMAP&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterWrite2Level1(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterEnableArchive(bool, const ::iPlature::TAGNAMEARRAY&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterEnableArchive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AdapterEnableAllArchives(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AdapterEnableAllArchives(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const AdapterInterface& l, const AdapterInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const AdapterInterface& l, const AdapterInterface& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iPlature
{

template<class T>
class CallbackNC_AdapterInterface_AdapterGetActual : public Callback_AdapterInterface_AdapterGetActual_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::TAGVALUEMAP&);

    CallbackNC_AdapterInterface_AdapterGetActual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::iPlature::TAGVALUEMAP tagPairs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterGetActual(tagPairs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tagPairs);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, tagPairs);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterGetActualPtr
newCallback_AdapterInterface_AdapterGetActual(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterGetActual<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterGetActualPtr
newCallback_AdapterInterface_AdapterGetActual(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterGetActual<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterGetActual : public Callback_AdapterInterface_AdapterGetActual_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&);

    Callback_AdapterInterface_AdapterGetActual(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::iPlature::TAGVALUEMAP tagPairs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterGetActual(tagPairs, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, tagPairs, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, tagPairs, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterGetActualPtr
newCallback_AdapterInterface_AdapterGetActual(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterGetActual<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterGetActualPtr
newCallback_AdapterInterface_AdapterGetActual(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::TAGVALUEMAP&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterGetActual<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterCyclicPut : public Callback_AdapterInterface_AdapterCyclicPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterCyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterCyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterCyclicPutPtr
newCallback_AdapterInterface_AdapterCyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterCyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterCyclicPutPtr
newCallback_AdapterInterface_AdapterCyclicPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterCyclicPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterCyclicPut : public Callback_AdapterInterface_AdapterCyclicPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterCyclicPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterCyclicPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterCyclicPutPtr
newCallback_AdapterInterface_AdapterCyclicPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterCyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterCyclicPutPtr
newCallback_AdapterInterface_AdapterCyclicPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterCyclicPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterEventPut : public Callback_AdapterInterface_AdapterEventPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterEventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterEventPutPtr
newCallback_AdapterInterface_AdapterEventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEventPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterEventPutPtr
newCallback_AdapterInterface_AdapterEventPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEventPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterEventPut : public Callback_AdapterInterface_AdapterEventPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterEventPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEventPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterEventPutPtr
newCallback_AdapterInterface_AdapterEventPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterEventPutPtr
newCallback_AdapterInterface_AdapterEventPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEventPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterMDPut : public Callback_AdapterInterface_AdapterMDPut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterMDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterMDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterMDPutPtr
newCallback_AdapterInterface_AdapterMDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterMDPut<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterMDPutPtr
newCallback_AdapterInterface_AdapterMDPut(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterMDPut<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterMDPut : public Callback_AdapterInterface_AdapterMDPut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterMDPut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterMDPut(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterMDPutPtr
newCallback_AdapterInterface_AdapterMDPut(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterMDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterMDPutPtr
newCallback_AdapterInterface_AdapterMDPut(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterMDPut<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterWrite2Level1 : public Callback_AdapterInterface_AdapterWrite2Level1_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterWrite2Level1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterWrite2Level1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterWrite2Level1Ptr
newCallback_AdapterInterface_AdapterWrite2Level1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterWrite2Level1<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterWrite2Level1Ptr
newCallback_AdapterInterface_AdapterWrite2Level1(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterWrite2Level1<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterWrite2Level1 : public Callback_AdapterInterface_AdapterWrite2Level1_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterWrite2Level1(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterWrite2Level1(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterWrite2Level1Ptr
newCallback_AdapterInterface_AdapterWrite2Level1(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterWrite2Level1<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterWrite2Level1Ptr
newCallback_AdapterInterface_AdapterWrite2Level1(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterWrite2Level1<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterEnableArchive : public Callback_AdapterInterface_AdapterEnableArchive_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterEnableArchive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEnableArchive(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterEnableArchivePtr
newCallback_AdapterInterface_AdapterEnableArchive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEnableArchive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterEnableArchivePtr
newCallback_AdapterInterface_AdapterEnableArchive(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEnableArchive<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterEnableArchive : public Callback_AdapterInterface_AdapterEnableArchive_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterEnableArchive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEnableArchive(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterEnableArchivePtr
newCallback_AdapterInterface_AdapterEnableArchive(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEnableArchive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterEnableArchivePtr
newCallback_AdapterInterface_AdapterEnableArchive(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEnableArchive<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AdapterInterface_AdapterEnableAllArchives : public Callback_AdapterInterface_AdapterEnableAllArchives_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AdapterInterface_AdapterEnableAllArchives(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEnableAllArchives(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_AdapterInterface_AdapterEnableAllArchivesPtr
newCallback_AdapterInterface_AdapterEnableAllArchives(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEnableAllArchives<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AdapterInterface_AdapterEnableAllArchivesPtr
newCallback_AdapterInterface_AdapterEnableAllArchives(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AdapterInterface_AdapterEnableAllArchives<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AdapterInterface_AdapterEnableAllArchives : public Callback_AdapterInterface_AdapterEnableAllArchives_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AdapterInterface_AdapterEnableAllArchives(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::AdapterInterfacePrx __proxy = ::iPlature::AdapterInterfacePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AdapterEnableAllArchives(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_AdapterInterface_AdapterEnableAllArchivesPtr
newCallback_AdapterInterface_AdapterEnableAllArchives(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEnableAllArchives<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AdapterInterface_AdapterEnableAllArchivesPtr
newCallback_AdapterInterface_AdapterEnableAllArchives(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AdapterInterface_AdapterEnableAllArchives<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
