// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `MLDefine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __imultilink___MLDefine_h__
#define __imultilink___MLDefine_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <pace/CommonDef.h>
#include <pace/Exception.h>
#include <tag/TagDefines.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace iPlature
{

namespace iMultiLink
{

class APIError : public ::iPlature::iPlatureBaseEx
{
public:

    APIError() {}
    APIError(::Ice::Int, const ::std::string&, bool);
    virtual ~APIError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    bool Done;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static APIError __APIError_init;

class APIParamError : public ::iPlature::iMultiLink::APIError
{
public:

    APIParamError() {}
    APIParamError(::Ice::Int, const ::std::string&, bool, ::Ice::Short);
    virtual ~APIParamError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::Ice::Short ParamIndex;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

class APIExcuteError : public ::iPlature::iMultiLink::APIError
{
public:

    APIExcuteError() {}
    APIExcuteError(::Ice::Int, const ::std::string&, bool, ::Ice::Short);
    virtual ~APIExcuteError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::Ice::Short TopicStatus;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

class TelError : public ::iPlature::iPlatureBaseEx
{
public:

    TelError() {}
    TelError(::Ice::Int, const ::std::string&, bool);
    virtual ~TelError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    bool IsTopicAvailble;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

struct stOPCItem
{
    ::Ice::Long ulItemID;
    ::std::string strItemName;
    ::Ice::Int unItemType;
    ::Ice::Float fCoefficient;
    ::std::string strRemark;
    ::std::string strTagName;
    ::Ice::Long ulClientHandle;
    ::Ice::Long ulServerHandle;

    bool operator==(const stOPCItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ulItemID != __rhs.ulItemID)
        {
            return false;
        }
        if(strItemName != __rhs.strItemName)
        {
            return false;
        }
        if(unItemType != __rhs.unItemType)
        {
            return false;
        }
        if(fCoefficient != __rhs.fCoefficient)
        {
            return false;
        }
        if(strRemark != __rhs.strRemark)
        {
            return false;
        }
        if(strTagName != __rhs.strTagName)
        {
            return false;
        }
        if(ulClientHandle != __rhs.ulClientHandle)
        {
            return false;
        }
        if(ulServerHandle != __rhs.ulServerHandle)
        {
            return false;
        }
        return true;
    }

    bool operator<(const stOPCItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ulItemID < __rhs.ulItemID)
        {
            return true;
        }
        else if(__rhs.ulItemID < ulItemID)
        {
            return false;
        }
        if(strItemName < __rhs.strItemName)
        {
            return true;
        }
        else if(__rhs.strItemName < strItemName)
        {
            return false;
        }
        if(unItemType < __rhs.unItemType)
        {
            return true;
        }
        else if(__rhs.unItemType < unItemType)
        {
            return false;
        }
        if(fCoefficient < __rhs.fCoefficient)
        {
            return true;
        }
        else if(__rhs.fCoefficient < fCoefficient)
        {
            return false;
        }
        if(strRemark < __rhs.strRemark)
        {
            return true;
        }
        else if(__rhs.strRemark < strRemark)
        {
            return false;
        }
        if(strTagName < __rhs.strTagName)
        {
            return true;
        }
        else if(__rhs.strTagName < strTagName)
        {
            return false;
        }
        if(ulClientHandle < __rhs.ulClientHandle)
        {
            return true;
        }
        else if(__rhs.ulClientHandle < ulClientHandle)
        {
            return false;
        }
        if(ulServerHandle < __rhs.ulServerHandle)
        {
            return true;
        }
        else if(__rhs.ulServerHandle < ulServerHandle)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const stOPCItem& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const stOPCItem& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const stOPCItem& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const stOPCItem& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::iPlature::iMultiLink::stOPCItem> ITEMQUEUE;
void __writeITEMQUEUE(::IceInternal::BasicStream*, const ::iPlature::iMultiLink::stOPCItem*, const ::iPlature::iMultiLink::stOPCItem*);
void __readITEMQUEUE(::IceInternal::BasicStream*, ITEMQUEUE&);

typedef ::std::map< ::std::string, ::std::string> MAPTAGVALUE;
void __writeMAPTAGVALUE(::IceInternal::BasicStream*, const MAPTAGVALUE&);
void __readMAPTAGVALUE(::IceInternal::BasicStream*, MAPTAGVALUE&);

}

}

#endif
