// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `DBServerSlice.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __DBServerSlice_h__
#define __DBServerSlice_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iPlature
{

class SQLCommand;

class DBServerManager;

}

}

namespace iPlature
{

class SQLCommand;
bool operator==(const SQLCommand&, const SQLCommand&);
bool operator<(const SQLCommand&, const SQLCommand&);

class DBServerManager;
bool operator==(const DBServerManager&, const DBServerManager&);
bool operator<(const DBServerManager&, const DBServerManager&);

}

namespace IceInternal
{

::Ice::Object* upCast(::iPlature::SQLCommand*);
::IceProxy::Ice::Object* upCast(::IceProxy::iPlature::SQLCommand*);

::Ice::Object* upCast(::iPlature::DBServerManager*);
::IceProxy::Ice::Object* upCast(::IceProxy::iPlature::DBServerManager*);

}

namespace iPlature
{

typedef ::IceInternal::Handle< ::iPlature::SQLCommand> SQLCommandPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iPlature::SQLCommand> SQLCommandPrx;

void __read(::IceInternal::BasicStream*, SQLCommandPrx&);
void __patch__SQLCommandPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::iPlature::DBServerManager> DBServerManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iPlature::DBServerManager> DBServerManagerPrx;

void __read(::IceInternal::BasicStream*, DBServerManagerPrx&);
void __patch__DBServerManagerPtr(void*, ::Ice::ObjectPtr&);

}

namespace iPlature
{

typedef ::std::vector< ::Ice::Byte> ByteSeq;

typedef ::std::vector< ::iPlature::ByteSeq> RecordSequence;
void __writeRecordSequence(::IceInternal::BasicStream*, const ::iPlature::ByteSeq*, const ::iPlature::ByteSeq*);
void __readRecordSequence(::IceInternal::BasicStream*, RecordSequence&);

typedef ::std::vector< ::iPlature::RecordSequence> ResultDataSet;
void __writeResultDataSet(::IceInternal::BasicStream*, const ::iPlature::RecordSequence*, const ::iPlature::RecordSequence*);
void __readResultDataSet(::IceInternal::BasicStream*, ResultDataSet&);

class SQLError : public ::Ice::UserException
{
public:

    SQLError() {}
    SQLError(::Ice::Int, const ::iPlature::ByteSeq&);
    virtual ~SQLError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::Ice::Int errorCode;
    ::iPlature::ByteSeq reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static SQLError __SQLError_init;

}

namespace iPlature
{

class Callback_SQLCommand_ExecuteSQL_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_ExecuteSQL_Base> Callback_SQLCommand_ExecuteSQLPtr;

class Callback_SQLCommand_Query_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_Query_Base> Callback_SQLCommand_QueryPtr;

class Callback_SQLCommand_ExecuteEx_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_ExecuteEx_Base> Callback_SQLCommand_ExecuteExPtr;

class Callback_SQLCommand_Reset_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_Reset_Base> Callback_SQLCommand_ResetPtr;

class Callback_SQLCommand_Commmit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_Commmit_Base> Callback_SQLCommand_CommmitPtr;

class Callback_SQLCommand_RollBack_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_RollBack_Base> Callback_SQLCommand_RollBackPtr;

class Callback_SQLCommand_HeartBeat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SQLCommand_HeartBeat_Base> Callback_SQLCommand_HeartBeatPtr;

class Callback_DBServerManager_GetSQLCommand_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBServerManager_GetSQLCommand_Base> Callback_DBServerManager_GetSQLCommandPtr;

class Callback_DBServerManager_GetServerType_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DBServerManager_GetServerType_Base> Callback_DBServerManager_GetServerTypePtr;

}

namespace IceProxy
{

namespace iPlature
{

class SQLCommand : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int ExecuteSQL(const ::std::string& sql)
    {
        return ExecuteSQL(sql, 0);
    }
    ::Ice::Int ExecuteSQL(const ::std::string& sql, const ::Ice::Context& __ctx)
    {
        return ExecuteSQL(sql, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql)
    {
        return begin_ExecuteSQL(sql, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql, const ::Ice::Context& __ctx)
    {
        return begin_ExecuteSQL(sql, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteSQL(sql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteSQL(sql, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql, const ::iPlature::Callback_SQLCommand_ExecuteSQLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteSQL(sql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string& sql, const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_ExecuteSQLPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteSQL(sql, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ExecuteSQL(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ExecuteSQL(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ExecuteSQL(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iPlature::ResultDataSet Query(const ::std::string& strSql)
    {
        return Query(strSql, 0);
    }
    ::iPlature::ResultDataSet Query(const ::std::string& strSql, const ::Ice::Context& __ctx)
    {
        return Query(strSql, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql)
    {
        return begin_Query(strSql, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql, const ::Ice::Context& __ctx)
    {
        return begin_Query(strSql, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Query(strSql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Query(strSql, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql, const ::iPlature::Callback_SQLCommand_QueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Query(strSql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Query(const ::std::string& strSql, const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_QueryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Query(strSql, &__ctx, __del, __cookie);
    }

    ::iPlature::ResultDataSet end_Query(const ::Ice::AsyncResultPtr&);
    
private:

    ::iPlature::ResultDataSet Query(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Query(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ExecuteEx(const ::std::string& strSql, ::iPlature::ResultDataSet& data)
    {
        return ExecuteEx(strSql, data, 0);
    }
    ::Ice::Int ExecuteEx(const ::std::string& strSql, ::iPlature::ResultDataSet& data, const ::Ice::Context& __ctx)
    {
        return ExecuteEx(strSql, data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql)
    {
        return begin_ExecuteEx(strSql, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql, const ::Ice::Context& __ctx)
    {
        return begin_ExecuteEx(strSql, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteEx(strSql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteEx(strSql, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql, const ::iPlature::Callback_SQLCommand_ExecuteExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteEx(strSql, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string& strSql, const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_ExecuteExPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExecuteEx(strSql, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ExecuteEx(::iPlature::ResultDataSet& data, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ExecuteEx(const ::std::string&, ::iPlature::ResultDataSet&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ExecuteEx(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Reset()
    {
        Reset(0);
    }
    void Reset(const ::Ice::Context& __ctx)
    {
        Reset(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_Reset()
    {
        return begin_Reset(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Reset(const ::Ice::Context& __ctx)
    {
        return begin_Reset(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Reset(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Reset(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Reset(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Reset(const ::iPlature::Callback_SQLCommand_ResetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Reset(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Reset(const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_ResetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Reset(&__ctx, __del, __cookie);
    }

    void end_Reset(const ::Ice::AsyncResultPtr&);
    
private:

    void Reset(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Reset(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Commmit()
    {
        Commmit(0);
    }
    void Commmit(const ::Ice::Context& __ctx)
    {
        Commmit(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_Commmit()
    {
        return begin_Commmit(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Commmit(const ::Ice::Context& __ctx)
    {
        return begin_Commmit(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Commmit(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Commmit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Commmit(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Commmit(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Commmit(const ::iPlature::Callback_SQLCommand_CommmitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Commmit(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Commmit(const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_CommmitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Commmit(&__ctx, __del, __cookie);
    }

    void end_Commmit(const ::Ice::AsyncResultPtr&);
    
private:

    void Commmit(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Commmit(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RollBack()
    {
        RollBack(0);
    }
    void RollBack(const ::Ice::Context& __ctx)
    {
        RollBack(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_RollBack()
    {
        return begin_RollBack(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RollBack(const ::Ice::Context& __ctx)
    {
        return begin_RollBack(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RollBack(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RollBack(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RollBack(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RollBack(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RollBack(const ::iPlature::Callback_SQLCommand_RollBackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RollBack(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RollBack(const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_RollBackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RollBack(&__ctx, __del, __cookie);
    }

    void end_RollBack(const ::Ice::AsyncResultPtr&);
    
private:

    void RollBack(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RollBack(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void HeartBeat()
    {
        HeartBeat(0);
    }
    void HeartBeat(const ::Ice::Context& __ctx)
    {
        HeartBeat(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat()
    {
        return begin_HeartBeat(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat(const ::Ice::Context& __ctx)
    {
        return begin_HeartBeat(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HeartBeat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HeartBeat(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat(const ::iPlature::Callback_SQLCommand_HeartBeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HeartBeat(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_HeartBeat(const ::Ice::Context& __ctx, const ::iPlature::Callback_SQLCommand_HeartBeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_HeartBeat(&__ctx, __del, __cookie);
    }

    void end_HeartBeat(const ::Ice::AsyncResultPtr&);
    
private:

    void HeartBeat(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_HeartBeat(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<SQLCommand> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<SQLCommand*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<SQLCommand*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DBServerManager : virtual public ::IceProxy::Ice::Object
{
public:

    ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string& appname)
    {
        return GetSQLCommand(appname, 0);
    }
    ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string& appname, const ::Ice::Context& __ctx)
    {
        return GetSQLCommand(appname, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname)
    {
        return begin_GetSQLCommand(appname, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname, const ::Ice::Context& __ctx)
    {
        return begin_GetSQLCommand(appname, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSQLCommand(appname, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSQLCommand(appname, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname, const ::iPlature::Callback_DBServerManager_GetSQLCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSQLCommand(appname, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string& appname, const ::Ice::Context& __ctx, const ::iPlature::Callback_DBServerManager_GetSQLCommandPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSQLCommand(appname, &__ctx, __del, __cookie);
    }

    ::iPlature::SQLCommandPrx end_GetSQLCommand(const ::Ice::AsyncResultPtr&);
    
private:

    ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetSQLCommand(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetServerType()
    {
        return GetServerType(0);
    }
    ::Ice::Int GetServerType(const ::Ice::Context& __ctx)
    {
        return GetServerType(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetServerType()
    {
        return begin_GetServerType(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServerType(const ::Ice::Context& __ctx)
    {
        return begin_GetServerType(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetServerType(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServerType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServerType(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServerType(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServerType(const ::iPlature::Callback_DBServerManager_GetServerTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServerType(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetServerType(const ::Ice::Context& __ctx, const ::iPlature::Callback_DBServerManager_GetServerTypePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetServerType(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetServerType(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetServerType(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetServerType(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<DBServerManager> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<DBServerManager*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<DBServerManager*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iPlature
{

class SQLCommand : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int ExecuteSQL(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::iPlature::ResultDataSet Query(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int ExecuteEx(const ::std::string&, ::iPlature::ResultDataSet&, const ::Ice::Context*) = 0;

    virtual void Reset(const ::Ice::Context*) = 0;

    virtual void Commmit(const ::Ice::Context*) = 0;

    virtual void RollBack(const ::Ice::Context*) = 0;

    virtual void HeartBeat(const ::Ice::Context*) = 0;
};

class DBServerManager : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int GetServerType(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace iPlature
{

class SQLCommand : virtual public ::IceDelegate::iPlature::SQLCommand,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int ExecuteSQL(const ::std::string&, const ::Ice::Context*);

    virtual ::iPlature::ResultDataSet Query(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int ExecuteEx(const ::std::string&, ::iPlature::ResultDataSet&, const ::Ice::Context*);

    virtual void Reset(const ::Ice::Context*);

    virtual void Commmit(const ::Ice::Context*);

    virtual void RollBack(const ::Ice::Context*);

    virtual void HeartBeat(const ::Ice::Context*);
};

class DBServerManager : virtual public ::IceDelegate::iPlature::DBServerManager,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetServerType(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace iPlature
{

class SQLCommand : virtual public ::IceDelegate::iPlature::SQLCommand,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int ExecuteSQL(const ::std::string&, const ::Ice::Context*);

    virtual ::iPlature::ResultDataSet Query(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int ExecuteEx(const ::std::string&, ::iPlature::ResultDataSet&, const ::Ice::Context*);

    virtual void Reset(const ::Ice::Context*);

    virtual void Commmit(const ::Ice::Context*);

    virtual void RollBack(const ::Ice::Context*);

    virtual void HeartBeat(const ::Ice::Context*);
};

class DBServerManager : virtual public ::IceDelegate::iPlature::DBServerManager,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetServerType(const ::Ice::Context*);
};

}

}

namespace iPlature
{

class SQLCommand : virtual public ::Ice::Object
{
public:

    typedef SQLCommandPrx ProxyType;
    typedef SQLCommandPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int ExecuteSQL(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ExecuteSQL(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iPlature::ResultDataSet Query(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Query(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ExecuteEx(const ::std::string&, ::iPlature::ResultDataSet&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ExecuteEx(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Reset(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Reset(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Commmit(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Commmit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RollBack(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RollBack(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void HeartBeat(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___HeartBeat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const SQLCommand& l, const SQLCommand& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SQLCommand& l, const SQLCommand& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DBServerManager : virtual public ::Ice::Object
{
public:

    typedef DBServerManagerPrx ProxyType;
    typedef DBServerManagerPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::iPlature::SQLCommandPrx GetSQLCommand(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetSQLCommand(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetServerType(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetServerType(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const DBServerManager& l, const DBServerManager& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DBServerManager& l, const DBServerManager& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iPlature
{

template<class T>
class CallbackNC_SQLCommand_ExecuteSQL : public Callback_SQLCommand_ExecuteSQL_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SQLCommand_ExecuteSQL(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExecuteSQL(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLCommand_ExecuteSQLPtr
newCallback_SQLCommand_ExecuteSQL(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_ExecuteSQL<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_ExecuteSQLPtr
newCallback_SQLCommand_ExecuteSQL(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_ExecuteSQL<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_ExecuteSQL : public Callback_SQLCommand_ExecuteSQL_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SQLCommand_ExecuteSQL(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExecuteSQL(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLCommand_ExecuteSQLPtr
newCallback_SQLCommand_ExecuteSQL(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_ExecuteSQL<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_ExecuteSQLPtr
newCallback_SQLCommand_ExecuteSQL(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_ExecuteSQL<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_Query : public Callback_SQLCommand_Query_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iPlature::ResultDataSet&);

    CallbackNC_SQLCommand_Query(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::iPlature::ResultDataSet __ret;
        try
        {
            __ret = __proxy->end_Query(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLCommand_QueryPtr
newCallback_SQLCommand_Query(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iPlature::ResultDataSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Query<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_QueryPtr
newCallback_SQLCommand_Query(T* instance, void (T::*cb)(const ::iPlature::ResultDataSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Query<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_Query : public Callback_SQLCommand_Query_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iPlature::ResultDataSet&, const CT&);

    Callback_SQLCommand_Query(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::iPlature::ResultDataSet __ret;
        try
        {
            __ret = __proxy->end_Query(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLCommand_QueryPtr
newCallback_SQLCommand_Query(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iPlature::ResultDataSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Query<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_QueryPtr
newCallback_SQLCommand_Query(T* instance, void (T::*cb)(const ::iPlature::ResultDataSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Query<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_ExecuteEx : public Callback_SQLCommand_ExecuteEx_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::ResultDataSet&);

    CallbackNC_SQLCommand_ExecuteEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::iPlature::ResultDataSet data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExecuteEx(data, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, data);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, data);
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLCommand_ExecuteExPtr
newCallback_SQLCommand_ExecuteEx(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::ResultDataSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_ExecuteEx<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_ExecuteExPtr
newCallback_SQLCommand_ExecuteEx(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::ResultDataSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_ExecuteEx<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_ExecuteEx : public Callback_SQLCommand_ExecuteEx_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iPlature::ResultDataSet&, const CT&);

    Callback_SQLCommand_ExecuteEx(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        ::iPlature::ResultDataSet data;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExecuteEx(data, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, data, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, data, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLCommand_ExecuteExPtr
newCallback_SQLCommand_ExecuteEx(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iPlature::ResultDataSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_ExecuteEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_ExecuteExPtr
newCallback_SQLCommand_ExecuteEx(T* instance, void (T::*cb)(::Ice::Int, const ::iPlature::ResultDataSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_ExecuteEx<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_Reset : public Callback_SQLCommand_Reset_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SQLCommand_Reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Reset<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Reset<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Reset<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_Reset : public Callback_SQLCommand_Reset_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SQLCommand_Reset(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Reset<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_ResetPtr
newCallback_SQLCommand_Reset(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Reset<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_Commmit : public Callback_SQLCommand_Commmit_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SQLCommand_Commmit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_Commmit(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Commmit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Commmit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Commmit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_Commmit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_Commmit : public Callback_SQLCommand_Commmit_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SQLCommand_Commmit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_Commmit(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Commmit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Commmit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Commmit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_CommmitPtr
newCallback_SQLCommand_Commmit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_Commmit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_RollBack : public Callback_SQLCommand_RollBack_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SQLCommand_RollBack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_RollBack(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_RollBack<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_RollBack<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_RollBack<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_RollBack<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_RollBack : public Callback_SQLCommand_RollBack_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SQLCommand_RollBack(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::SQLCommandPrx __proxy = ::iPlature::SQLCommandPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_RollBack(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_RollBack<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_RollBack<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_RollBack<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_RollBackPtr
newCallback_SQLCommand_RollBack(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_RollBack<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SQLCommand_HeartBeat : public Callback_SQLCommand_HeartBeat_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SQLCommand_HeartBeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_HeartBeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_HeartBeat<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_HeartBeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SQLCommand_HeartBeat<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SQLCommand_HeartBeat : public Callback_SQLCommand_HeartBeat_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SQLCommand_HeartBeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_HeartBeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_HeartBeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_HeartBeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SQLCommand_HeartBeatPtr
newCallback_SQLCommand_HeartBeat(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SQLCommand_HeartBeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DBServerManager_GetSQLCommand : public Callback_DBServerManager_GetSQLCommand_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iPlature::SQLCommandPrx&);

    CallbackNC_DBServerManager_GetSQLCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::DBServerManagerPrx __proxy = ::iPlature::DBServerManagerPrx::uncheckedCast(__result->getProxy());
        ::iPlature::SQLCommandPrx __ret;
        try
        {
            __ret = __proxy->end_GetSQLCommand(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBServerManager_GetSQLCommandPtr
newCallback_DBServerManager_GetSQLCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iPlature::SQLCommandPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBServerManager_GetSQLCommand<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBServerManager_GetSQLCommandPtr
newCallback_DBServerManager_GetSQLCommand(T* instance, void (T::*cb)(const ::iPlature::SQLCommandPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBServerManager_GetSQLCommand<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBServerManager_GetSQLCommand : public Callback_DBServerManager_GetSQLCommand_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iPlature::SQLCommandPrx&, const CT&);

    Callback_DBServerManager_GetSQLCommand(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::DBServerManagerPrx __proxy = ::iPlature::DBServerManagerPrx::uncheckedCast(__result->getProxy());
        ::iPlature::SQLCommandPrx __ret;
        try
        {
            __ret = __proxy->end_GetSQLCommand(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBServerManager_GetSQLCommandPtr
newCallback_DBServerManager_GetSQLCommand(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iPlature::SQLCommandPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBServerManager_GetSQLCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBServerManager_GetSQLCommandPtr
newCallback_DBServerManager_GetSQLCommand(T* instance, void (T::*cb)(const ::iPlature::SQLCommandPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBServerManager_GetSQLCommand<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DBServerManager_GetServerType : public Callback_DBServerManager_GetServerType_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_DBServerManager_GetServerType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::DBServerManagerPrx __proxy = ::iPlature::DBServerManagerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServerType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_DBServerManager_GetServerTypePtr
newCallback_DBServerManager_GetServerType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBServerManager_GetServerType<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DBServerManager_GetServerTypePtr
newCallback_DBServerManager_GetServerType(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DBServerManager_GetServerType<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DBServerManager_GetServerType : public Callback_DBServerManager_GetServerType_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_DBServerManager_GetServerType(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iPlature::DBServerManagerPrx __proxy = ::iPlature::DBServerManagerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetServerType(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_DBServerManager_GetServerTypePtr
newCallback_DBServerManager_GetServerType(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBServerManager_GetServerType<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DBServerManager_GetServerTypePtr
newCallback_DBServerManager_GetServerType(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DBServerManager_GetServerType<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
