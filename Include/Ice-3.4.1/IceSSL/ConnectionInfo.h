// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `ConnectionInfo.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef __IceSSL_ConnectionInfo_h__
#define __IceSSL_ConnectionInfo_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Connection.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_SSL_API
#   ifdef ICE_SSL_API_EXPORTS
#       define ICE_SSL_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_SSL_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceSSL
{

class ConnectionInfo;
bool operator==(const ConnectionInfo&, const ConnectionInfo&);
bool operator<(const ConnectionInfo&, const ConnectionInfo&);

}

namespace IceInternal
{

ICE_SSL_API ::Ice::LocalObject* upCast(::IceSSL::ConnectionInfo*);

}

namespace IceSSL
{

typedef ::IceInternal::Handle< ::IceSSL::ConnectionInfo> ConnectionInfoPtr;

}

namespace IceSSL
{

class ICE_SSL_API ConnectionInfo : public ::Ice::IPConnectionInfo
{
public:

    typedef ConnectionInfoPtr PointerType;
    
    ConnectionInfo() {}
    ConnectionInfo(bool, const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::StringSeq&);

protected:

    virtual ~ConnectionInfo() {}

    friend class ConnectionInfo__staticInit;

public:

    ::std::string cipher;

    ::Ice::StringSeq certs;
};

class ConnectionInfo__staticInit
{
public:

    ::IceSSL::ConnectionInfo _init;
};

static ConnectionInfo__staticInit _ConnectionInfo_init;

inline bool operator==(const ConnectionInfo& l, const ConnectionInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const ConnectionInfo& l, const ConnectionInfo& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

#endif
