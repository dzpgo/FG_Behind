// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `PTInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <PTInterface.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __PT__PTInterface__UsrLoginCheck_name = "UsrLoginCheck";

static const ::std::string __PT__PTInterface__TruckPos_name = "TruckPos";

static const ::std::string __PT__PTInterface__TruckInInf_name = "TruckInInf";

static const ::std::string __PT__PTInterface__SearchMatInf_name = "SearchMatInf";

static const ::std::string __PT__PTInterface__DeleteWrongMat_name = "DeleteWrongMat";

static const ::std::string __PT__PTInterface__SubmitTruckInf_name = "SubmitTruckInf";

static const ::std::string __PT__PTInterface__TruckInOutAck_name = "TruckInOutAck";

static const ::std::string __PT__PTInterface__PreSend2L3_name = "PreSend2L3";

static const ::std::string __PT__PTInterface__CheckPreSend_name = "CheckPreSend";

static const ::std::string __PT__PTInterface__MatInfSearch_name = "MatInfSearch";

static const ::std::string __PT__PTInterface__MatInfQuery_name = "MatInfQuery";

static const ::std::string __PT__PTInterface__StockInfSearch_name = "StockInfSearch";

static const ::std::string __PT__PTInterface__StockInfSumbit_name = "StockInfSumbit";

static const ::std::string __PT__PTInterface__StockDiffSearch_name = "StockDiffSearch";

static const ::std::string __PT__PTInterface__OutSearch_name = "OutSearch";

static const ::std::string __PT__PTInterface__OutInventoryInfo_name = "OutInventoryInfo";

static const ::std::string __PT__PTInterface__RecheckLIST_name = "RecheckLIST";

static const ::std::string __PT__PTInterface__MatInOut_name = "MatInOut";

static const ::std::string __PT__PTInterface__MatInOutAckSearch_name = "MatInOutAckSearch";

::Ice::Object* IceInternal::upCast(::PT::PTInterface* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::PT::PTInterface* p) { return p; }

void
PT::__read(::IceInternal::BasicStream* __is, ::PT::PTInterfacePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::PT::PTInterface;
        v->__copyFrom(proxy);
    }
}

void
PT::__write(::IceInternal::BasicStream* __os, ::PT::InOutMode v)
{
    __os->write(static_cast< ::Ice::Byte>(v), 2);
}

void
PT::__read(::IceInternal::BasicStream* __is, ::PT::InOutMode& v)
{
    ::Ice::Byte val;
    __is->read(val, 2);
    v = static_cast< ::PT::InOutMode>(val);
}

void
PT::TruckCls::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(carNo);
    __os->write(HeadDirection);
    __os->write(TruckPosition);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::TruckCls::__read(::IceInternal::BasicStream* __is)
{
    __is->read(carNo);
    __is->read(HeadDirection);
    __is->read(TruckPosition);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::dtUnit::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(StoreID);
    __os->write(Location);
    __os->write(BigAreaNO);
    __os->write(UnitNo);
    __os->write(layer);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::dtUnit::__read(::IceInternal::BasicStream* __is)
{
    __is->read(StoreID);
    __is->read(Location);
    __is->read(BigAreaNO);
    __is->read(UnitNo);
    __is->read(layer);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::MatterCls::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(status);
    __os->write(matno);
    stcUnit.__write(__os);
    InPosition.__write(__os);
    OutPosition.__write(__os);
    __os->write(InGroove);
    __os->write(OutGroove);
    __os->write(state);
    __os->write(ackflag);
    __os->write(l3lack);
    __os->write(cQualityCode);
    __os->write(sleeve);
    __os->write(isUnload);
    __os->write(PackageState);
    __os->write(direction);
    __os->write(xPostion);
    __os->write(yPostion);
    __os->write(zPostion);
    __os->write(rowNo);
    __os->write(frameNo);
    __os->write(width);
    __os->write(weight);
    __os->write(shape);
    __os->write(insideDia);
    __os->write(outsideDia);
    __os->write(packCode);
    __os->write(planNo);
    __os->write(MatName);
    __os->write(ManuUnit);
    __os->write(NextUnitno);
    __os->write(ContractNo);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::MatterCls::__read(::IceInternal::BasicStream* __is)
{
    __is->read(status);
    __is->read(matno);
    stcUnit.__read(__is);
    InPosition.__read(__is);
    OutPosition.__read(__is);
    __is->read(InGroove);
    __is->read(OutGroove);
    __is->read(state);
    __is->read(ackflag);
    __is->read(l3lack);
    __is->read(cQualityCode);
    __is->read(sleeve);
    __is->read(isUnload);
    __is->read(PackageState);
    __is->read(direction);
    __is->read(xPostion);
    __is->read(yPostion);
    __is->read(zPostion);
    __is->read(rowNo);
    __is->read(frameNo);
    __is->read(width);
    __is->read(weight);
    __is->read(shape);
    __is->read(insideDia);
    __is->read(outsideDia);
    __is->read(packCode);
    __is->read(planNo);
    __is->read(MatName);
    __is->read(ManuUnit);
    __is->read(NextUnitno);
    __is->read(ContractNo);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::__writeMatterClsSeq(::IceInternal::BasicStream* __os, const ::PT::MatterCls* begin, const ::PT::MatterCls* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
PT::__readMatterClsSeq(::IceInternal::BasicStream* __is, ::PT::MatterClsSeq& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(80, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
PT::dtPTCommon::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(StoreID);
    __os->write(PTID);
    __os->write(Shift);
    __os->write(Crew);
    __os->write(Operator);
    __os->write(TimeOper);
    __os->write(Privilege);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::dtPTCommon::__read(::IceInternal::BasicStream* __is)
{
    __is->read(StoreID);
    __is->read(PTID);
    __is->read(Shift);
    __is->read(Crew);
    __is->read(Operator);
    __is->read(TimeOper);
    __is->read(Privilege);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::dtOutPlan::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(state);
    __os->write(matterNo);
    __os->write(PlanNO);
    stcUnit.__write(__os);
    __os->write(LayerNO);
    __os->write(PlanTIME);
    __os->write(ShipCNAME);
    __os->write(OutStoreID);
    __os->write(InStoreID);
    __os->write(MatType);
    __os->write(ShipLotNUM);
    __os->write(HAVEN);
    __os->write(PIECE);
    __os->write(GrossWEIGHT);
    __os->write(NetWEIGHT);
    __os->write(TransTYPE);
    __os->write(FlagStraightFilling);
    __os->write(PlanStatus);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::dtOutPlan::__read(::IceInternal::BasicStream* __is)
{
    __is->read(state);
    __is->read(matterNo);
    __is->read(PlanNO);
    stcUnit.__read(__is);
    __is->read(LayerNO);
    __is->read(PlanTIME);
    __is->read(ShipCNAME);
    __is->read(OutStoreID);
    __is->read(InStoreID);
    __is->read(MatType);
    __is->read(ShipLotNUM);
    __is->read(HAVEN);
    __is->read(PIECE);
    __is->read(GrossWEIGHT);
    __is->read(NetWEIGHT);
    __is->read(TransTYPE);
    __is->read(FlagStraightFilling);
    __is->read(PlanStatus);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::__writeLstOutPlan(::IceInternal::BasicStream* __os, const ::PT::dtOutPlan* begin, const ::PT::dtOutPlan* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
PT::__readLstOutPlan(::IceInternal::BasicStream* __is, ::PT::LstOutPlan& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(29, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
PT::dtOutPlanMAT::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(PlanNO);
    __os->write(MATNO);
    __os->write(OutMATNO);
    __os->write(LENGTH);
    __os->write(WIDTH);
    __os->write(THICK);
    __os->write(InternalDIAMETER);
    __os->write(ExternalDIAMETER);
    __os->write(NetWEIGHT);
    __os->write(GrossWEIGHT);
    stcUnit.__write(__os);
    __os->write(LayerNO);
    __os->write(RequireTime);
    __os->write(PlanStatus);
    __os->write(sqare1);
    __os->write(sqare2);
}

void
PT::dtOutPlanMAT::__read(::IceInternal::BasicStream* __is)
{
    __is->read(PlanNO);
    __is->read(MATNO);
    __is->read(OutMATNO);
    __is->read(LENGTH);
    __is->read(WIDTH);
    __is->read(THICK);
    __is->read(InternalDIAMETER);
    __is->read(ExternalDIAMETER);
    __is->read(NetWEIGHT);
    __is->read(GrossWEIGHT);
    stcUnit.__read(__is);
    __is->read(LayerNO);
    __is->read(RequireTime);
    __is->read(PlanStatus);
    __is->read(sqare1);
    __is->read(sqare2);
}

void
PT::__writeLstOutPlanMAT(::IceInternal::BasicStream* __os, const ::PT::dtOutPlanMAT* begin, const ::PT::dtOutPlanMAT* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
PT::__readLstOutPlanMAT(::IceInternal::BasicStream* __is, ::PT::LstOutPlanMAT& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(25, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
PT::inventoryStock::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(select);
    __os->write(unitno);
    __os->write(MATNO);
    __os->write(MATNOFIRST);
}

void
PT::inventoryStock::__read(::IceInternal::BasicStream* __is)
{
    __is->read(select);
    __is->read(unitno);
    __is->read(MATNO);
    __is->read(MATNOFIRST);
}

void
PT::__writeLstInventoryStocks(::IceInternal::BasicStream* __os, const ::PT::inventoryStock* begin, const ::PT::inventoryStock* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
PT::__readLstInventoryStocks(::IceInternal::BasicStream* __is, ::PT::LstInventoryStocks& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

::Ice::Int
IceProxy::PT::PTInterface::UsrLoginCheck(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cPassword, ::std::string& cID, ::Ice::Int& nRet, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__UsrLoginCheck_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->UsrLoginCheck(stcPTCommon, cPassword, cID, nRet, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_UsrLoginCheck(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cPassword, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__UsrLoginCheck_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__UsrLoginCheck_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__UsrLoginCheck_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(cPassword);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_UsrLoginCheck(::std::string& cID, ::Ice::Int& nRet, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__UsrLoginCheck_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(cID);
    __is->read(nRet);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::TruckPos(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& truck, ::PT::TruckCls& Turck, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__TruckPos_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->TruckPos(stcPTCommon, truck, Turck, cID, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_TruckPos(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& truck, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__TruckPos_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__TruckPos_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__TruckPos_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        truck.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_TruckPos(::PT::TruckCls& Turck, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__TruckPos_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    Turck.__read(__is);
    __is->read(cID);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::TruckInInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__TruckInInf_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->TruckInInf(stcPTCommon, CarInf, ProcessNo, cID, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_TruckInInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__TruckInInf_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__TruckInInf_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__TruckInInf_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(ProcessNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_TruckInInf(::std::string& cID, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__TruckInInf_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(cID);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::SearchMatInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::PT::MatterClsSeq& matlist, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__SearchMatInf_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->SearchMatInf(stcPTCommon, CarInf, ProcessNo, matlist, cID, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_SearchMatInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__SearchMatInf_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__SearchMatInf_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__SearchMatInf_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(ProcessNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_SearchMatInf(::PT::MatterClsSeq& matlist, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__SearchMatInf_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::PT::__readMatterClsSeq(__is, matlist);
    __is->read(cID);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::DeleteWrongMat(const ::PT::TruckCls& CarInf, const ::std::string& MATNO, ::Ice::Int ProcessNo, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__DeleteWrongMat_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->DeleteWrongMat(CarInf, MATNO, ProcessNo, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_DeleteWrongMat(const ::PT::TruckCls& CarInf, const ::std::string& MATNO, ::Ice::Int ProcessNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__DeleteWrongMat_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__DeleteWrongMat_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__DeleteWrongMat_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        CarInf.__write(__os);
        __os->write(MATNO);
        __os->write(ProcessNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_DeleteWrongMat(::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__DeleteWrongMat_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::SubmitTruckInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int WorkType, const ::PT::MatterClsSeq& matlist, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__SubmitTruckInf_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_SubmitTruckInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int WorkType, const ::PT::MatterClsSeq& matlist, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__SubmitTruckInf_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__SubmitTruckInf_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__SubmitTruckInf_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(WorkType);
        if(matlist.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::PT::__writeMatterClsSeq(__os, &matlist[0], &matlist[0] + matlist.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_SubmitTruckInf(::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__SubmitTruckInf_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::TruckInOutAck(const ::PT::dtPTCommon& stcPTCommon, ::Ice::Int ProcessNo, ::Ice::Int& nResult, ::PT::MatterClsSeq& matlist, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__TruckInOutAck_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->TruckInOutAck(stcPTCommon, ProcessNo, nResult, matlist, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_TruckInOutAck(const ::PT::dtPTCommon& stcPTCommon, ::Ice::Int ProcessNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__TruckInOutAck_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__TruckInOutAck_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__TruckInOutAck_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(ProcessNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_TruckInOutAck(::Ice::Int& nResult, ::PT::MatterClsSeq& matlist, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__TruckInOutAck_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    ::PT::__readMatterClsSeq(__is, matlist);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::PreSend2L3(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::std::string& MT, const ::std::string& cPresend, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__PreSend2L3_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->PreSend2L3(stcPTCommon, cMAT, MT, cPresend, cID, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_PreSend2L3(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::std::string& MT, const ::std::string& cPresend, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__PreSend2L3_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__PreSend2L3_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__PreSend2L3_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
        __os->write(MT);
        __os->write(cPresend);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_PreSend2L3(::std::string& cID, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__PreSend2L3_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(cID);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::CheckPreSend(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::std::string& cRetMessage, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__CheckPreSend_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->CheckPreSend(stcPTCommon, cMAT, cRetMessage, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_CheckPreSend(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__CheckPreSend_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__CheckPreSend_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__CheckPreSend_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_CheckPreSend(::std::string& cRetMessage, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__CheckPreSend_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(cRetMessage);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::MatInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::PT::MatterCls& mat, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__MatInfSearch_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->MatInfSearch(stcPTCommon, cMAT, mat, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_MatInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__MatInfSearch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__MatInfSearch_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__MatInfSearch_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_MatInfSearch(::PT::MatterCls& mat, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__MatInfSearch_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    mat.__read(__is);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::MatInfQuery(const ::std::string& cMAT, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__MatInfQuery_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->MatInfQuery(cMAT, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_MatInfQuery(const ::std::string& cMAT, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__MatInfQuery_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__MatInfQuery_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__MatInfQuery_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(cMAT);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_MatInfQuery(::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__MatInfQuery_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::StockInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& ColNo, ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__StockInfSearch_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->StockInfSearch(stcPTCommon, ColNo, mat, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_StockInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& ColNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__StockInfSearch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__StockInfSearch_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__StockInfSearch_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(ColNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_StockInfSearch(::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__StockInfSearch_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::PT::__readMatterClsSeq(__is, mat);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::StockInfSumbit(const ::std::string& type, const ::PT::dtPTCommon& stcPTCommon, const ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__StockInfSumbit_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->StockInfSumbit(type, stcPTCommon, mat, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_StockInfSumbit(const ::std::string& type, const ::PT::dtPTCommon& stcPTCommon, const ::PT::MatterClsSeq& mat, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__StockInfSumbit_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__StockInfSumbit_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__StockInfSumbit_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(type);
        stcPTCommon.__write(__os);
        if(mat.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::PT::__writeMatterClsSeq(__os, &mat[0], &mat[0] + mat.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_StockInfSumbit(::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__StockInfSumbit_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::StockDiffSearch(::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__StockDiffSearch_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->StockDiffSearch(mat, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_StockDiffSearch(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__StockDiffSearch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__StockDiffSearch_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__StockDiffSearch_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_StockDiffSearch(::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__StockDiffSearch_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::PT::__readMatterClsSeq(__is, mat);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::OutSearch(const ::std::string& type, ::PT::LstOutPlan& matlist, ::Ice::Int& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__OutSearch_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->OutSearch(type, matlist, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_OutSearch(const ::std::string& type, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__OutSearch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__OutSearch_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__OutSearch_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(type);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_OutSearch(::PT::LstOutPlan& matlist, ::Ice::Int& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__OutSearch_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::PT::__readLstOutPlan(__is, matlist);
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::OutInventoryInfo(const ::std::string& bayno, ::std::string& id, ::std::string& area, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__OutInventoryInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->OutInventoryInfo(bayno, id, area, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_OutInventoryInfo(const ::std::string& bayno, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__OutInventoryInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__OutInventoryInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__OutInventoryInfo_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bayno);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_OutInventoryInfo(::std::string& id, ::std::string& area, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__OutInventoryInfo_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(id);
    __is->read(area);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::RecheckLIST(const ::std::string& bayno, ::std::string& id, ::PT::LstInventoryStocks& LIST, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__RecheckLIST_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->RecheckLIST(bayno, id, LIST, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_RecheckLIST(const ::std::string& bayno, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__RecheckLIST_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__RecheckLIST_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__RecheckLIST_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(bayno);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_RecheckLIST(::std::string& id, ::PT::LstInventoryStocks& LIST, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__RecheckLIST_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(id);
    ::PT::__readLstInventoryStocks(__is, LIST);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::MatInOut(const ::std::string& type, const ::std::string& tagValue, ::std::string& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__MatInOut_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->MatInOut(type, tagValue, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_MatInOut(const ::std::string& type, const ::std::string& tagValue, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__MatInOut_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__MatInOut_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__MatInOut_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(type);
        __os->write(tagValue);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_MatInOut(::std::string& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__MatInOut_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::PT::PTInterface::MatInOutAckSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& matno, const ::std::string& type, ::std::string& nResult, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__PT__PTInterface__MatInOutAckSearch_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::PT::PTInterface* __del = dynamic_cast< ::IceDelegate::PT::PTInterface*>(__delBase.get());
            return __del->MatInOutAckSearch(stcPTCommon, matno, type, nResult, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::PT::PTInterface::begin_MatInOutAckSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& matno, const ::std::string& type, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__PT__PTInterface__MatInOutAckSearch_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __PT__PTInterface__MatInOutAckSearch_name, __del, __cookie);
    try
    {
        __result->__prepare(__PT__PTInterface__MatInOutAckSearch_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        stcPTCommon.__write(__os);
        __os->write(matno);
        __os->write(type);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::PT::PTInterface::end_MatInOutAckSearch(::std::string& nResult, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __PT__PTInterface__MatInOutAckSearch_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(nResult);
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::PT::PTInterface::ice_staticId()
{
    return ::PT::PTInterface::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::PT::PTInterface::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::PT::PTInterface);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::PT::PTInterface::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::PT::PTInterface);
}

::IceProxy::Ice::Object*
IceProxy::PT::PTInterface::__newInstance() const
{
    return new PTInterface;
}

::Ice::Int
IceDelegateM::PT::PTInterface::UsrLoginCheck(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cPassword, ::std::string& cID, ::Ice::Int& nRet, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__UsrLoginCheck_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(cPassword);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(cID);
        __is->read(nRet);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::TruckPos(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& truck, ::PT::TruckCls& Turck, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__TruckPos_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        truck.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        Turck.__read(__is);
        __is->read(cID);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::TruckInInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__TruckInInf_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(ProcessNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(cID);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::SearchMatInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::PT::MatterClsSeq& matlist, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__SearchMatInf_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(ProcessNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::PT::__readMatterClsSeq(__is, matlist);
        __is->read(cID);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::DeleteWrongMat(const ::PT::TruckCls& CarInf, const ::std::string& MATNO, ::Ice::Int ProcessNo, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__DeleteWrongMat_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        CarInf.__write(__os);
        __os->write(MATNO);
        __os->write(ProcessNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::SubmitTruckInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int WorkType, const ::PT::MatterClsSeq& matlist, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__SubmitTruckInf_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        CarInf.__write(__os);
        __os->write(WorkType);
        if(matlist.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::PT::__writeMatterClsSeq(__os, &matlist[0], &matlist[0] + matlist.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::TruckInOutAck(const ::PT::dtPTCommon& stcPTCommon, ::Ice::Int ProcessNo, ::Ice::Int& nResult, ::PT::MatterClsSeq& matlist, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__TruckInOutAck_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(ProcessNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        ::PT::__readMatterClsSeq(__is, matlist);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::PreSend2L3(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::std::string& MT, const ::std::string& cPresend, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__PreSend2L3_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
        __os->write(MT);
        __os->write(cPresend);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(cID);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::CheckPreSend(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::std::string& cRetMessage, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__CheckPreSend_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(cRetMessage);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::MatInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::PT::MatterCls& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__MatInfSearch_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(cMAT);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        mat.__read(__is);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::MatInfQuery(const ::std::string& cMAT, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__MatInfQuery_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(cMAT);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::StockInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& ColNo, ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__StockInfSearch_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(ColNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::PT::__readMatterClsSeq(__is, mat);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::StockInfSumbit(const ::std::string& type, const ::PT::dtPTCommon& stcPTCommon, const ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__StockInfSumbit_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(type);
        stcPTCommon.__write(__os);
        if(mat.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::PT::__writeMatterClsSeq(__os, &mat[0], &mat[0] + mat.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::StockDiffSearch(::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__StockDiffSearch_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::PT::__readMatterClsSeq(__is, mat);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::OutSearch(const ::std::string& type, ::PT::LstOutPlan& matlist, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__OutSearch_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(type);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::PT::__readLstOutPlan(__is, matlist);
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::OutInventoryInfo(const ::std::string& bayno, ::std::string& id, ::std::string& area, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__OutInventoryInfo_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bayno);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(id);
        __is->read(area);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::RecheckLIST(const ::std::string& bayno, ::std::string& id, ::PT::LstInventoryStocks& LIST, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__RecheckLIST_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(bayno);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(id);
        ::PT::__readLstInventoryStocks(__is, LIST);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::MatInOut(const ::std::string& type, const ::std::string& tagValue, ::std::string& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__MatInOut_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(type);
        __os->write(tagValue);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::PT::PTInterface::MatInOutAckSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& matno, const ::std::string& type, ::std::string& nResult, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __PT__PTInterface__MatInOutAckSearch_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        stcPTCommon.__write(__os);
        __os->write(matno);
        __os->write(type);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(nResult);
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::PT::PTInterface::UsrLoginCheck(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cPassword, ::std::string& cID, ::Ice::Int& nRet, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cPassword, ::std::string& cID, ::Ice::Int& nRet, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_cPassword(cPassword),
            _m_cID(cID),
            _m_nRet(nRet),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->UsrLoginCheck(_m_stcPTCommon, _m_cPassword, _m_cID, _m_nRet, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_cPassword;
        ::std::string& _m_cID;
        ::Ice::Int& _m_nRet;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__UsrLoginCheck_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, cPassword, cID, nRet, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::TruckPos(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& truck, ::PT::TruckCls& Turck, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& truck, ::PT::TruckCls& Turck, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_truck(truck),
            _m_Turck(Turck),
            _m_cID(cID),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->TruckPos(_m_stcPTCommon, _m_truck, _m_Turck, _m_cID, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::PT::TruckCls& _m_truck;
        ::PT::TruckCls& _m_Turck;
        ::std::string& _m_cID;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__TruckPos_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, truck, Turck, cID, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::TruckInInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_CarInf(CarInf),
            _m_ProcessNo(ProcessNo),
            _m_cID(cID),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->TruckInInf(_m_stcPTCommon, _m_CarInf, _m_ProcessNo, _m_cID, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::PT::TruckCls& _m_CarInf;
        ::Ice::Int _m_ProcessNo;
        ::std::string& _m_cID;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__TruckInInf_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, CarInf, ProcessNo, cID, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::SearchMatInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::PT::MatterClsSeq& matlist, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int ProcessNo, ::PT::MatterClsSeq& matlist, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_CarInf(CarInf),
            _m_ProcessNo(ProcessNo),
            _m_matlist(matlist),
            _m_cID(cID),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SearchMatInf(_m_stcPTCommon, _m_CarInf, _m_ProcessNo, _m_matlist, _m_cID, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::PT::TruckCls& _m_CarInf;
        ::Ice::Int _m_ProcessNo;
        ::PT::MatterClsSeq& _m_matlist;
        ::std::string& _m_cID;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__SearchMatInf_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, CarInf, ProcessNo, matlist, cID, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::DeleteWrongMat(const ::PT::TruckCls& CarInf, const ::std::string& MATNO, ::Ice::Int ProcessNo, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::TruckCls& CarInf, const ::std::string& MATNO, ::Ice::Int ProcessNo, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_CarInf(CarInf),
            _m_MATNO(MATNO),
            _m_ProcessNo(ProcessNo),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->DeleteWrongMat(_m_CarInf, _m_MATNO, _m_ProcessNo, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::TruckCls& _m_CarInf;
        const ::std::string& _m_MATNO;
        ::Ice::Int _m_ProcessNo;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__DeleteWrongMat_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, CarInf, MATNO, ProcessNo, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::SubmitTruckInf(const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int WorkType, const ::PT::MatterClsSeq& matlist, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::PT::TruckCls& CarInf, ::Ice::Int WorkType, const ::PT::MatterClsSeq& matlist, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_CarInf(CarInf),
            _m_WorkType(WorkType),
            _m_matlist(matlist),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SubmitTruckInf(_m_stcPTCommon, _m_CarInf, _m_WorkType, _m_matlist, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::PT::TruckCls& _m_CarInf;
        ::Ice::Int _m_WorkType;
        const ::PT::MatterClsSeq& _m_matlist;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__SubmitTruckInf_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, CarInf, WorkType, matlist, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::TruckInOutAck(const ::PT::dtPTCommon& stcPTCommon, ::Ice::Int ProcessNo, ::Ice::Int& nResult, ::PT::MatterClsSeq& matlist, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, ::Ice::Int ProcessNo, ::Ice::Int& nResult, ::PT::MatterClsSeq& matlist, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_ProcessNo(ProcessNo),
            _m_nResult(nResult),
            _m_matlist(matlist)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->TruckInOutAck(_m_stcPTCommon, _m_ProcessNo, _m_nResult, _m_matlist, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        ::Ice::Int _m_ProcessNo;
        ::Ice::Int& _m_nResult;
        ::PT::MatterClsSeq& _m_matlist;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__TruckInOutAck_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, ProcessNo, nResult, matlist, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::PreSend2L3(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::std::string& MT, const ::std::string& cPresend, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, const ::std::string& MT, const ::std::string& cPresend, ::std::string& cID, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_cMAT(cMAT),
            _m_MT(MT),
            _m_cPresend(cPresend),
            _m_cID(cID),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->PreSend2L3(_m_stcPTCommon, _m_cMAT, _m_MT, _m_cPresend, _m_cID, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_cMAT;
        const ::std::string& _m_MT;
        const ::std::string& _m_cPresend;
        ::std::string& _m_cID;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__PreSend2L3_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, cMAT, MT, cPresend, cID, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::CheckPreSend(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::std::string& cRetMessage, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::std::string& cRetMessage, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_cMAT(cMAT),
            _m_cRetMessage(cRetMessage),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->CheckPreSend(_m_stcPTCommon, _m_cMAT, _m_cRetMessage, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_cMAT;
        ::std::string& _m_cRetMessage;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__CheckPreSend_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, cMAT, cRetMessage, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::MatInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::PT::MatterCls& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& cMAT, ::PT::MatterCls& mat, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_cMAT(cMAT),
            _m_mat(mat),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->MatInfSearch(_m_stcPTCommon, _m_cMAT, _m_mat, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_cMAT;
        ::PT::MatterCls& _m_mat;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__MatInfSearch_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, cMAT, mat, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::MatInfQuery(const ::std::string& cMAT, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& cMAT, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_cMAT(cMAT),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->MatInfQuery(_m_cMAT, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_cMAT;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__MatInfQuery_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, cMAT, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::StockInfSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& ColNo, ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& ColNo, ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_ColNo(ColNo),
            _m_mat(mat),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->StockInfSearch(_m_stcPTCommon, _m_ColNo, _m_mat, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_ColNo;
        ::PT::MatterClsSeq& _m_mat;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__StockInfSearch_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, ColNo, mat, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::StockInfSumbit(const ::std::string& type, const ::PT::dtPTCommon& stcPTCommon, const ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& type, const ::PT::dtPTCommon& stcPTCommon, const ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_type(type),
            _m_stcPTCommon(stcPTCommon),
            _m_mat(mat),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->StockInfSumbit(_m_type, _m_stcPTCommon, _m_mat, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_type;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::PT::MatterClsSeq& _m_mat;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__StockInfSumbit_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, type, stcPTCommon, mat, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::StockDiffSearch(::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::PT::MatterClsSeq& mat, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_mat(mat),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->StockDiffSearch(_m_mat, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::PT::MatterClsSeq& _m_mat;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__StockDiffSearch_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, mat, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::OutSearch(const ::std::string& type, ::PT::LstOutPlan& matlist, ::Ice::Int& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& type, ::PT::LstOutPlan& matlist, ::Ice::Int& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_type(type),
            _m_matlist(matlist),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->OutSearch(_m_type, _m_matlist, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_type;
        ::PT::LstOutPlan& _m_matlist;
        ::Ice::Int& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__OutSearch_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, type, matlist, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::OutInventoryInfo(const ::std::string& bayno, ::std::string& id, ::std::string& area, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& bayno, ::std::string& id, ::std::string& area, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_bayno(bayno),
            _m_id(id),
            _m_area(area)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->OutInventoryInfo(_m_bayno, _m_id, _m_area, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_bayno;
        ::std::string& _m_id;
        ::std::string& _m_area;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__OutInventoryInfo_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, bayno, id, area, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::RecheckLIST(const ::std::string& bayno, ::std::string& id, ::PT::LstInventoryStocks& LIST, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& bayno, ::std::string& id, ::PT::LstInventoryStocks& LIST, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_bayno(bayno),
            _m_id(id),
            _m_LIST(LIST)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->RecheckLIST(_m_bayno, _m_id, _m_LIST, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_bayno;
        ::std::string& _m_id;
        ::PT::LstInventoryStocks& _m_LIST;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__RecheckLIST_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, bayno, id, LIST, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::MatInOut(const ::std::string& type, const ::std::string& tagValue, ::std::string& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& type, const ::std::string& tagValue, ::std::string& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_type(type),
            _m_tagValue(tagValue),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->MatInOut(_m_type, _m_tagValue, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_type;
        const ::std::string& _m_tagValue;
        ::std::string& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__MatInOut_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, type, tagValue, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::PT::PTInterface::MatInOutAckSearch(const ::PT::dtPTCommon& stcPTCommon, const ::std::string& matno, const ::std::string& type, ::std::string& nResult, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::PT::dtPTCommon& stcPTCommon, const ::std::string& matno, const ::std::string& type, ::std::string& nResult, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_stcPTCommon(stcPTCommon),
            _m_matno(matno),
            _m_type(type),
            _m_nResult(nResult)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::PT::PTInterface* servant = dynamic_cast< ::PT::PTInterface*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->MatInOutAckSearch(_m_stcPTCommon, _m_matno, _m_type, _m_nResult, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::PT::dtPTCommon& _m_stcPTCommon;
        const ::std::string& _m_matno;
        const ::std::string& _m_type;
        ::std::string& _m_nResult;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __PT__PTInterface__MatInOutAckSearch_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, stcPTCommon, matno, type, nResult, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
PT::PTInterface::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __PT__PTInterface_ids[2] =
{
    "::Ice::Object",
    "::PT::PTInterface"
};

bool
PT::PTInterface::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__PT__PTInterface_ids, __PT__PTInterface_ids + 2, _s);
}

::std::vector< ::std::string>
PT::PTInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__PT__PTInterface_ids[0], &__PT__PTInterface_ids[2]);
}

const ::std::string&
PT::PTInterface::ice_id(const ::Ice::Current&) const
{
    return __PT__PTInterface_ids[1];
}

const ::std::string&
PT::PTInterface::ice_staticId()
{
    return __PT__PTInterface_ids[1];
}

::Ice::DispatchStatus
PT::PTInterface::___UsrLoginCheck(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string cPassword;
    stcPTCommon.__read(__is);
    __is->read(cPassword);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string cID;
    ::Ice::Int nRet;
    ::Ice::Int nResult;
    ::Ice::Int __ret = UsrLoginCheck(stcPTCommon, cPassword, cID, nRet, nResult, __current);
    __os->write(cID);
    __os->write(nRet);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___TruckPos(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::PT::TruckCls truck;
    stcPTCommon.__read(__is);
    truck.__read(__is);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::TruckCls Turck;
    ::std::string cID;
    ::Ice::Int nResult;
    ::Ice::Int __ret = TruckPos(stcPTCommon, truck, Turck, cID, nResult, __current);
    Turck.__write(__os);
    __os->write(cID);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___TruckInInf(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::PT::TruckCls CarInf;
    ::Ice::Int ProcessNo;
    stcPTCommon.__read(__is);
    CarInf.__read(__is);
    __is->read(ProcessNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string cID;
    ::Ice::Int nResult;
    ::Ice::Int __ret = TruckInInf(stcPTCommon, CarInf, ProcessNo, cID, nResult, __current);
    __os->write(cID);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___SearchMatInf(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::PT::TruckCls CarInf;
    ::Ice::Int ProcessNo;
    stcPTCommon.__read(__is);
    CarInf.__read(__is);
    __is->read(ProcessNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::MatterClsSeq matlist;
    ::std::string cID;
    ::Ice::Int nResult;
    ::Ice::Int __ret = SearchMatInf(stcPTCommon, CarInf, ProcessNo, matlist, cID, nResult, __current);
    if(matlist.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeMatterClsSeq(__os, &matlist[0], &matlist[0] + matlist.size());
    }
    __os->write(cID);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___DeleteWrongMat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::TruckCls CarInf;
    ::std::string MATNO;
    ::Ice::Int ProcessNo;
    CarInf.__read(__is);
    __is->read(MATNO);
    __is->read(ProcessNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int nResult;
    ::Ice::Int __ret = DeleteWrongMat(CarInf, MATNO, ProcessNo, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___SubmitTruckInf(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::PT::TruckCls CarInf;
    ::Ice::Int WorkType;
    ::PT::MatterClsSeq matlist;
    stcPTCommon.__read(__is);
    CarInf.__read(__is);
    __is->read(WorkType);
    ::PT::__readMatterClsSeq(__is, matlist);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int nResult;
    ::Ice::Int __ret = SubmitTruckInf(stcPTCommon, CarInf, WorkType, matlist, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___TruckInOutAck(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::Ice::Int ProcessNo;
    stcPTCommon.__read(__is);
    __is->read(ProcessNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int nResult;
    ::PT::MatterClsSeq matlist;
    ::Ice::Int __ret = TruckInOutAck(stcPTCommon, ProcessNo, nResult, matlist, __current);
    __os->write(nResult);
    if(matlist.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeMatterClsSeq(__os, &matlist[0], &matlist[0] + matlist.size());
    }
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___PreSend2L3(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string cMAT;
    ::std::string MT;
    ::std::string cPresend;
    stcPTCommon.__read(__is);
    __is->read(cMAT);
    __is->read(MT);
    __is->read(cPresend);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string cID;
    ::Ice::Int nResult;
    ::Ice::Int __ret = PreSend2L3(stcPTCommon, cMAT, MT, cPresend, cID, nResult, __current);
    __os->write(cID);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___CheckPreSend(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string cMAT;
    stcPTCommon.__read(__is);
    __is->read(cMAT);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string cRetMessage;
    ::Ice::Int nResult;
    ::Ice::Int __ret = CheckPreSend(stcPTCommon, cMAT, cRetMessage, nResult, __current);
    __os->write(cRetMessage);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___MatInfSearch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string cMAT;
    stcPTCommon.__read(__is);
    __is->read(cMAT);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::MatterCls mat;
    ::Ice::Int nResult;
    ::Ice::Int __ret = MatInfSearch(stcPTCommon, cMAT, mat, nResult, __current);
    mat.__write(__os);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___MatInfQuery(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string cMAT;
    __is->read(cMAT);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int nResult;
    ::Ice::Int __ret = MatInfQuery(cMAT, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___StockInfSearch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string ColNo;
    stcPTCommon.__read(__is);
    __is->read(ColNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::MatterClsSeq mat;
    ::Ice::Int nResult;
    ::Ice::Int __ret = StockInfSearch(stcPTCommon, ColNo, mat, nResult, __current);
    if(mat.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeMatterClsSeq(__os, &mat[0], &mat[0] + mat.size());
    }
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___StockInfSumbit(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string type;
    ::PT::dtPTCommon stcPTCommon;
    ::PT::MatterClsSeq mat;
    __is->read(type);
    stcPTCommon.__read(__is);
    ::PT::__readMatterClsSeq(__is, mat);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int nResult;
    ::Ice::Int __ret = StockInfSumbit(type, stcPTCommon, mat, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___StockDiffSearch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::MatterClsSeq mat;
    ::Ice::Int nResult;
    ::Ice::Int __ret = StockDiffSearch(mat, nResult, __current);
    if(mat.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeMatterClsSeq(__os, &mat[0], &mat[0] + mat.size());
    }
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___OutSearch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string type;
    __is->read(type);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::PT::LstOutPlan matlist;
    ::Ice::Int nResult;
    ::Ice::Int __ret = OutSearch(type, matlist, nResult, __current);
    if(matlist.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeLstOutPlan(__os, &matlist[0], &matlist[0] + matlist.size());
    }
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___OutInventoryInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bayno;
    __is->read(bayno);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string id;
    ::std::string area;
    ::Ice::Int __ret = OutInventoryInfo(bayno, id, area, __current);
    __os->write(id);
    __os->write(area);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___RecheckLIST(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string bayno;
    __is->read(bayno);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string id;
    ::PT::LstInventoryStocks LIST;
    ::Ice::Int __ret = RecheckLIST(bayno, id, LIST, __current);
    __os->write(id);
    if(LIST.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::PT::__writeLstInventoryStocks(__os, &LIST[0], &LIST[0] + LIST.size());
    }
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___MatInOut(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string type;
    ::std::string tagValue;
    __is->read(type);
    __is->read(tagValue);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string nResult;
    ::Ice::Int __ret = MatInOut(type, tagValue, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
PT::PTInterface::___MatInOutAckSearch(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::PT::dtPTCommon stcPTCommon;
    ::std::string matno;
    ::std::string type;
    stcPTCommon.__read(__is);
    __is->read(matno);
    __is->read(type);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string nResult;
    ::Ice::Int __ret = MatInOutAckSearch(stcPTCommon, matno, type, nResult, __current);
    __os->write(nResult);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __PT__PTInterface_all[] =
{
    "CheckPreSend",
    "DeleteWrongMat",
    "MatInOut",
    "MatInOutAckSearch",
    "MatInfQuery",
    "MatInfSearch",
    "OutInventoryInfo",
    "OutSearch",
    "PreSend2L3",
    "RecheckLIST",
    "SearchMatInf",
    "StockDiffSearch",
    "StockInfSearch",
    "StockInfSumbit",
    "SubmitTruckInf",
    "TruckInInf",
    "TruckInOutAck",
    "TruckPos",
    "UsrLoginCheck",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
PT::PTInterface::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__PT__PTInterface_all, __PT__PTInterface_all + 23, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __PT__PTInterface_all)
    {
        case 0:
        {
            return ___CheckPreSend(in, current);
        }
        case 1:
        {
            return ___DeleteWrongMat(in, current);
        }
        case 2:
        {
            return ___MatInOut(in, current);
        }
        case 3:
        {
            return ___MatInOutAckSearch(in, current);
        }
        case 4:
        {
            return ___MatInfQuery(in, current);
        }
        case 5:
        {
            return ___MatInfSearch(in, current);
        }
        case 6:
        {
            return ___OutInventoryInfo(in, current);
        }
        case 7:
        {
            return ___OutSearch(in, current);
        }
        case 8:
        {
            return ___PreSend2L3(in, current);
        }
        case 9:
        {
            return ___RecheckLIST(in, current);
        }
        case 10:
        {
            return ___SearchMatInf(in, current);
        }
        case 11:
        {
            return ___StockDiffSearch(in, current);
        }
        case 12:
        {
            return ___StockInfSearch(in, current);
        }
        case 13:
        {
            return ___StockInfSumbit(in, current);
        }
        case 14:
        {
            return ___SubmitTruckInf(in, current);
        }
        case 15:
        {
            return ___TruckInInf(in, current);
        }
        case 16:
        {
            return ___TruckInOutAck(in, current);
        }
        case 17:
        {
            return ___TruckPos(in, current);
        }
        case 18:
        {
            return ___UsrLoginCheck(in, current);
        }
        case 19:
        {
            return ___ice_id(in, current);
        }
        case 20:
        {
            return ___ice_ids(in, current);
        }
        case 21:
        {
            return ___ice_isA(in, current);
        }
        case 22:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
PT::PTInterface::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
PT::PTInterface::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
PT::PTInterface::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type PT::PTInterface was not generated with stream support";
    throw ex;
}

void
PT::PTInterface::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type PT::PTInterface was not generated with stream support";
    throw ex;
}
#endif

void 
PT::__patch__PTInterfacePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::PT::PTInterfacePtr* p = static_cast< ::PT::PTInterfacePtr*>(__addr);
    assert(p);
    *p = ::PT::PTInterfacePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::PT::PTInterface::ice_staticId(), v->ice_id());
    }
}
