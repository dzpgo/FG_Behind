// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `StockAlgr.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_StockAlgr_h__
#define ___________include_clts_slice_StockAlgr_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <Ice/BuiltinSequences.h>
#include <Stock.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class StockRecommend;

}

}

namespace CLTS
{

class StockRecommend;
bool operator==(const StockRecommend&, const StockRecommend&);
bool operator<(const StockRecommend&, const StockRecommend&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::StockRecommend*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::StockRecommend*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::StockRecommend> StockRecommendPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::StockRecommend> StockRecommendPrx;

void __read(::IceInternal::BasicStream*, StockRecommendPrx&);
void __patch__StockRecommendPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

enum RecommType
{
    RecommByMM,
    RecommByL3
};

void __write(::IceInternal::BasicStream*, RecommType);
void __read(::IceInternal::BasicStream*, RecommType&);

struct RecommRequDesc
{
    ::Ice::Int requestId;
    ::CLTS::StockDesc coilStock;
    ::std::string nextUnitNo;
    ::CLTS::RecommType type;

    bool operator==(const RecommRequDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(coilStock != __rhs.coilStock)
        {
            return false;
        }
        if(nextUnitNo != __rhs.nextUnitNo)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RecommRequDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(coilStock < __rhs.coilStock)
        {
            return true;
        }
        else if(__rhs.coilStock < coilStock)
        {
            return false;
        }
        if(nextUnitNo < __rhs.nextUnitNo)
        {
            return true;
        }
        else if(__rhs.nextUnitNo < nextUnitNo)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RecommRequDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RecommRequDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RecommRequDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RecommRequDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct RecommRepoDesc
{
    ::Ice::Int requestId;
    ::std::string matNo;
    ::Ice::Int xCenter;
    ::Ice::Int yCenter;
    ::Ice::Int zCenter;
    ::Ice::Int layer;
    ::CLTS::RecommType type;
    ::Ice::StringSeq vecSaddleNo;

    bool operator==(const RecommRepoDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(requestId != __rhs.requestId)
        {
            return false;
        }
        if(matNo != __rhs.matNo)
        {
            return false;
        }
        if(xCenter != __rhs.xCenter)
        {
            return false;
        }
        if(yCenter != __rhs.yCenter)
        {
            return false;
        }
        if(zCenter != __rhs.zCenter)
        {
            return false;
        }
        if(layer != __rhs.layer)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(vecSaddleNo != __rhs.vecSaddleNo)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RecommRepoDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(requestId < __rhs.requestId)
        {
            return true;
        }
        else if(__rhs.requestId < requestId)
        {
            return false;
        }
        if(matNo < __rhs.matNo)
        {
            return true;
        }
        else if(__rhs.matNo < matNo)
        {
            return false;
        }
        if(xCenter < __rhs.xCenter)
        {
            return true;
        }
        else if(__rhs.xCenter < xCenter)
        {
            return false;
        }
        if(yCenter < __rhs.yCenter)
        {
            return true;
        }
        else if(__rhs.yCenter < yCenter)
        {
            return false;
        }
        if(zCenter < __rhs.zCenter)
        {
            return true;
        }
        else if(__rhs.zCenter < zCenter)
        {
            return false;
        }
        if(layer < __rhs.layer)
        {
            return true;
        }
        else if(__rhs.layer < layer)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(vecSaddleNo < __rhs.vecSaddleNo)
        {
            return true;
        }
        else if(__rhs.vecSaddleNo < vecSaddleNo)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RecommRepoDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RecommRepoDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RecommRepoDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RecommRepoDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace CLTS
{

class Callback_StockRecommend_reponse_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StockRecommend_reponse_Base> Callback_StockRecommend_reponsePtr;

class Callback_StockRecommend_request_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_StockRecommend_request_Base> Callback_StockRecommend_requestPtr;

}

namespace IceProxy
{

namespace CLTS
{

class StockRecommend : virtual public ::IceProxy::Ice::Object
{
public:

    void reponse(const ::CLTS::RecommRepoDesc& desc)
    {
        reponse(desc, 0);
    }
    void reponse(const ::CLTS::RecommRepoDesc& desc, const ::Ice::Context& __ctx)
    {
        reponse(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc)
    {
        return begin_reponse(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_reponse(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reponse(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reponse(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc, const ::CLTS::Callback_StockRecommend_reponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reponse(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_StockRecommend_reponsePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reponse(desc, &__ctx, __del, __cookie);
    }

    void end_reponse(const ::Ice::AsyncResultPtr&);
    
private:

    void reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId)
    {
        return request(coilNo, nextUnitNo, requestId, 0);
    }
    ::Ice::Int request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::Ice::Context& __ctx)
    {
        return request(coilNo, nextUnitNo, requestId, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId)
    {
        return begin_request(coilNo, nextUnitNo, requestId, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::Ice::Context& __ctx)
    {
        return begin_request(coilNo, nextUnitNo, requestId, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_request(coilNo, nextUnitNo, requestId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_request(coilNo, nextUnitNo, requestId, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::CLTS::Callback_StockRecommend_requestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_request(coilNo, nextUnitNo, requestId, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_request(const ::std::string& coilNo, const ::std::string& nextUnitNo, ::Ice::Int requestId, const ::Ice::Context& __ctx, const ::CLTS::Callback_StockRecommend_requestPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_request(coilNo, nextUnitNo, requestId, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_request(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<StockRecommend> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<StockRecommend*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<StockRecommend*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class StockRecommend : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class StockRecommend : virtual public ::IceDelegate::CLTS::StockRecommend,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Context*);

    virtual ::Ice::Int request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class StockRecommend : virtual public ::IceDelegate::CLTS::StockRecommend,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Context*);

    virtual ::Ice::Int request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
};

}

}

namespace CLTS
{

class StockRecommend : virtual public ::Ice::Object
{
public:

    typedef StockRecommendPrx ProxyType;
    typedef StockRecommendPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void reponse(const ::CLTS::RecommRepoDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reponse(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int request(const ::std::string&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___request(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const StockRecommend& l, const StockRecommend& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const StockRecommend& l, const StockRecommend& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_StockRecommend_reponse : public Callback_StockRecommend_reponse_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_StockRecommend_reponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockRecommendPrx __proxy = ::CLTS::StockRecommendPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_reponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_reponse<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_reponse<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_reponse<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_StockRecommend_reponse : public Callback_StockRecommend_reponse_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_StockRecommend_reponse(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockRecommendPrx __proxy = ::CLTS::StockRecommendPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reponse(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_reponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_reponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_reponse<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StockRecommend_reponsePtr
newCallback_StockRecommend_reponse(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_reponse<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_StockRecommend_request : public Callback_StockRecommend_request_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_StockRecommend_request(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockRecommendPrx __proxy = ::CLTS::StockRecommendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_request(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_StockRecommend_requestPtr
newCallback_StockRecommend_request(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_request<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_StockRecommend_requestPtr
newCallback_StockRecommend_request(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_StockRecommend_request<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_StockRecommend_request : public Callback_StockRecommend_request_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_StockRecommend_request(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockRecommendPrx __proxy = ::CLTS::StockRecommendPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_request(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_StockRecommend_requestPtr
newCallback_StockRecommend_request(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_request<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_StockRecommend_requestPtr
newCallback_StockRecommend_request(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_StockRecommend_request<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
