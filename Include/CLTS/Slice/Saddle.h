// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Saddle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_Saddle_h__
#define ___________include_clts_slice_Saddle_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <Stock.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class Saddle;

}

}

namespace CLTS
{

class Saddle;
bool operator==(const Saddle&, const Saddle&);
bool operator<(const Saddle&, const Saddle&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::Saddle*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::Saddle*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::Saddle> SaddlePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::Saddle> SaddlePrx;

void __read(::IceInternal::BasicStream*, SaddlePrx&);
void __patch__SaddlePtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

enum SaddleType
{
    Fixed4Coil,
    Wave4Coil,
    Fixed4Slab,
    Free4Slab,
    LineEntry,
    LineExit,
    Reserved
};

void __write(::IceInternal::BasicStream*, SaddleType);
void __read(::IceInternal::BasicStream*, SaddleType&);

struct SaddSpecDesc
{
    ::CLTS::SaddleType type;
    ::Ice::Int direction;
    ::Ice::Int width;
    ::Ice::Int length;
    ::Ice::Int interval;
    ::Ice::Int saddleNum;

    bool operator==(const SaddSpecDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(direction != __rhs.direction)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(length != __rhs.length)
        {
            return false;
        }
        if(interval != __rhs.interval)
        {
            return false;
        }
        if(saddleNum != __rhs.saddleNum)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SaddSpecDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(direction < __rhs.direction)
        {
            return true;
        }
        else if(__rhs.direction < direction)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(length < __rhs.length)
        {
            return true;
        }
        else if(__rhs.length < length)
        {
            return false;
        }
        if(interval < __rhs.interval)
        {
            return true;
        }
        else if(__rhs.interval < interval)
        {
            return false;
        }
        if(saddleNum < __rhs.saddleNum)
        {
            return true;
        }
        else if(__rhs.saddleNum < saddleNum)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SaddSpecDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SaddSpecDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SaddSpecDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SaddSpecDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct SaddleDesc
{
    ::std::string no;
    ::std::string name;
    ::std::string colRowNo;
    ::Ice::Int seqSaddle;
    ::CLTS::SaddleType type;
    ::Ice::Int direction;
    ::Ice::Int width;
    ::Ice::Int length;
    ::Ice::Int xCenter;
    ::Ice::Int yCenter;
    ::Ice::Int zCenter;
    ::Ice::Int layerNum;
    ::Ice::Int flagCanUse;
    ::std::string prevSaddleNo;
    ::std::string forwSaddleNo;

    bool operator==(const SaddleDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(colRowNo != __rhs.colRowNo)
        {
            return false;
        }
        if(seqSaddle != __rhs.seqSaddle)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(direction != __rhs.direction)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(length != __rhs.length)
        {
            return false;
        }
        if(xCenter != __rhs.xCenter)
        {
            return false;
        }
        if(yCenter != __rhs.yCenter)
        {
            return false;
        }
        if(zCenter != __rhs.zCenter)
        {
            return false;
        }
        if(layerNum != __rhs.layerNum)
        {
            return false;
        }
        if(flagCanUse != __rhs.flagCanUse)
        {
            return false;
        }
        if(prevSaddleNo != __rhs.prevSaddleNo)
        {
            return false;
        }
        if(forwSaddleNo != __rhs.forwSaddleNo)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SaddleDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(colRowNo < __rhs.colRowNo)
        {
            return true;
        }
        else if(__rhs.colRowNo < colRowNo)
        {
            return false;
        }
        if(seqSaddle < __rhs.seqSaddle)
        {
            return true;
        }
        else if(__rhs.seqSaddle < seqSaddle)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(direction < __rhs.direction)
        {
            return true;
        }
        else if(__rhs.direction < direction)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(length < __rhs.length)
        {
            return true;
        }
        else if(__rhs.length < length)
        {
            return false;
        }
        if(xCenter < __rhs.xCenter)
        {
            return true;
        }
        else if(__rhs.xCenter < xCenter)
        {
            return false;
        }
        if(yCenter < __rhs.yCenter)
        {
            return true;
        }
        else if(__rhs.yCenter < yCenter)
        {
            return false;
        }
        if(zCenter < __rhs.zCenter)
        {
            return true;
        }
        else if(__rhs.zCenter < zCenter)
        {
            return false;
        }
        if(layerNum < __rhs.layerNum)
        {
            return true;
        }
        else if(__rhs.layerNum < layerNum)
        {
            return false;
        }
        if(flagCanUse < __rhs.flagCanUse)
        {
            return true;
        }
        else if(__rhs.flagCanUse < flagCanUse)
        {
            return false;
        }
        if(prevSaddleNo < __rhs.prevSaddleNo)
        {
            return true;
        }
        else if(__rhs.prevSaddleNo < prevSaddleNo)
        {
            return false;
        }
        if(forwSaddleNo < __rhs.forwSaddleNo)
        {
            return true;
        }
        else if(__rhs.forwSaddleNo < forwSaddleNo)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SaddleDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SaddleDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SaddleDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SaddleDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::CLTS::SaddleDesc> SaddleDescSeq;
void __writeSaddleDescSeq(::IceInternal::BasicStream*, const ::CLTS::SaddleDesc*, const ::CLTS::SaddleDesc*);
void __readSaddleDescSeq(::IceInternal::BasicStream*, SaddleDescSeq&);

}

namespace CLTS
{

class Callback_Saddle_getDesc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Saddle_getDesc_Base> Callback_Saddle_getDescPtr;

class Callback_Saddle_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Saddle_update_Base> Callback_Saddle_updatePtr;

class Callback_Saddle_createStock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Saddle_createStock_Base> Callback_Saddle_createStockPtr;

class Callback_Saddle_getBayNo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Saddle_getBayNo_Base> Callback_Saddle_getBayNoPtr;

}

namespace IceProxy
{

namespace CLTS
{

class Saddle : virtual public ::IceProxy::Ice::Object
{
public:

    ::CLTS::SaddleDesc getDesc()
    {
        return getDesc(0);
    }
    ::CLTS::SaddleDesc getDesc(const ::Ice::Context& __ctx)
    {
        return getDesc(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDesc()
    {
        return begin_getDesc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx)
    {
        return begin_getDesc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::CLTS::Callback_Saddle_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::CLTS::Callback_Saddle_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::CLTS::SaddleDesc end_getDesc(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::SaddleDesc getDesc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void update(const ::CLTS::SaddleDesc& desc)
    {
        update(desc, 0);
    }
    void update(const ::CLTS::SaddleDesc& desc, const ::Ice::Context& __ctx)
    {
        update(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc)
    {
        return begin_update(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_update(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc, const ::CLTS::Callback_Saddle_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Saddle_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, &__ctx, __del, __cookie);
    }

    void end_update(const ::Ice::AsyncResultPtr&);
    
private:

    void update(const ::CLTS::SaddleDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::CLTS::SaddleDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::StockPrx createStock()
    {
        return createStock(0);
    }
    ::CLTS::StockPrx createStock(const ::Ice::Context& __ctx)
    {
        return createStock(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_createStock()
    {
        return begin_createStock(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createStock(const ::Ice::Context& __ctx)
    {
        return begin_createStock(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createStock(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createStock(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createStock(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createStock(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createStock(const ::CLTS::Callback_Saddle_createStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createStock(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createStock(const ::Ice::Context& __ctx, const ::CLTS::Callback_Saddle_createStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createStock(&__ctx, __del, __cookie);
    }

    ::CLTS::StockPrx end_createStock(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::StockPrx createStock(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createStock(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getBayNo()
    {
        return getBayNo(0);
    }
    ::std::string getBayNo(const ::Ice::Context& __ctx)
    {
        return getBayNo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBayNo()
    {
        return begin_getBayNo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx)
    {
        return begin_getBayNo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::CLTS::Callback_Saddle_getBayNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx, const ::CLTS::Callback_Saddle_getBayNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(&__ctx, __del, __cookie);
    }

    ::std::string end_getBayNo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getBayNo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Saddle> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Saddle> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Saddle*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Saddle*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class Saddle : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::CLTS::SaddleDesc getDesc(const ::Ice::Context*) = 0;

    virtual void update(const ::CLTS::SaddleDesc&, const ::Ice::Context*) = 0;

    virtual ::CLTS::StockPrx createStock(const ::Ice::Context*) = 0;

    virtual ::std::string getBayNo(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class Saddle : virtual public ::IceDelegate::CLTS::Saddle,
               virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::CLTS::SaddleDesc getDesc(const ::Ice::Context*);

    virtual void update(const ::CLTS::SaddleDesc&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx createStock(const ::Ice::Context*);

    virtual ::std::string getBayNo(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class Saddle : virtual public ::IceDelegate::CLTS::Saddle,
               virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::CLTS::SaddleDesc getDesc(const ::Ice::Context*);

    virtual void update(const ::CLTS::SaddleDesc&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx createStock(const ::Ice::Context*);

    virtual ::std::string getBayNo(const ::Ice::Context*);
};

}

}

namespace CLTS
{

class Saddle : virtual public ::Ice::Object
{
public:

    typedef SaddlePrx ProxyType;
    typedef SaddlePtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::CLTS::SaddleDesc getDesc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDesc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void update(const ::CLTS::SaddleDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::StockPrx createStock(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createStock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getBayNo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBayNo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Saddle& l, const Saddle& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Saddle& l, const Saddle& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_Saddle_getDesc : public Callback_Saddle_getDesc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::SaddleDesc&);

    CallbackNC_Saddle_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddleDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Saddle_getDescPtr
newCallback_Saddle_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddleDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Saddle_getDescPtr
newCallback_Saddle_getDesc(T* instance, void (T::*cb)(const ::CLTS::SaddleDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Saddle_getDesc : public Callback_Saddle_getDesc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::SaddleDesc&, const CT&);

    Callback_Saddle_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddleDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Saddle_getDescPtr
newCallback_Saddle_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddleDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_getDescPtr
newCallback_Saddle_getDesc(T* instance, void (T::*cb)(const ::CLTS::SaddleDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Saddle_update : public Callback_Saddle_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Saddle_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Saddle_updatePtr
newCallback_Saddle_update(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Saddle_updatePtr
newCallback_Saddle_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_update<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Saddle_updatePtr
newCallback_Saddle_update(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Saddle_updatePtr
newCallback_Saddle_update(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_update<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Saddle_update : public Callback_Saddle_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Saddle_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Saddle_updatePtr
newCallback_Saddle_update(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_updatePtr
newCallback_Saddle_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_updatePtr
newCallback_Saddle_update(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_updatePtr
newCallback_Saddle_update(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Saddle_createStock : public Callback_Saddle_createStock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockPrx&);

    CallbackNC_Saddle_createStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_createStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Saddle_createStockPtr
newCallback_Saddle_createStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_createStock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Saddle_createStockPtr
newCallback_Saddle_createStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_createStock<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Saddle_createStock : public Callback_Saddle_createStock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockPrx&, const CT&);

    Callback_Saddle_createStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_createStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Saddle_createStockPtr
newCallback_Saddle_createStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_createStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_createStockPtr
newCallback_Saddle_createStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_createStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Saddle_getBayNo : public Callback_Saddle_getBayNo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Saddle_getBayNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBayNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Saddle_getBayNoPtr
newCallback_Saddle_getBayNo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_getBayNo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Saddle_getBayNoPtr
newCallback_Saddle_getBayNo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Saddle_getBayNo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Saddle_getBayNo : public Callback_Saddle_getBayNo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Saddle_getBayNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::SaddlePrx __proxy = ::CLTS::SaddlePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBayNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Saddle_getBayNoPtr
newCallback_Saddle_getBayNo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_getBayNo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Saddle_getBayNoPtr
newCallback_Saddle_getBayNo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Saddle_getBayNo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
