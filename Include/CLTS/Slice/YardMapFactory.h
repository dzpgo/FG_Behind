// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `YardMapFactory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_YardMapFactory_h__
#define ___________include_clts_slice_YardMapFactory_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Bay.h>
#include <Yard.h>
#include <StockAlgr.h>
#include <Crane.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class YardMapFactory;

}

}

namespace CLTS
{

class YardMapFactory;
bool operator==(const YardMapFactory&, const YardMapFactory&);
bool operator<(const YardMapFactory&, const YardMapFactory&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::YardMapFactory*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::YardMapFactory*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::YardMapFactory> YardMapFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::YardMapFactory> YardMapFactoryPrx;

void __read(::IceInternal::BasicStream*, YardMapFactoryPrx&);
void __patch__YardMapFactoryPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

class Callback_YardMapFactory_addBay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_addBay_Base> Callback_YardMapFactory_addBayPtr;

class Callback_YardMapFactory_delBay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_delBay_Base> Callback_YardMapFactory_delBayPtr;

class Callback_YardMapFactory_addYard_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_addYard_Base> Callback_YardMapFactory_addYardPtr;

class Callback_YardMapFactory_delYard_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_delYard_Base> Callback_YardMapFactory_delYardPtr;

class Callback_YardMapFactory_getDetails_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getDetails_Base> Callback_YardMapFactory_getDetailsPtr;

class Callback_YardMapFactory_getBay_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getBay_Base> Callback_YardMapFactory_getBayPtr;

class Callback_YardMapFactory_getYard_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getYard_Base> Callback_YardMapFactory_getYardPtr;

class Callback_YardMapFactory_getArea_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getArea_Base> Callback_YardMapFactory_getAreaPtr;

class Callback_YardMapFactory_getRowCol_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getRowCol_Base> Callback_YardMapFactory_getRowColPtr;

class Callback_YardMapFactory_getSaddle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getSaddle_Base> Callback_YardMapFactory_getSaddlePtr;

class Callback_YardMapFactory_getStock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getStock_Base> Callback_YardMapFactory_getStockPtr;

class Callback_YardMapFactory_getCoil_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getCoil_Base> Callback_YardMapFactory_getCoilPtr;

class Callback_YardMapFactory_getRecommend_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getRecommend_Base> Callback_YardMapFactory_getRecommendPtr;

class Callback_YardMapFactory_getCrane_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getCrane_Base> Callback_YardMapFactory_getCranePtr;

class Callback_YardMapFactory_getCraneStock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_YardMapFactory_getCraneStock_Base> Callback_YardMapFactory_getCraneStockPtr;

}

namespace IceProxy
{

namespace CLTS
{

class YardMapFactory : virtual public ::IceProxy::Ice::Object
{
public:

    void addBay(const ::CLTS::BayDesc& desc)
    {
        addBay(desc, 0);
    }
    void addBay(const ::CLTS::BayDesc& desc, const ::Ice::Context& __ctx)
    {
        addBay(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc)
    {
        return begin_addBay(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_addBay(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBay(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBay(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc, const ::CLTS::Callback_YardMapFactory_addBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBay(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_addBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addBay(desc, &__ctx, __del, __cookie);
    }

    void end_addBay(const ::Ice::AsyncResultPtr&);
    
private:

    void addBay(const ::CLTS::BayDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addBay(const ::CLTS::BayDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void delBay(const ::std::string& bayNo)
    {
        delBay(bayNo, 0);
    }
    void delBay(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        delBay(bayNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo)
    {
        return begin_delBay(bayNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        return begin_delBay(bayNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delBay(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delBay(bayNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo, const ::CLTS::Callback_YardMapFactory_delBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delBay(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delBay(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_delBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delBay(bayNo, &__ctx, __del, __cookie);
    }

    void end_delBay(const ::Ice::AsyncResultPtr&);
    
private:

    void delBay(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_delBay(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addYard(const ::CLTS::YardDesc& desc)
    {
        addYard(desc, 0);
    }
    void addYard(const ::CLTS::YardDesc& desc, const ::Ice::Context& __ctx)
    {
        addYard(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc)
    {
        return begin_addYard(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_addYard(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addYard(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addYard(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc, const ::CLTS::Callback_YardMapFactory_addYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addYard(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_addYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addYard(desc, &__ctx, __del, __cookie);
    }

    void end_addYard(const ::Ice::AsyncResultPtr&);
    
private:

    void addYard(const ::CLTS::YardDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addYard(const ::CLTS::YardDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void delYard(const ::std::string& yardNo)
    {
        delYard(yardNo, 0);
    }
    void delYard(const ::std::string& yardNo, const ::Ice::Context& __ctx)
    {
        delYard(yardNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo)
    {
        return begin_delYard(yardNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo, const ::Ice::Context& __ctx)
    {
        return begin_delYard(yardNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delYard(yardNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delYard(yardNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo, const ::CLTS::Callback_YardMapFactory_delYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delYard(yardNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delYard(const ::std::string& yardNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_delYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delYard(yardNo, &__ctx, __del, __cookie);
    }

    void end_delYard(const ::Ice::AsyncResultPtr&);
    
private:

    void delYard(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_delYard(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getDetails(::CLTS::BayDescSeq& bays, ::CLTS::YardDescSeq& yards)
    {
        getDetails(bays, yards, 0);
    }
    void getDetails(::CLTS::BayDescSeq& bays, ::CLTS::YardDescSeq& yards, const ::Ice::Context& __ctx)
    {
        getDetails(bays, yards, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDetails()
    {
        return begin_getDetails(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx)
    {
        return begin_getDetails(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::CLTS::Callback_YardMapFactory_getDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getDetailsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDetails(&__ctx, __del, __cookie);
    }

    void end_getDetails(::CLTS::BayDescSeq& bays, ::CLTS::YardDescSeq& yards, const ::Ice::AsyncResultPtr&);
    
private:

    void getDetails(::CLTS::BayDescSeq&, ::CLTS::YardDescSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDetails(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::BayPrx getBay(const ::std::string& bayNo)
    {
        return getBay(bayNo, 0);
    }
    ::CLTS::BayPrx getBay(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        return getBay(bayNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo)
    {
        return begin_getBay(bayNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        return begin_getBay(bayNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBay(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBay(bayNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo, const ::CLTS::Callback_YardMapFactory_getBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBay(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBay(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getBayPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBay(bayNo, &__ctx, __del, __cookie);
    }

    ::CLTS::BayPrx end_getBay(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::BayPrx getBay(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBay(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::YardPrx getYard(const ::std::string& yardNo)
    {
        return getYard(yardNo, 0);
    }
    ::CLTS::YardPrx getYard(const ::std::string& yardNo, const ::Ice::Context& __ctx)
    {
        return getYard(yardNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo)
    {
        return begin_getYard(yardNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo, const ::Ice::Context& __ctx)
    {
        return begin_getYard(yardNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYard(yardNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYard(yardNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo, const ::CLTS::Callback_YardMapFactory_getYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYard(yardNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getYard(const ::std::string& yardNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getYardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getYard(yardNo, &__ctx, __del, __cookie);
    }

    ::CLTS::YardPrx end_getYard(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::YardPrx getYard(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getYard(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::AreaPrx getArea(const ::std::string& areaNo)
    {
        return getArea(areaNo, 0);
    }
    ::CLTS::AreaPrx getArea(const ::std::string& areaNo, const ::Ice::Context& __ctx)
    {
        return getArea(areaNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo)
    {
        return begin_getArea(areaNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo, const ::Ice::Context& __ctx)
    {
        return begin_getArea(areaNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArea(areaNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArea(areaNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo, const ::CLTS::Callback_YardMapFactory_getAreaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArea(areaNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getArea(const ::std::string& areaNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getAreaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getArea(areaNo, &__ctx, __del, __cookie);
    }

    ::CLTS::AreaPrx end_getArea(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::AreaPrx getArea(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getArea(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::RowColPrx getRowCol(const ::std::string& RowColNo)
    {
        return getRowCol(RowColNo, 0);
    }
    ::CLTS::RowColPrx getRowCol(const ::std::string& RowColNo, const ::Ice::Context& __ctx)
    {
        return getRowCol(RowColNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo)
    {
        return begin_getRowCol(RowColNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo, const ::Ice::Context& __ctx)
    {
        return begin_getRowCol(RowColNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCol(RowColNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCol(RowColNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo, const ::CLTS::Callback_YardMapFactory_getRowColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCol(RowColNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string& RowColNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getRowColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCol(RowColNo, &__ctx, __del, __cookie);
    }

    ::CLTS::RowColPrx end_getRowCol(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::RowColPrx getRowCol(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRowCol(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::SaddlePrx getSaddle(const ::std::string& saddleNo)
    {
        return getSaddle(saddleNo, 0);
    }
    ::CLTS::SaddlePrx getSaddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx)
    {
        return getSaddle(saddleNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo)
    {
        return begin_getSaddle(saddleNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx)
    {
        return begin_getSaddle(saddleNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddle(saddleNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddle(saddleNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo, const ::CLTS::Callback_YardMapFactory_getSaddlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddle(saddleNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getSaddlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddle(saddleNo, &__ctx, __del, __cookie);
    }

    ::CLTS::SaddlePrx end_getSaddle(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::SaddlePrx getSaddle(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSaddle(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::StockPrx getStock(const ::std::string& stockNo)
    {
        return getStock(stockNo, 0);
    }
    ::CLTS::StockPrx getStock(const ::std::string& stockNo, const ::Ice::Context& __ctx)
    {
        return getStock(stockNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo)
    {
        return begin_getStock(stockNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo, const ::Ice::Context& __ctx)
    {
        return begin_getStock(stockNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStock(stockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStock(stockNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo, const ::CLTS::Callback_YardMapFactory_getStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStock(stockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStock(const ::std::string& stockNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStock(stockNo, &__ctx, __del, __cookie);
    }

    ::CLTS::StockPrx end_getStock(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::StockPrx getStock(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStock(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::CoilPrx getCoil(const ::std::string& coilNo)
    {
        return getCoil(coilNo, 0);
    }
    ::CLTS::CoilPrx getCoil(const ::std::string& coilNo, const ::Ice::Context& __ctx)
    {
        return getCoil(coilNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo)
    {
        return begin_getCoil(coilNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo, const ::Ice::Context& __ctx)
    {
        return begin_getCoil(coilNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoil(coilNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoil(coilNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo, const ::CLTS::Callback_YardMapFactory_getCoilPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoil(coilNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string& coilNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getCoilPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoil(coilNo, &__ctx, __del, __cookie);
    }

    ::CLTS::CoilPrx end_getCoil(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::CoilPrx getCoil(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCoil(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::StockRecommendPrx getRecommend(const ::std::string& bayNo)
    {
        return getRecommend(bayNo, 0);
    }
    ::CLTS::StockRecommendPrx getRecommend(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        return getRecommend(bayNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo)
    {
        return begin_getRecommend(bayNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo, const ::Ice::Context& __ctx)
    {
        return begin_getRecommend(bayNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecommend(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecommend(bayNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo, const ::CLTS::Callback_YardMapFactory_getRecommendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecommend(bayNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string& bayNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getRecommendPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRecommend(bayNo, &__ctx, __del, __cookie);
    }

    ::CLTS::StockRecommendPrx end_getRecommend(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::StockRecommendPrx getRecommend(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRecommend(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::CranePrx getCrane(const ::std::string& craneNo)
    {
        return getCrane(craneNo, 0);
    }
    ::CLTS::CranePrx getCrane(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return getCrane(craneNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo)
    {
        return begin_getCrane(craneNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return begin_getCrane(craneNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCrane(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCrane(craneNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo, const ::CLTS::Callback_YardMapFactory_getCranePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCrane(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getCranePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCrane(craneNo, &__ctx, __del, __cookie);
    }

    ::CLTS::CranePrx end_getCrane(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::CranePrx getCrane(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCrane(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::StockPrx getCraneStock(const ::std::string& craneNo)
    {
        return getCraneStock(craneNo, 0);
    }
    ::CLTS::StockPrx getCraneStock(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return getCraneStock(craneNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo)
    {
        return begin_getCraneStock(craneNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return begin_getCraneStock(craneNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCraneStock(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCraneStock(craneNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo, const ::CLTS::Callback_YardMapFactory_getCraneStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCraneStock(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_YardMapFactory_getCraneStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCraneStock(craneNo, &__ctx, __del, __cookie);
    }

    ::CLTS::StockPrx end_getCraneStock(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::StockPrx getCraneStock(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCraneStock(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<YardMapFactory> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<YardMapFactory*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<YardMapFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class YardMapFactory : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void addBay(const ::CLTS::BayDesc&, const ::Ice::Context*) = 0;

    virtual void delBay(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void addYard(const ::CLTS::YardDesc&, const ::Ice::Context*) = 0;

    virtual void delYard(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void getDetails(::CLTS::BayDescSeq&, ::CLTS::YardDescSeq&, const ::Ice::Context*) = 0;

    virtual ::CLTS::BayPrx getBay(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::YardPrx getYard(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::AreaPrx getArea(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::RowColPrx getRowCol(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::SaddlePrx getSaddle(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::StockPrx getStock(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::CoilPrx getCoil(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::StockRecommendPrx getRecommend(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::CranePrx getCrane(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::StockPrx getCraneStock(const ::std::string&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class YardMapFactory : virtual public ::IceDelegate::CLTS::YardMapFactory,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void addBay(const ::CLTS::BayDesc&, const ::Ice::Context*);

    virtual void delBay(const ::std::string&, const ::Ice::Context*);

    virtual void addYard(const ::CLTS::YardDesc&, const ::Ice::Context*);

    virtual void delYard(const ::std::string&, const ::Ice::Context*);

    virtual void getDetails(::CLTS::BayDescSeq&, ::CLTS::YardDescSeq&, const ::Ice::Context*);

    virtual ::CLTS::BayPrx getBay(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::YardPrx getYard(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::AreaPrx getArea(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::RowColPrx getRowCol(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::SaddlePrx getSaddle(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx getStock(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::CoilPrx getCoil(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockRecommendPrx getRecommend(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::CranePrx getCrane(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx getCraneStock(const ::std::string&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class YardMapFactory : virtual public ::IceDelegate::CLTS::YardMapFactory,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void addBay(const ::CLTS::BayDesc&, const ::Ice::Context*);

    virtual void delBay(const ::std::string&, const ::Ice::Context*);

    virtual void addYard(const ::CLTS::YardDesc&, const ::Ice::Context*);

    virtual void delYard(const ::std::string&, const ::Ice::Context*);

    virtual void getDetails(::CLTS::BayDescSeq&, ::CLTS::YardDescSeq&, const ::Ice::Context*);

    virtual ::CLTS::BayPrx getBay(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::YardPrx getYard(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::AreaPrx getArea(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::RowColPrx getRowCol(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::SaddlePrx getSaddle(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx getStock(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::CoilPrx getCoil(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockRecommendPrx getRecommend(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::CranePrx getCrane(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::StockPrx getCraneStock(const ::std::string&, const ::Ice::Context*);
};

}

}

namespace CLTS
{

class YardMapFactory : virtual public ::Ice::Object
{
public:

    typedef YardMapFactoryPrx ProxyType;
    typedef YardMapFactoryPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void addBay(const ::CLTS::BayDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addBay(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void delBay(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___delBay(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addYard(const ::CLTS::YardDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addYard(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void delYard(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___delYard(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDetails(::CLTS::BayDescSeq&, ::CLTS::YardDescSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDetails(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::BayPrx getBay(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBay(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::YardPrx getYard(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getYard(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::AreaPrx getArea(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getArea(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::RowColPrx getRowCol(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRowCol(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::SaddlePrx getSaddle(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSaddle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::StockPrx getStock(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::CoilPrx getCoil(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCoil(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::StockRecommendPrx getRecommend(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRecommend(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::CranePrx getCrane(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCrane(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::StockPrx getCraneStock(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCraneStock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const YardMapFactory& l, const YardMapFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const YardMapFactory& l, const YardMapFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_YardMapFactory_addBay : public Callback_YardMapFactory_addBay_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YardMapFactory_addBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addBay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addBay<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addBay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addBay<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_addBay : public Callback_YardMapFactory_addBay_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YardMapFactory_addBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addBay<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addBayPtr
newCallback_YardMapFactory_addBay(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addBay<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_delBay : public Callback_YardMapFactory_delBay_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YardMapFactory_delBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delBay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delBay<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delBay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delBay<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_delBay : public Callback_YardMapFactory_delBay_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YardMapFactory_delBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delBay<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delBayPtr
newCallback_YardMapFactory_delBay(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delBay<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_addYard : public Callback_YardMapFactory_addYard_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YardMapFactory_addYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addYard<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addYard<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addYard<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_addYard<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_addYard : public Callback_YardMapFactory_addYard_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YardMapFactory_addYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addYard<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_addYardPtr
newCallback_YardMapFactory_addYard(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_addYard<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_delYard : public Callback_YardMapFactory_delYard_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_YardMapFactory_delYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delYard<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delYard<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delYard<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_delYard<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_delYard : public Callback_YardMapFactory_delYard_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_YardMapFactory_delYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delYard<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_delYardPtr
newCallback_YardMapFactory_delYard(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_delYard<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getDetails : public Callback_YardMapFactory_getDetails_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&);

    CallbackNC_YardMapFactory_getDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::BayDescSeq bays;
        ::CLTS::YardDescSeq yards;
        try
        {
            __proxy->end_getDetails(bays, yards, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(bays, yards);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(bays, yards);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getDetailsPtr
newCallback_YardMapFactory_getDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getDetails<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getDetailsPtr
newCallback_YardMapFactory_getDetails(T* instance, void (T::*cb)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getDetails<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getDetails : public Callback_YardMapFactory_getDetails_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&, const CT&);

    Callback_YardMapFactory_getDetails(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::BayDescSeq bays;
        ::CLTS::YardDescSeq yards;
        try
        {
            __proxy->end_getDetails(bays, yards, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(bays, yards, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(bays, yards, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getDetailsPtr
newCallback_YardMapFactory_getDetails(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getDetailsPtr
newCallback_YardMapFactory_getDetails(T* instance, void (T::*cb)(const ::CLTS::BayDescSeq&, const ::CLTS::YardDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getDetails<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getBay : public Callback_YardMapFactory_getBay_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::BayPrx&);

    CallbackNC_YardMapFactory_getBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::BayPrx __ret;
        try
        {
            __ret = __proxy->end_getBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getBayPtr
newCallback_YardMapFactory_getBay(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::BayPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getBay<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getBayPtr
newCallback_YardMapFactory_getBay(T* instance, void (T::*cb)(const ::CLTS::BayPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getBay<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getBay : public Callback_YardMapFactory_getBay_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::BayPrx&, const CT&);

    Callback_YardMapFactory_getBay(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::BayPrx __ret;
        try
        {
            __ret = __proxy->end_getBay(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getBayPtr
newCallback_YardMapFactory_getBay(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::BayPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getBayPtr
newCallback_YardMapFactory_getBay(T* instance, void (T::*cb)(const ::CLTS::BayPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getBay<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getYard : public Callback_YardMapFactory_getYard_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::YardPrx&);

    CallbackNC_YardMapFactory_getYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::YardPrx __ret;
        try
        {
            __ret = __proxy->end_getYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getYardPtr
newCallback_YardMapFactory_getYard(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::YardPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getYard<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getYardPtr
newCallback_YardMapFactory_getYard(T* instance, void (T::*cb)(const ::CLTS::YardPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getYard<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getYard : public Callback_YardMapFactory_getYard_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::YardPrx&, const CT&);

    Callback_YardMapFactory_getYard(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::YardPrx __ret;
        try
        {
            __ret = __proxy->end_getYard(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getYardPtr
newCallback_YardMapFactory_getYard(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::YardPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getYardPtr
newCallback_YardMapFactory_getYard(T* instance, void (T::*cb)(const ::CLTS::YardPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getYard<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getArea : public Callback_YardMapFactory_getArea_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::AreaPrx&);

    CallbackNC_YardMapFactory_getArea(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::AreaPrx __ret;
        try
        {
            __ret = __proxy->end_getArea(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getAreaPtr
newCallback_YardMapFactory_getArea(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::AreaPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getArea<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getAreaPtr
newCallback_YardMapFactory_getArea(T* instance, void (T::*cb)(const ::CLTS::AreaPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getArea<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getArea : public Callback_YardMapFactory_getArea_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::AreaPrx&, const CT&);

    Callback_YardMapFactory_getArea(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::AreaPrx __ret;
        try
        {
            __ret = __proxy->end_getArea(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getAreaPtr
newCallback_YardMapFactory_getArea(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::AreaPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getArea<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getAreaPtr
newCallback_YardMapFactory_getArea(T* instance, void (T::*cb)(const ::CLTS::AreaPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getArea<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getRowCol : public Callback_YardMapFactory_getRowCol_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::RowColPrx&);

    CallbackNC_YardMapFactory_getRowCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::RowColPrx __ret;
        try
        {
            __ret = __proxy->end_getRowCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getRowColPtr
newCallback_YardMapFactory_getRowCol(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::RowColPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getRowCol<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getRowColPtr
newCallback_YardMapFactory_getRowCol(T* instance, void (T::*cb)(const ::CLTS::RowColPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getRowCol<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getRowCol : public Callback_YardMapFactory_getRowCol_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::RowColPrx&, const CT&);

    Callback_YardMapFactory_getRowCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::RowColPrx __ret;
        try
        {
            __ret = __proxy->end_getRowCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getRowColPtr
newCallback_YardMapFactory_getRowCol(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::RowColPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getRowCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getRowColPtr
newCallback_YardMapFactory_getRowCol(T* instance, void (T::*cb)(const ::CLTS::RowColPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getRowCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getSaddle : public Callback_YardMapFactory_getSaddle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::SaddlePrx&);

    CallbackNC_YardMapFactory_getSaddle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddlePrx __ret;
        try
        {
            __ret = __proxy->end_getSaddle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getSaddlePtr
newCallback_YardMapFactory_getSaddle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getSaddle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getSaddlePtr
newCallback_YardMapFactory_getSaddle(T* instance, void (T::*cb)(const ::CLTS::SaddlePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getSaddle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getSaddle : public Callback_YardMapFactory_getSaddle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::SaddlePrx&, const CT&);

    Callback_YardMapFactory_getSaddle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddlePrx __ret;
        try
        {
            __ret = __proxy->end_getSaddle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getSaddlePtr
newCallback_YardMapFactory_getSaddle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getSaddle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getSaddlePtr
newCallback_YardMapFactory_getSaddle(T* instance, void (T::*cb)(const ::CLTS::SaddlePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getSaddle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getStock : public Callback_YardMapFactory_getStock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockPrx&);

    CallbackNC_YardMapFactory_getStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_getStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getStockPtr
newCallback_YardMapFactory_getStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getStock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getStockPtr
newCallback_YardMapFactory_getStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getStock<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getStock : public Callback_YardMapFactory_getStock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockPrx&, const CT&);

    Callback_YardMapFactory_getStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_getStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getStockPtr
newCallback_YardMapFactory_getStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getStockPtr
newCallback_YardMapFactory_getStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getCoil : public Callback_YardMapFactory_getCoil_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::CoilPrx&);

    CallbackNC_YardMapFactory_getCoil(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilPrx __ret;
        try
        {
            __ret = __proxy->end_getCoil(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getCoilPtr
newCallback_YardMapFactory_getCoil(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCoil<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getCoilPtr
newCallback_YardMapFactory_getCoil(T* instance, void (T::*cb)(const ::CLTS::CoilPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCoil<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getCoil : public Callback_YardMapFactory_getCoil_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::CoilPrx&, const CT&);

    Callback_YardMapFactory_getCoil(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilPrx __ret;
        try
        {
            __ret = __proxy->end_getCoil(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getCoilPtr
newCallback_YardMapFactory_getCoil(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCoil<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getCoilPtr
newCallback_YardMapFactory_getCoil(T* instance, void (T::*cb)(const ::CLTS::CoilPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCoil<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getRecommend : public Callback_YardMapFactory_getRecommend_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockRecommendPrx&);

    CallbackNC_YardMapFactory_getRecommend(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockRecommendPrx __ret;
        try
        {
            __ret = __proxy->end_getRecommend(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getRecommendPtr
newCallback_YardMapFactory_getRecommend(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockRecommendPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getRecommend<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getRecommendPtr
newCallback_YardMapFactory_getRecommend(T* instance, void (T::*cb)(const ::CLTS::StockRecommendPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getRecommend<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getRecommend : public Callback_YardMapFactory_getRecommend_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockRecommendPrx&, const CT&);

    Callback_YardMapFactory_getRecommend(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockRecommendPrx __ret;
        try
        {
            __ret = __proxy->end_getRecommend(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getRecommendPtr
newCallback_YardMapFactory_getRecommend(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockRecommendPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getRecommend<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getRecommendPtr
newCallback_YardMapFactory_getRecommend(T* instance, void (T::*cb)(const ::CLTS::StockRecommendPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getRecommend<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getCrane : public Callback_YardMapFactory_getCrane_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::CranePrx&);

    CallbackNC_YardMapFactory_getCrane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CranePrx __ret;
        try
        {
            __ret = __proxy->end_getCrane(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getCranePtr
newCallback_YardMapFactory_getCrane(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CranePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCrane<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getCranePtr
newCallback_YardMapFactory_getCrane(T* instance, void (T::*cb)(const ::CLTS::CranePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCrane<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getCrane : public Callback_YardMapFactory_getCrane_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::CranePrx&, const CT&);

    Callback_YardMapFactory_getCrane(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CranePrx __ret;
        try
        {
            __ret = __proxy->end_getCrane(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getCranePtr
newCallback_YardMapFactory_getCrane(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CranePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCrane<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getCranePtr
newCallback_YardMapFactory_getCrane(T* instance, void (T::*cb)(const ::CLTS::CranePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCrane<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_YardMapFactory_getCraneStock : public Callback_YardMapFactory_getCraneStock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockPrx&);

    CallbackNC_YardMapFactory_getCraneStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_getCraneStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_YardMapFactory_getCraneStockPtr
newCallback_YardMapFactory_getCraneStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCraneStock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_YardMapFactory_getCraneStockPtr
newCallback_YardMapFactory_getCraneStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_YardMapFactory_getCraneStock<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_YardMapFactory_getCraneStock : public Callback_YardMapFactory_getCraneStock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockPrx&, const CT&);

    Callback_YardMapFactory_getCraneStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::YardMapFactoryPrx __proxy = ::CLTS::YardMapFactoryPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockPrx __ret;
        try
        {
            __ret = __proxy->end_getCraneStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_YardMapFactory_getCraneStockPtr
newCallback_YardMapFactory_getCraneStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCraneStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_YardMapFactory_getCraneStockPtr
newCallback_YardMapFactory_getCraneStock(T* instance, void (T::*cb)(const ::CLTS::StockPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_YardMapFactory_getCraneStock<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
