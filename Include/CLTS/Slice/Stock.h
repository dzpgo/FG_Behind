// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Stock.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_Stock_h__
#define ___________include_clts_slice_Stock_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <Ice/BuiltinSequences.h>
#include <Coil.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class Stock;

}

}

namespace CLTS
{

class Stock;
bool operator==(const Stock&, const Stock&);
bool operator<(const Stock&, const Stock&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::Stock*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::Stock*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::Stock> StockPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::Stock> StockPrx;

void __read(::IceInternal::BasicStream*, StockPrx&);
void __patch__StockPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

enum StockStatus
{
    StockEmpty,
    StockReserved,
    StockOccupied
};

void __write(::IceInternal::BasicStream*, StockStatus);
void __read(::IceInternal::BasicStream*, StockStatus&);

enum LockStatus
{
    StockConfirmed,
    StockWaitChecking
};

void __write(::IceInternal::BasicStream*, LockStatus);
void __read(::IceInternal::BasicStream*, LockStatus&);

enum StockType
{
    StockSaddle,
    StockProdLine,
    StockCrane,
    StockTruck
};

void __write(::IceInternal::BasicStream*, StockType);
void __read(::IceInternal::BasicStream*, StockType&);

const ::Ice::Int CraneLiftedUp = 1;

const ::Ice::Int CraneLiftedDown = 2;

struct StockDesc
{
    ::std::string no;
    ::std::string name;
    ::Ice::Int layer;
    ::Ice::Int xCenter;
    ::Ice::Int yCenter;
    ::Ice::Int zCenter;
    ::CLTS::StockStatus status;
    ::CLTS::LockStatus lock;
    ::std::string matNo;
    ::CLTS::CoilDesc coil;
    ::std::string centerSaddle;
    ::Ice::StringSeq vecSaddleNo;
    ::CLTS::StockType type;
    ::std::string areaNo;
    ::std::string rowcolNo;
    ::Ice::Int bookingFlag;
    ::std::string bookingMatNo;
    ::Ice::Int forbidenFlag;

    bool operator==(const StockDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(layer != __rhs.layer)
        {
            return false;
        }
        if(xCenter != __rhs.xCenter)
        {
            return false;
        }
        if(yCenter != __rhs.yCenter)
        {
            return false;
        }
        if(zCenter != __rhs.zCenter)
        {
            return false;
        }
        if(status != __rhs.status)
        {
            return false;
        }
        if(lock != __rhs.lock)
        {
            return false;
        }
        if(matNo != __rhs.matNo)
        {
            return false;
        }
        if(coil != __rhs.coil)
        {
            return false;
        }
        if(centerSaddle != __rhs.centerSaddle)
        {
            return false;
        }
        if(vecSaddleNo != __rhs.vecSaddleNo)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(areaNo != __rhs.areaNo)
        {
            return false;
        }
        if(rowcolNo != __rhs.rowcolNo)
        {
            return false;
        }
        if(bookingFlag != __rhs.bookingFlag)
        {
            return false;
        }
        if(bookingMatNo != __rhs.bookingMatNo)
        {
            return false;
        }
        if(forbidenFlag != __rhs.forbidenFlag)
        {
            return false;
        }
        return true;
    }

    bool operator<(const StockDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(layer < __rhs.layer)
        {
            return true;
        }
        else if(__rhs.layer < layer)
        {
            return false;
        }
        if(xCenter < __rhs.xCenter)
        {
            return true;
        }
        else if(__rhs.xCenter < xCenter)
        {
            return false;
        }
        if(yCenter < __rhs.yCenter)
        {
            return true;
        }
        else if(__rhs.yCenter < yCenter)
        {
            return false;
        }
        if(zCenter < __rhs.zCenter)
        {
            return true;
        }
        else if(__rhs.zCenter < zCenter)
        {
            return false;
        }
        if(status < __rhs.status)
        {
            return true;
        }
        else if(__rhs.status < status)
        {
            return false;
        }
        if(lock < __rhs.lock)
        {
            return true;
        }
        else if(__rhs.lock < lock)
        {
            return false;
        }
        if(matNo < __rhs.matNo)
        {
            return true;
        }
        else if(__rhs.matNo < matNo)
        {
            return false;
        }
        if(coil < __rhs.coil)
        {
            return true;
        }
        else if(__rhs.coil < coil)
        {
            return false;
        }
        if(centerSaddle < __rhs.centerSaddle)
        {
            return true;
        }
        else if(__rhs.centerSaddle < centerSaddle)
        {
            return false;
        }
        if(vecSaddleNo < __rhs.vecSaddleNo)
        {
            return true;
        }
        else if(__rhs.vecSaddleNo < vecSaddleNo)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(areaNo < __rhs.areaNo)
        {
            return true;
        }
        else if(__rhs.areaNo < areaNo)
        {
            return false;
        }
        if(rowcolNo < __rhs.rowcolNo)
        {
            return true;
        }
        else if(__rhs.rowcolNo < rowcolNo)
        {
            return false;
        }
        if(bookingFlag < __rhs.bookingFlag)
        {
            return true;
        }
        else if(__rhs.bookingFlag < bookingFlag)
        {
            return false;
        }
        if(bookingMatNo < __rhs.bookingMatNo)
        {
            return true;
        }
        else if(__rhs.bookingMatNo < bookingMatNo)
        {
            return false;
        }
        if(forbidenFlag < __rhs.forbidenFlag)
        {
            return true;
        }
        else if(__rhs.forbidenFlag < forbidenFlag)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const StockDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const StockDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const StockDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const StockDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::CLTS::StockDesc> StockDescSeq;
void __writeStockDescSeq(::IceInternal::BasicStream*, const ::CLTS::StockDesc*, const ::CLTS::StockDesc*);
void __readStockDescSeq(::IceInternal::BasicStream*, StockDescSeq&);

}

namespace CLTS
{

class Callback_Stock_getDesc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_getDesc_Base> Callback_Stock_getDescPtr;

class Callback_Stock_setOccupied_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setOccupied_Base> Callback_Stock_setOccupiedPtr;

class Callback_Stock_setEmpty_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setEmpty_Base> Callback_Stock_setEmptyPtr;

class Callback_Stock_setBooking_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setBooking_Base> Callback_Stock_setBookingPtr;

class Callback_Stock_resetBooking_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_resetBooking_Base> Callback_Stock_resetBookingPtr;

class Callback_Stock_setForbiden_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setForbiden_Base> Callback_Stock_setForbidenPtr;

class Callback_Stock_resetForbiden_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_resetForbiden_Base> Callback_Stock_resetForbidenPtr;

class Callback_Stock_setChecking_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setChecking_Base> Callback_Stock_setCheckingPtr;

class Callback_Stock_setConfirmed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_setConfirmed_Base> Callback_Stock_setConfirmedPtr;

class Callback_Stock_liftUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_liftUp_Base> Callback_Stock_liftUpPtr;

class Callback_Stock_liftDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_liftDown_Base> Callback_Stock_liftDownPtr;

class Callback_Stock_getBayNo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Stock_getBayNo_Base> Callback_Stock_getBayNoPtr;

}

namespace IceProxy
{

namespace CLTS
{

class Stock : virtual public ::IceProxy::Ice::Object
{
public:

    ::CLTS::StockDesc getDesc()
    {
        return getDesc(0);
    }
    ::CLTS::StockDesc getDesc(const ::Ice::Context& __ctx)
    {
        return getDesc(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDesc()
    {
        return begin_getDesc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx)
    {
        return begin_getDesc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::CLTS::Callback_Stock_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::CLTS::StockDesc end_getDesc(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::StockDesc getDesc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setOccupied(const ::std::string& matNo)
    {
        setOccupied(matNo, 0);
    }
    void setOccupied(const ::std::string& matNo, const ::Ice::Context& __ctx)
    {
        setOccupied(matNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo)
    {
        return begin_setOccupied(matNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo, const ::Ice::Context& __ctx)
    {
        return begin_setOccupied(matNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOccupied(matNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOccupied(matNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo, const ::CLTS::Callback_Stock_setOccupiedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOccupied(matNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string& matNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setOccupiedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setOccupied(matNo, &__ctx, __del, __cookie);
    }

    void end_setOccupied(const ::Ice::AsyncResultPtr&);
    
private:

    void setOccupied(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setOccupied(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEmpty()
    {
        setEmpty(0);
    }
    void setEmpty(const ::Ice::Context& __ctx)
    {
        setEmpty(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_setEmpty()
    {
        return begin_setEmpty(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEmpty(const ::Ice::Context& __ctx)
    {
        return begin_setEmpty(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEmpty(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEmpty(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEmpty(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEmpty(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEmpty(const ::CLTS::Callback_Stock_setEmptyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEmpty(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEmpty(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setEmptyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEmpty(&__ctx, __del, __cookie);
    }

    void end_setEmpty(const ::Ice::AsyncResultPtr&);
    
private:

    void setEmpty(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEmpty(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setBooking(const ::std::string& matNo)
    {
        setBooking(matNo, 0);
    }
    void setBooking(const ::std::string& matNo, const ::Ice::Context& __ctx)
    {
        setBooking(matNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo)
    {
        return begin_setBooking(matNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo, const ::Ice::Context& __ctx)
    {
        return begin_setBooking(matNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBooking(matNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBooking(matNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo, const ::CLTS::Callback_Stock_setBookingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBooking(matNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string& matNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setBookingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setBooking(matNo, &__ctx, __del, __cookie);
    }

    void end_setBooking(const ::Ice::AsyncResultPtr&);
    
private:

    void setBooking(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setBooking(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resetBooking()
    {
        resetBooking(0);
    }
    void resetBooking(const ::Ice::Context& __ctx)
    {
        resetBooking(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_resetBooking()
    {
        return begin_resetBooking(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetBooking(const ::Ice::Context& __ctx)
    {
        return begin_resetBooking(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetBooking(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetBooking(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetBooking(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetBooking(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetBooking(const ::CLTS::Callback_Stock_resetBookingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetBooking(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetBooking(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_resetBookingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetBooking(&__ctx, __del, __cookie);
    }

    void end_resetBooking(const ::Ice::AsyncResultPtr&);
    
private:

    void resetBooking(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetBooking(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setForbiden()
    {
        setForbiden(0);
    }
    void setForbiden(const ::Ice::Context& __ctx)
    {
        setForbiden(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_setForbiden()
    {
        return begin_setForbiden(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setForbiden(const ::Ice::Context& __ctx)
    {
        return begin_setForbiden(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setForbiden(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setForbiden(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setForbiden(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setForbiden(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setForbiden(const ::CLTS::Callback_Stock_setForbidenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setForbiden(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setForbiden(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setForbidenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setForbiden(&__ctx, __del, __cookie);
    }

    void end_setForbiden(const ::Ice::AsyncResultPtr&);
    
private:

    void setForbiden(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setForbiden(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void resetForbiden()
    {
        resetForbiden(0);
    }
    void resetForbiden(const ::Ice::Context& __ctx)
    {
        resetForbiden(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden()
    {
        return begin_resetForbiden(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden(const ::Ice::Context& __ctx)
    {
        return begin_resetForbiden(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetForbiden(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetForbiden(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden(const ::CLTS::Callback_Stock_resetForbidenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetForbiden(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_resetForbiden(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_resetForbidenPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_resetForbiden(&__ctx, __del, __cookie);
    }

    void end_resetForbiden(const ::Ice::AsyncResultPtr&);
    
private:

    void resetForbiden(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_resetForbiden(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setChecking()
    {
        setChecking(0);
    }
    void setChecking(const ::Ice::Context& __ctx)
    {
        setChecking(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_setChecking()
    {
        return begin_setChecking(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChecking(const ::Ice::Context& __ctx)
    {
        return begin_setChecking(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setChecking(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChecking(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChecking(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChecking(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChecking(const ::CLTS::Callback_Stock_setCheckingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChecking(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setChecking(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setCheckingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setChecking(&__ctx, __del, __cookie);
    }

    void end_setChecking(const ::Ice::AsyncResultPtr&);
    
private:

    void setChecking(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setChecking(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setConfirmed(const ::std::string& matNo, const ::std::string& userName)
    {
        setConfirmed(matNo, userName, 0);
    }
    void setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::Ice::Context& __ctx)
    {
        setConfirmed(matNo, userName, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName)
    {
        return begin_setConfirmed(matNo, userName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::Ice::Context& __ctx)
    {
        return begin_setConfirmed(matNo, userName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConfirmed(matNo, userName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConfirmed(matNo, userName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::CLTS::Callback_Stock_setConfirmedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConfirmed(matNo, userName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string& matNo, const ::std::string& userName, const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_setConfirmedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setConfirmed(matNo, userName, &__ctx, __del, __cookie);
    }

    void end_setConfirmed(const ::Ice::AsyncResultPtr&);
    
private:

    void setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void liftUp(const ::CLTS::OrderOperDesc& operDesc)
    {
        liftUp(operDesc, 0);
    }
    void liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        liftUp(operDesc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc)
    {
        return begin_liftUp(operDesc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return begin_liftUp(operDesc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::CLTS::Callback_Stock_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, &__ctx, __del, __cookie);
    }

    void end_liftUp(const ::Ice::AsyncResultPtr&);
    
private:

    void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void liftDown(const ::CLTS::OrderOperDesc& operDesc)
    {
        liftDown(operDesc, 0);
    }
    void liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        liftDown(operDesc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc)
    {
        return begin_liftDown(operDesc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return begin_liftDown(operDesc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::CLTS::Callback_Stock_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, &__ctx, __del, __cookie);
    }

    void end_liftDown(const ::Ice::AsyncResultPtr&);
    
private:

    void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getBayNo()
    {
        return getBayNo(0);
    }
    ::std::string getBayNo(const ::Ice::Context& __ctx)
    {
        return getBayNo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getBayNo()
    {
        return begin_getBayNo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx)
    {
        return begin_getBayNo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::CLTS::Callback_Stock_getBayNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context& __ctx, const ::CLTS::Callback_Stock_getBayNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getBayNo(&__ctx, __del, __cookie);
    }

    ::std::string end_getBayNo(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getBayNo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getBayNo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Stock> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Stock> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Stock*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Stock*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class Stock : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::CLTS::StockDesc getDesc(const ::Ice::Context*) = 0;

    virtual void setOccupied(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void setEmpty(const ::Ice::Context*) = 0;

    virtual void setBooking(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void resetBooking(const ::Ice::Context*) = 0;

    virtual void setForbiden(const ::Ice::Context*) = 0;

    virtual void resetForbiden(const ::Ice::Context*) = 0;

    virtual void setChecking(const ::Ice::Context*) = 0;

    virtual void setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual ::std::string getBayNo(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class Stock : virtual public ::IceDelegate::CLTS::Stock,
              virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::CLTS::StockDesc getDesc(const ::Ice::Context*);

    virtual void setOccupied(const ::std::string&, const ::Ice::Context*);

    virtual void setEmpty(const ::Ice::Context*);

    virtual void setBooking(const ::std::string&, const ::Ice::Context*);

    virtual void resetBooking(const ::Ice::Context*);

    virtual void setForbiden(const ::Ice::Context*);

    virtual void resetForbiden(const ::Ice::Context*);

    virtual void setChecking(const ::Ice::Context*);

    virtual void setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual ::std::string getBayNo(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class Stock : virtual public ::IceDelegate::CLTS::Stock,
              virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::CLTS::StockDesc getDesc(const ::Ice::Context*);

    virtual void setOccupied(const ::std::string&, const ::Ice::Context*);

    virtual void setEmpty(const ::Ice::Context*);

    virtual void setBooking(const ::std::string&, const ::Ice::Context*);

    virtual void resetBooking(const ::Ice::Context*);

    virtual void setForbiden(const ::Ice::Context*);

    virtual void resetForbiden(const ::Ice::Context*);

    virtual void setChecking(const ::Ice::Context*);

    virtual void setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual ::std::string getBayNo(const ::Ice::Context*);
};

}

}

namespace CLTS
{

class Stock : virtual public ::Ice::Object
{
public:

    typedef StockPrx ProxyType;
    typedef StockPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::CLTS::StockDesc getDesc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDesc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOccupied(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setOccupied(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEmpty(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEmpty(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setBooking(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setBooking(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetBooking(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetBooking(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setForbiden(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setForbiden(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetForbiden(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___resetForbiden(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setChecking(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setChecking(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setConfirmed(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setConfirmed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getBayNo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getBayNo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Stock& l, const Stock& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Stock& l, const Stock& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_Stock_getDesc : public Callback_Stock_getDesc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockDesc&);

    CallbackNC_Stock_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_getDescPtr
newCallback_Stock_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_getDescPtr
newCallback_Stock_getDesc(T* instance, void (T::*cb)(const ::CLTS::StockDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_getDesc : public Callback_Stock_getDesc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockDesc&, const CT&);

    Callback_Stock_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_getDescPtr
newCallback_Stock_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_getDescPtr
newCallback_Stock_getDesc(T* instance, void (T::*cb)(const ::CLTS::StockDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setOccupied : public Callback_Stock_setOccupied_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setOccupied(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOccupied(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setOccupied<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setOccupied<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setOccupied<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setOccupied<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setOccupied : public Callback_Stock_setOccupied_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setOccupied(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setOccupied(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setOccupied<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setOccupied<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setOccupied<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setOccupiedPtr
newCallback_Stock_setOccupied(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setOccupied<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setEmpty : public Callback_Stock_setEmpty_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setEmpty(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEmpty(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setEmpty<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setEmpty<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setEmpty<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setEmpty<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setEmpty : public Callback_Stock_setEmpty_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setEmpty(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setEmpty(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setEmpty<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setEmpty<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setEmpty<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setEmptyPtr
newCallback_Stock_setEmpty(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setEmpty<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setBooking : public Callback_Stock_setBooking_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setBooking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBooking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setBooking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setBooking<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setBooking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setBooking<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setBooking : public Callback_Stock_setBooking_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setBooking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setBooking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setBooking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setBooking<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setBooking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setBookingPtr
newCallback_Stock_setBooking(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setBooking<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_resetBooking : public Callback_Stock_resetBooking_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_resetBooking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetBooking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetBooking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetBooking<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetBooking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetBooking<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_resetBooking : public Callback_Stock_resetBooking_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_resetBooking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetBooking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetBooking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetBooking<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetBooking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetBookingPtr
newCallback_Stock_resetBooking(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetBooking<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setForbiden : public Callback_Stock_setForbiden_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setForbiden(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setForbiden(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setForbiden<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setForbiden<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setForbiden<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setForbiden<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setForbiden : public Callback_Stock_setForbiden_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setForbiden(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setForbiden(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setForbiden<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setForbiden<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setForbiden<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setForbidenPtr
newCallback_Stock_setForbiden(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setForbiden<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_resetForbiden : public Callback_Stock_resetForbiden_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_resetForbiden(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetForbiden(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetForbiden<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetForbiden<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetForbiden<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_resetForbiden<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_resetForbiden : public Callback_Stock_resetForbiden_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_resetForbiden(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_resetForbiden(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetForbiden<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetForbiden<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetForbiden<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_resetForbidenPtr
newCallback_Stock_resetForbiden(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_resetForbiden<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setChecking : public Callback_Stock_setChecking_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setChecking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setChecking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setChecking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setChecking<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setChecking<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setChecking<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setChecking : public Callback_Stock_setChecking_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setChecking(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setChecking(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setChecking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setChecking<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setChecking<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setCheckingPtr
newCallback_Stock_setChecking(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setChecking<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_setConfirmed : public Callback_Stock_setConfirmed_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_setConfirmed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setConfirmed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setConfirmed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setConfirmed<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setConfirmed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_setConfirmed<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_setConfirmed : public Callback_Stock_setConfirmed_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_setConfirmed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setConfirmed(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setConfirmed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setConfirmed<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setConfirmed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_setConfirmedPtr
newCallback_Stock_setConfirmed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_setConfirmed<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_liftUp : public Callback_Stock_liftUp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_liftUp : public Callback_Stock_liftUp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftUpPtr
newCallback_Stock_liftUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_liftDown : public Callback_Stock_liftDown_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Stock_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_liftDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_liftDown : public Callback_Stock_liftDown_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Stock_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_liftDownPtr
newCallback_Stock_liftDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_liftDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Stock_getBayNo : public Callback_Stock_getBayNo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Stock_getBayNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBayNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Stock_getBayNoPtr
newCallback_Stock_getBayNo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_getBayNo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Stock_getBayNoPtr
newCallback_Stock_getBayNo(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Stock_getBayNo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Stock_getBayNo : public Callback_Stock_getBayNo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Stock_getBayNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::StockPrx __proxy = ::CLTS::StockPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getBayNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Stock_getBayNoPtr
newCallback_Stock_getBayNo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_getBayNo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Stock_getBayNoPtr
newCallback_Stock_getBayNo(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Stock_getBayNo<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
