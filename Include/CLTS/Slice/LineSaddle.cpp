// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `LineSaddle.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <LineSaddle.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __CLTS__LineSaddle__getLineDesc_name = "getLineDesc";

static const ::std::string __CLTS__LineSaddle__setLineDesc_name = "setLineDesc";

static const ::std::string __CLTS__LineSaddle__unlock_name = "unlock";

static const ::std::string __CLTS__LineSaddle__lock_name = "lock";

::Ice::Object* IceInternal::upCast(::CLTS::LineSaddle* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::CLTS::LineSaddle* p) { return p; }

void
CLTS::__read(::IceInternal::BasicStream* __is, ::CLTS::LineSaddlePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::CLTS::LineSaddle;
        v->__copyFrom(proxy);
    }
}

void
CLTS::LineSaddleDesc::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(no);
    __os->write(unitNo);
    __os->write(L2Name);
    __os->write(flagCheckData);
    __os->write(flagCreateOrder);
    __os->write(flagCanAutoUp);
    __os->write(flagCanAutoDown);
    __os->write(tagNameLockReq);
    __os->write(tagNameIsLocked);
    __os->write(tagNameIsEmpty);
}

void
CLTS::LineSaddleDesc::__read(::IceInternal::BasicStream* __is)
{
    __is->read(no);
    __is->read(unitNo);
    __is->read(L2Name);
    __is->read(flagCheckData);
    __is->read(flagCreateOrder);
    __is->read(flagCanAutoUp);
    __is->read(flagCanAutoDown);
    __is->read(tagNameLockReq);
    __is->read(tagNameIsLocked);
    __is->read(tagNameIsEmpty);
}

void
CLTS::__writeLineSaddleDescSeq(::IceInternal::BasicStream* __os, const ::CLTS::LineSaddleDesc* begin, const ::CLTS::LineSaddleDesc* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
CLTS::__readLineSaddleDescSeq(::IceInternal::BasicStream* __is, ::CLTS::LineSaddleDescSeq& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(22, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
CLTS::__writeLineSaddleSeq(::IceInternal::BasicStream* __os, const ::CLTS::LineSaddlePtr* begin, const ::CLTS::LineSaddlePtr* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        __os->write(::Ice::ObjectPtr(::IceInternal::upCast(begin[i].get())));
    }
}

void
CLTS::__readLineSaddleSeq(::IceInternal::BasicStream* __is, ::CLTS::LineSaddleSeq& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(4, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        __is->read(::CLTS::__patch__LineSaddlePtr, &v[i]);
    }
}

::CLTS::LineSaddleDesc
IceProxy::CLTS::LineSaddle::getLineDesc(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CLTS__LineSaddle__getLineDesc_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CLTS::LineSaddle* __del = dynamic_cast< ::IceDelegate::CLTS::LineSaddle*>(__delBase.get());
            return __del->getLineDesc(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CLTS::LineSaddle::begin_getLineDesc(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CLTS__LineSaddle__getLineDesc_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CLTS__LineSaddle__getLineDesc_name, __del, __cookie);
    try
    {
        __result->__prepare(__CLTS__LineSaddle__getLineDesc_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::CLTS::LineSaddleDesc
IceProxy::CLTS::LineSaddle::end_getLineDesc(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CLTS__LineSaddle__getLineDesc_name);
    ::CLTS::LineSaddleDesc __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::CLTS::CLTSException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __ret.__read(__is);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::CLTS::LineSaddle::setLineDesc(const ::CLTS::LineSaddleDesc& desc, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CLTS__LineSaddle__setLineDesc_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CLTS::LineSaddle* __del = dynamic_cast< ::IceDelegate::CLTS::LineSaddle*>(__delBase.get());
            __del->setLineDesc(desc, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CLTS::LineSaddle::begin_setLineDesc(const ::CLTS::LineSaddleDesc& desc, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CLTS__LineSaddle__setLineDesc_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CLTS__LineSaddle__setLineDesc_name, __del, __cookie);
    try
    {
        __result->__prepare(__CLTS__LineSaddle__setLineDesc_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        desc.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CLTS::LineSaddle::end_setLineDesc(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CLTS__LineSaddle__setLineDesc_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::CLTS::CLTSException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->skipEmptyEncaps();
}

bool
IceProxy::CLTS::LineSaddle::unlock(const ::std::string& craneNo, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CLTS__LineSaddle__unlock_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CLTS::LineSaddle* __del = dynamic_cast< ::IceDelegate::CLTS::LineSaddle*>(__delBase.get());
            return __del->unlock(craneNo, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CLTS::LineSaddle::begin_unlock(const ::std::string& craneNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CLTS__LineSaddle__unlock_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CLTS__LineSaddle__unlock_name, __del, __cookie);
    try
    {
        __result->__prepare(__CLTS__LineSaddle__unlock_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(craneNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::CLTS::LineSaddle::end_unlock(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CLTS__LineSaddle__unlock_name);
    bool __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::CLTS::CLTSException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::CLTS::LineSaddle::lock(const ::std::string& craneNo, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__CLTS__LineSaddle__lock_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::CLTS::LineSaddle* __del = dynamic_cast< ::IceDelegate::CLTS::LineSaddle*>(__delBase.get());
            __del->lock(craneNo, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::CLTS::LineSaddle::begin_lock(const ::std::string& craneNo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__CLTS__LineSaddle__lock_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __CLTS__LineSaddle__lock_name, __del, __cookie);
    try
    {
        __result->__prepare(__CLTS__LineSaddle__lock_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(craneNo);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::CLTS::LineSaddle::end_lock(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __CLTS__LineSaddle__lock_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::CLTS::CLTSException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->skipEmptyEncaps();
}

const ::std::string&
IceProxy::CLTS::LineSaddle::ice_staticId()
{
    return ::CLTS::LineSaddle::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::CLTS::LineSaddle::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::CLTS::LineSaddle);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::CLTS::LineSaddle::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::CLTS::LineSaddle);
}

::IceProxy::Ice::Object*
IceProxy::CLTS::LineSaddle::__newInstance() const
{
    return new LineSaddle;
}

::CLTS::LineSaddleDesc
IceDelegateM::CLTS::LineSaddle::getLineDesc(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CLTS__LineSaddle__getLineDesc_name, ::Ice::Normal, __context);
    bool __ok = __og.invoke();
    ::CLTS::LineSaddleDesc __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::CLTS::CLTSException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __ret.__read(__is);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::CLTS::LineSaddle::setLineDesc(const ::CLTS::LineSaddleDesc& desc, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CLTS__LineSaddle__setLineDesc_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        desc.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::CLTS::CLTSException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.is()->skipEmptyEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::CLTS::LineSaddle::unlock(const ::std::string& craneNo, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CLTS__LineSaddle__unlock_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(craneNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::CLTS::CLTSException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::CLTS::LineSaddle::lock(const ::std::string& craneNo, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __CLTS__LineSaddle__lock_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(craneNo);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::CLTS::CLTSException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.is()->skipEmptyEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::CLTS::LineSaddleDesc
IceDelegateD::CLTS::LineSaddle::getLineDesc(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::CLTS::LineSaddleDesc& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CLTS::LineSaddle* servant = dynamic_cast< ::CLTS::LineSaddle*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getLineDesc(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::CLTS::LineSaddleDesc& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CLTS__LineSaddle__getLineDesc_name, ::Ice::Normal, __context);
    ::CLTS::LineSaddleDesc __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::CLTS::CLTSException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::CLTS::LineSaddle::setLineDesc(const ::CLTS::LineSaddleDesc& desc, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::CLTS::LineSaddleDesc& desc, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_desc(desc)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CLTS::LineSaddle* servant = dynamic_cast< ::CLTS::LineSaddle*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->setLineDesc(_m_desc, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::CLTS::LineSaddleDesc& _m_desc;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CLTS__LineSaddle__setLineDesc_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(desc, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::CLTS::CLTSException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

bool
IceDelegateD::CLTS::LineSaddle::unlock(const ::std::string& craneNo, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& craneNo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_craneNo(craneNo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CLTS::LineSaddle* servant = dynamic_cast< ::CLTS::LineSaddle*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->unlock(_m_craneNo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_craneNo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CLTS__LineSaddle__unlock_name, ::Ice::Normal, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, craneNo, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::CLTS::CLTSException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::CLTS::LineSaddle::lock(const ::std::string& craneNo, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& craneNo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_craneNo(craneNo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::CLTS::LineSaddle* servant = dynamic_cast< ::CLTS::LineSaddle*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->lock(_m_craneNo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_craneNo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __CLTS__LineSaddle__lock_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(craneNo, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::CLTS::CLTSException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
CLTS::LineSaddle::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __CLTS__LineSaddle_ids[3] =
{
    "::CLTS::LineSaddle",
    "::CLTS::Saddle",
    "::Ice::Object"
};

bool
CLTS::LineSaddle::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__CLTS__LineSaddle_ids, __CLTS__LineSaddle_ids + 3, _s);
}

::std::vector< ::std::string>
CLTS::LineSaddle::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__CLTS__LineSaddle_ids[0], &__CLTS__LineSaddle_ids[3]);
}

const ::std::string&
CLTS::LineSaddle::ice_id(const ::Ice::Current&) const
{
    return __CLTS__LineSaddle_ids[0];
}

const ::std::string&
CLTS::LineSaddle::ice_staticId()
{
    return __CLTS__LineSaddle_ids[0];
}

::Ice::DispatchStatus
CLTS::LineSaddle::___getLineDesc(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        ::CLTS::LineSaddleDesc __ret = getLineDesc(__current);
        __ret.__write(__os);
    }
    catch(const ::CLTS::CLTSException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CLTS::LineSaddle::___setLineDesc(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::CLTS::LineSaddleDesc desc;
    desc.__read(__is);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        setLineDesc(desc, __current);
    }
    catch(const ::CLTS::CLTSException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CLTS::LineSaddle::___unlock(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string craneNo;
    __is->read(craneNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        bool __ret = unlock(craneNo, __current);
        __os->write(__ret);
    }
    catch(const ::CLTS::CLTSException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
CLTS::LineSaddle::___lock(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string craneNo;
    __is->read(craneNo);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        lock(craneNo, __current);
    }
    catch(const ::CLTS::CLTSException& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

static ::std::string __CLTS__LineSaddle_all[] =
{
    "createStock",
    "getBayNo",
    "getDesc",
    "getLineDesc",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "lock",
    "setLineDesc",
    "unlock",
    "update"
};

::Ice::DispatchStatus
CLTS::LineSaddle::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__CLTS__LineSaddle_all, __CLTS__LineSaddle_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __CLTS__LineSaddle_all)
    {
        case 0:
        {
            return ___createStock(in, current);
        }
        case 1:
        {
            return ___getBayNo(in, current);
        }
        case 2:
        {
            return ___getDesc(in, current);
        }
        case 3:
        {
            return ___getLineDesc(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___lock(in, current);
        }
        case 9:
        {
            return ___setLineDesc(in, current);
        }
        case 10:
        {
            return ___unlock(in, current);
        }
        case 11:
        {
            return ___update(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
CLTS::LineSaddle::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
CLTS::LineSaddle::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
CLTS::LineSaddle::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type CLTS::LineSaddle was not generated with stream support";
    throw ex;
}

void
CLTS::LineSaddle::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type CLTS::LineSaddle was not generated with stream support";
    throw ex;
}
#endif

void 
CLTS::__patch__LineSaddlePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::CLTS::LineSaddlePtr* p = static_cast< ::CLTS::LineSaddlePtr*>(__addr);
    assert(p);
    *p = ::CLTS::LineSaddlePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::CLTS::LineSaddle::ice_staticId(), v->ice_id());
    }
}
