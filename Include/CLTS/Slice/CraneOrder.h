// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `CraneOrder.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_CraneOrder_h__
#define ___________include_clts_slice_CraneOrder_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class CraneOrder;

}

}

namespace CLTS
{

class CraneOrder;
bool operator==(const CraneOrder&, const CraneOrder&);
bool operator<(const CraneOrder&, const CraneOrder&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::CraneOrder*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::CraneOrder*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::CraneOrder> CraneOrderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::CraneOrder> CraneOrderPrx;

void __read(::IceInternal::BasicStream*, CraneOrderPrx&);
void __patch__CraneOrderPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

const ::std::string CmdIdle = "0";

const ::std::string CmdSelct = "R";

const ::std::string CmdLifted = "S";

const ::std::string CmdDown = "E";

struct CraneOrderDesc
{
    ::Ice::Int orderNo;
    ::Ice::Int groupNo;
    ::std::string bayNo;
    ::std::string matNo;
    ::std::string craneInstCode;
    ::Ice::Int orderType;
    ::Ice::Int orderPriority;
    ::std::string fromStockNo;
    ::std::string toStockNo;
    ::std::string cmdStatus;
    ::Ice::Int flagDispatch;
    ::Ice::Int flagEnable;
    ::Ice::Int flagDel;
    ::std::string craneNo;
    ::Ice::Int planNo;
    ::Ice::Int recommId;
    ::std::string recTime;
    ::std::string updTime;
    ::std::string delTime;

    bool operator==(const CraneOrderDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(orderNo != __rhs.orderNo)
        {
            return false;
        }
        if(groupNo != __rhs.groupNo)
        {
            return false;
        }
        if(bayNo != __rhs.bayNo)
        {
            return false;
        }
        if(matNo != __rhs.matNo)
        {
            return false;
        }
        if(craneInstCode != __rhs.craneInstCode)
        {
            return false;
        }
        if(orderType != __rhs.orderType)
        {
            return false;
        }
        if(orderPriority != __rhs.orderPriority)
        {
            return false;
        }
        if(fromStockNo != __rhs.fromStockNo)
        {
            return false;
        }
        if(toStockNo != __rhs.toStockNo)
        {
            return false;
        }
        if(cmdStatus != __rhs.cmdStatus)
        {
            return false;
        }
        if(flagDispatch != __rhs.flagDispatch)
        {
            return false;
        }
        if(flagEnable != __rhs.flagEnable)
        {
            return false;
        }
        if(flagDel != __rhs.flagDel)
        {
            return false;
        }
        if(craneNo != __rhs.craneNo)
        {
            return false;
        }
        if(planNo != __rhs.planNo)
        {
            return false;
        }
        if(recommId != __rhs.recommId)
        {
            return false;
        }
        if(recTime != __rhs.recTime)
        {
            return false;
        }
        if(updTime != __rhs.updTime)
        {
            return false;
        }
        if(delTime != __rhs.delTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CraneOrderDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(orderNo < __rhs.orderNo)
        {
            return true;
        }
        else if(__rhs.orderNo < orderNo)
        {
            return false;
        }
        if(groupNo < __rhs.groupNo)
        {
            return true;
        }
        else if(__rhs.groupNo < groupNo)
        {
            return false;
        }
        if(bayNo < __rhs.bayNo)
        {
            return true;
        }
        else if(__rhs.bayNo < bayNo)
        {
            return false;
        }
        if(matNo < __rhs.matNo)
        {
            return true;
        }
        else if(__rhs.matNo < matNo)
        {
            return false;
        }
        if(craneInstCode < __rhs.craneInstCode)
        {
            return true;
        }
        else if(__rhs.craneInstCode < craneInstCode)
        {
            return false;
        }
        if(orderType < __rhs.orderType)
        {
            return true;
        }
        else if(__rhs.orderType < orderType)
        {
            return false;
        }
        if(orderPriority < __rhs.orderPriority)
        {
            return true;
        }
        else if(__rhs.orderPriority < orderPriority)
        {
            return false;
        }
        if(fromStockNo < __rhs.fromStockNo)
        {
            return true;
        }
        else if(__rhs.fromStockNo < fromStockNo)
        {
            return false;
        }
        if(toStockNo < __rhs.toStockNo)
        {
            return true;
        }
        else if(__rhs.toStockNo < toStockNo)
        {
            return false;
        }
        if(cmdStatus < __rhs.cmdStatus)
        {
            return true;
        }
        else if(__rhs.cmdStatus < cmdStatus)
        {
            return false;
        }
        if(flagDispatch < __rhs.flagDispatch)
        {
            return true;
        }
        else if(__rhs.flagDispatch < flagDispatch)
        {
            return false;
        }
        if(flagEnable < __rhs.flagEnable)
        {
            return true;
        }
        else if(__rhs.flagEnable < flagEnable)
        {
            return false;
        }
        if(flagDel < __rhs.flagDel)
        {
            return true;
        }
        else if(__rhs.flagDel < flagDel)
        {
            return false;
        }
        if(craneNo < __rhs.craneNo)
        {
            return true;
        }
        else if(__rhs.craneNo < craneNo)
        {
            return false;
        }
        if(planNo < __rhs.planNo)
        {
            return true;
        }
        else if(__rhs.planNo < planNo)
        {
            return false;
        }
        if(recommId < __rhs.recommId)
        {
            return true;
        }
        else if(__rhs.recommId < recommId)
        {
            return false;
        }
        if(recTime < __rhs.recTime)
        {
            return true;
        }
        else if(__rhs.recTime < recTime)
        {
            return false;
        }
        if(updTime < __rhs.updTime)
        {
            return true;
        }
        else if(__rhs.updTime < updTime)
        {
            return false;
        }
        if(delTime < __rhs.delTime)
        {
            return true;
        }
        else if(__rhs.delTime < delTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CraneOrderDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CraneOrderDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CraneOrderDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CraneOrderDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct OrderOperDesc
{
    ::Ice::Int orderNo;
    ::std::string craneNo;
    ::std::string userName;
    ::std::string equipNo;
    ::Ice::Int craneMode;
    ::Ice::Int xCranePos;
    ::Ice::Int yCranePos;
    ::Ice::Int zCranePos;
    ::std::string cmdStatus;
    ::std::string stockNo;
    ::std::string coilNo;
    ::Ice::Int flagCheckPlan;

    bool operator==(const OrderOperDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(orderNo != __rhs.orderNo)
        {
            return false;
        }
        if(craneNo != __rhs.craneNo)
        {
            return false;
        }
        if(userName != __rhs.userName)
        {
            return false;
        }
        if(equipNo != __rhs.equipNo)
        {
            return false;
        }
        if(craneMode != __rhs.craneMode)
        {
            return false;
        }
        if(xCranePos != __rhs.xCranePos)
        {
            return false;
        }
        if(yCranePos != __rhs.yCranePos)
        {
            return false;
        }
        if(zCranePos != __rhs.zCranePos)
        {
            return false;
        }
        if(cmdStatus != __rhs.cmdStatus)
        {
            return false;
        }
        if(stockNo != __rhs.stockNo)
        {
            return false;
        }
        if(coilNo != __rhs.coilNo)
        {
            return false;
        }
        if(flagCheckPlan != __rhs.flagCheckPlan)
        {
            return false;
        }
        return true;
    }

    bool operator<(const OrderOperDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(orderNo < __rhs.orderNo)
        {
            return true;
        }
        else if(__rhs.orderNo < orderNo)
        {
            return false;
        }
        if(craneNo < __rhs.craneNo)
        {
            return true;
        }
        else if(__rhs.craneNo < craneNo)
        {
            return false;
        }
        if(userName < __rhs.userName)
        {
            return true;
        }
        else if(__rhs.userName < userName)
        {
            return false;
        }
        if(equipNo < __rhs.equipNo)
        {
            return true;
        }
        else if(__rhs.equipNo < equipNo)
        {
            return false;
        }
        if(craneMode < __rhs.craneMode)
        {
            return true;
        }
        else if(__rhs.craneMode < craneMode)
        {
            return false;
        }
        if(xCranePos < __rhs.xCranePos)
        {
            return true;
        }
        else if(__rhs.xCranePos < xCranePos)
        {
            return false;
        }
        if(yCranePos < __rhs.yCranePos)
        {
            return true;
        }
        else if(__rhs.yCranePos < yCranePos)
        {
            return false;
        }
        if(zCranePos < __rhs.zCranePos)
        {
            return true;
        }
        else if(__rhs.zCranePos < zCranePos)
        {
            return false;
        }
        if(cmdStatus < __rhs.cmdStatus)
        {
            return true;
        }
        else if(__rhs.cmdStatus < cmdStatus)
        {
            return false;
        }
        if(stockNo < __rhs.stockNo)
        {
            return true;
        }
        else if(__rhs.stockNo < stockNo)
        {
            return false;
        }
        if(coilNo < __rhs.coilNo)
        {
            return true;
        }
        else if(__rhs.coilNo < coilNo)
        {
            return false;
        }
        if(flagCheckPlan < __rhs.flagCheckPlan)
        {
            return true;
        }
        else if(__rhs.flagCheckPlan < flagCheckPlan)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const OrderOperDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const OrderOperDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const OrderOperDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const OrderOperDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

}

namespace CLTS
{

class Callback_CraneOrder_getDesc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_getDesc_Base> Callback_CraneOrder_getDescPtr;

class Callback_CraneOrder_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_update_Base> Callback_CraneOrder_updatePtr;

class Callback_CraneOrder_firstJob_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_firstJob_Base> Callback_CraneOrder_firstJobPtr;

class Callback_CraneOrder_setToStock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_setToStock_Base> Callback_CraneOrder_setToStockPtr;

class Callback_CraneOrder_setCraneNo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_setCraneNo_Base> Callback_CraneOrder_setCraneNoPtr;

class Callback_CraneOrder_select_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_select_Base> Callback_CraneOrder_selectPtr;

class Callback_CraneOrder_cancel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_cancel_Base> Callback_CraneOrder_cancelPtr;

class Callback_CraneOrder_liftUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_liftUp_Base> Callback_CraneOrder_liftUpPtr;

class Callback_CraneOrder_liftDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_liftDown_Base> Callback_CraneOrder_liftDownPtr;

class Callback_CraneOrder_del_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CraneOrder_del_Base> Callback_CraneOrder_delPtr;

}

namespace IceProxy
{

namespace CLTS
{

class CraneOrder : virtual public ::IceProxy::Ice::Object
{
public:

    ::CLTS::CraneOrderDesc getDesc()
    {
        return getDesc(0);
    }
    ::CLTS::CraneOrderDesc getDesc(const ::Ice::Context& __ctx)
    {
        return getDesc(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDesc()
    {
        return begin_getDesc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx)
    {
        return begin_getDesc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::CLTS::Callback_CraneOrder_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::CLTS::CraneOrderDesc end_getDesc(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::CraneOrderDesc getDesc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool update(const ::std::string& toStockNo, const ::std::string& craneNo)
    {
        return update(toStockNo, craneNo, 0);
    }
    bool update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return update(toStockNo, craneNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo)
    {
        return begin_update(toStockNo, craneNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return begin_update(toStockNo, craneNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(toStockNo, craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(toStockNo, craneNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::CLTS::Callback_CraneOrder_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(toStockNo, craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::std::string& toStockNo, const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(toStockNo, craneNo, &__ctx, __del, __cookie);
    }

    bool end_update(const ::Ice::AsyncResultPtr&);
    
private:

    bool update(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void firstJob()
    {
        firstJob(0);
    }
    void firstJob(const ::Ice::Context& __ctx)
    {
        firstJob(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_firstJob()
    {
        return begin_firstJob(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_firstJob(const ::Ice::Context& __ctx)
    {
        return begin_firstJob(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_firstJob(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_firstJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_firstJob(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_firstJob(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_firstJob(const ::CLTS::Callback_CraneOrder_firstJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_firstJob(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_firstJob(const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_firstJobPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_firstJob(&__ctx, __del, __cookie);
    }

    void end_firstJob(const ::Ice::AsyncResultPtr&);
    
private:

    void firstJob(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_firstJob(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setToStock(const ::std::string& toStockNo)
    {
        setToStock(toStockNo, 0);
    }
    void setToStock(const ::std::string& toStockNo, const ::Ice::Context& __ctx)
    {
        setToStock(toStockNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo)
    {
        return begin_setToStock(toStockNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo, const ::Ice::Context& __ctx)
    {
        return begin_setToStock(toStockNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setToStock(toStockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setToStock(toStockNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo, const ::CLTS::Callback_CraneOrder_setToStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setToStock(toStockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string& toStockNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_setToStockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setToStock(toStockNo, &__ctx, __del, __cookie);
    }

    void end_setToStock(const ::Ice::AsyncResultPtr&);
    
private:

    void setToStock(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setToStock(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setCraneNo(const ::std::string& craneNo)
    {
        setCraneNo(craneNo, 0);
    }
    void setCraneNo(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        setCraneNo(craneNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo)
    {
        return begin_setCraneNo(craneNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo, const ::Ice::Context& __ctx)
    {
        return begin_setCraneNo(craneNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCraneNo(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCraneNo(craneNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo, const ::CLTS::Callback_CraneOrder_setCraneNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCraneNo(craneNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string& craneNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_setCraneNoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setCraneNo(craneNo, &__ctx, __del, __cookie);
    }

    void end_setCraneNo(const ::Ice::AsyncResultPtr&);
    
private:

    void setCraneNo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setCraneNo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void select(const ::CLTS::OrderOperDesc& data)
    {
        select(data, 0);
    }
    void select(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        select(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data)
    {
        return begin_select(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        return begin_select(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data, const ::CLTS::Callback_CraneOrder_selectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_selectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_select(data, &__ctx, __del, __cookie);
    }

    void end_select(const ::Ice::AsyncResultPtr&);
    
private:

    void select(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_select(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void cancel(const ::CLTS::OrderOperDesc& data)
    {
        cancel(data, 0);
    }
    void cancel(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        cancel(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data)
    {
        return begin_cancel(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        return begin_cancel(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data, const ::CLTS::Callback_CraneOrder_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_cancelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_cancel(data, &__ctx, __del, __cookie);
    }

    void end_cancel(const ::Ice::AsyncResultPtr&);
    
private:

    void cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void liftUp(const ::CLTS::OrderOperDesc& data)
    {
        liftUp(data, 0);
    }
    void liftUp(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        liftUp(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data)
    {
        return begin_liftUp(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        return begin_liftUp(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data, const ::CLTS::Callback_CraneOrder_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(data, &__ctx, __del, __cookie);
    }

    void end_liftUp(const ::Ice::AsyncResultPtr&);
    
private:

    void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void liftDown(const ::CLTS::OrderOperDesc& data)
    {
        liftDown(data, 0);
    }
    void liftDown(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        liftDown(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data)
    {
        return begin_liftDown(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx)
    {
        return begin_liftDown(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data, const ::CLTS::Callback_CraneOrder_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& data, const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(data, &__ctx, __del, __cookie);
    }

    void end_liftDown(const ::Ice::AsyncResultPtr&);
    
private:

    void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void del()
    {
        del(0);
    }
    void del(const ::Ice::Context& __ctx)
    {
        del(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_del()
    {
        return begin_del(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& __ctx)
    {
        return begin_del(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_del(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_del(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::CLTS::Callback_CraneOrder_delPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_del(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context& __ctx, const ::CLTS::Callback_CraneOrder_delPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_del(&__ctx, __del, __cookie);
    }

    void end_del(const ::Ice::AsyncResultPtr&);
    
private:

    void del(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_del(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<CraneOrder> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<CraneOrder*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<CraneOrder*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class CraneOrder : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::CLTS::CraneOrderDesc getDesc(const ::Ice::Context*) = 0;

    virtual bool update(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void firstJob(const ::Ice::Context*) = 0;

    virtual void setToStock(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void setCraneNo(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void select(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void del(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class CraneOrder : virtual public ::IceDelegate::CLTS::CraneOrder,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::CLTS::CraneOrderDesc getDesc(const ::Ice::Context*);

    virtual bool update(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void firstJob(const ::Ice::Context*);

    virtual void setToStock(const ::std::string&, const ::Ice::Context*);

    virtual void setCraneNo(const ::std::string&, const ::Ice::Context*);

    virtual void select(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void del(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class CraneOrder : virtual public ::IceDelegate::CLTS::CraneOrder,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::CLTS::CraneOrderDesc getDesc(const ::Ice::Context*);

    virtual bool update(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void firstJob(const ::Ice::Context*);

    virtual void setToStock(const ::std::string&, const ::Ice::Context*);

    virtual void setCraneNo(const ::std::string&, const ::Ice::Context*);

    virtual void select(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void del(const ::Ice::Context*);
};

}

}

namespace CLTS
{

class CraneOrder : virtual public ::Ice::Object
{
public:

    typedef CraneOrderPrx ProxyType;
    typedef CraneOrderPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::CLTS::CraneOrderDesc getDesc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDesc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool update(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void firstJob(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___firstJob(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setToStock(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setToStock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setCraneNo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setCraneNo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void select(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___select(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void cancel(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___cancel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void del(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___del(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const CraneOrder& l, const CraneOrder& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const CraneOrder& l, const CraneOrder& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_CraneOrder_getDesc : public Callback_CraneOrder_getDesc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::CraneOrderDesc&);

    CallbackNC_CraneOrder_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CraneOrderDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_getDescPtr
newCallback_CraneOrder_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CraneOrderDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_getDescPtr
newCallback_CraneOrder_getDesc(T* instance, void (T::*cb)(const ::CLTS::CraneOrderDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_getDesc : public Callback_CraneOrder_getDesc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::CraneOrderDesc&, const CT&);

    Callback_CraneOrder_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CraneOrderDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_getDescPtr
newCallback_CraneOrder_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CraneOrderDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_getDescPtr
newCallback_CraneOrder_getDesc(T* instance, void (T::*cb)(const ::CLTS::CraneOrderDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_update : public Callback_CraneOrder_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_CraneOrder_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_updatePtr
newCallback_CraneOrder_update(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_updatePtr
newCallback_CraneOrder_update(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_update<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_update : public Callback_CraneOrder_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_CraneOrder_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_updatePtr
newCallback_CraneOrder_update(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_updatePtr
newCallback_CraneOrder_update(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_firstJob : public Callback_CraneOrder_firstJob_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_firstJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_firstJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_firstJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_firstJob<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_firstJob<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_firstJob<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_firstJob : public Callback_CraneOrder_firstJob_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_firstJob(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_firstJob(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_firstJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_firstJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_firstJob<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_firstJobPtr
newCallback_CraneOrder_firstJob(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_firstJob<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_setToStock : public Callback_CraneOrder_setToStock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_setToStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setToStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setToStock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setToStock<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setToStock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setToStock<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_setToStock : public Callback_CraneOrder_setToStock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_setToStock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setToStock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setToStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setToStock<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setToStock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setToStockPtr
newCallback_CraneOrder_setToStock(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setToStock<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_setCraneNo : public Callback_CraneOrder_setCraneNo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_setCraneNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setCraneNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setCraneNo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setCraneNo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setCraneNo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_setCraneNo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_setCraneNo : public Callback_CraneOrder_setCraneNo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_setCraneNo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setCraneNo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setCraneNo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setCraneNo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setCraneNo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_setCraneNoPtr
newCallback_CraneOrder_setCraneNo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_setCraneNo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_select : public Callback_CraneOrder_select_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_select(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_select(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_select<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_select<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_select<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_select<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_select : public Callback_CraneOrder_select_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_select(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_select(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_select<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_select<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_select<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_selectPtr
newCallback_CraneOrder_select(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_select<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_cancel : public Callback_CraneOrder_cancel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_cancel<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_cancel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_cancel<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_cancel : public Callback_CraneOrder_cancel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_cancel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_cancel(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_cancel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_cancelPtr
newCallback_CraneOrder_cancel(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_cancel<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_liftUp : public Callback_CraneOrder_liftUp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_liftUp : public Callback_CraneOrder_liftUp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftUpPtr
newCallback_CraneOrder_liftUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_liftDown : public Callback_CraneOrder_liftDown_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_liftDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_liftDown : public Callback_CraneOrder_liftDown_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_liftDownPtr
newCallback_CraneOrder_liftDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_liftDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CraneOrder_del : public Callback_CraneOrder_del_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CraneOrder_del(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_del(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_del<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_del<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_del<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CraneOrder_del<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CraneOrder_del : public Callback_CraneOrder_del_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CraneOrder_del(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CraneOrderPrx __proxy = ::CLTS::CraneOrderPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_del(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_del<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_del<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_del<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CraneOrder_delPtr
newCallback_CraneOrder_del(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CraneOrder_del<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
