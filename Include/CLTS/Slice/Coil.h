// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Coil.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_Coil_h__
#define ___________include_clts_slice_Coil_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <Ice/BuiltinSequences.h>
#include <CraneOrder.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class Coil;

}

}

namespace CLTS
{

class Coil;
bool operator==(const Coil&, const Coil&);
bool operator<(const Coil&, const Coil&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::Coil*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::Coil*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::Coil> CoilPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::Coil> CoilPrx;

void __read(::IceInternal::BasicStream*, CoilPrx&);
void __patch__CoilPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

struct CoilDesc
{
    ::std::string no;
    ::std::string stockNo;
    ::Ice::Int actWeight;
    ::Ice::Int width;
    ::Ice::Int inDia;
    ::Ice::Int outDia;
    ::Ice::Int packFlag;
    ::Ice::Int openDirection;
    ::Ice::Int actWidth;
    ::Ice::Int weight;
    ::Ice::Int thickness;
    ::Ice::Int sleeveWidth;
    ::std::string nextUnitNo;
    ::std::string contractNo;
    ::std::string steelGrandId;

    bool operator==(const CoilDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(stockNo != __rhs.stockNo)
        {
            return false;
        }
        if(actWeight != __rhs.actWeight)
        {
            return false;
        }
        if(width != __rhs.width)
        {
            return false;
        }
        if(inDia != __rhs.inDia)
        {
            return false;
        }
        if(outDia != __rhs.outDia)
        {
            return false;
        }
        if(packFlag != __rhs.packFlag)
        {
            return false;
        }
        if(openDirection != __rhs.openDirection)
        {
            return false;
        }
        if(actWidth != __rhs.actWidth)
        {
            return false;
        }
        if(weight != __rhs.weight)
        {
            return false;
        }
        if(thickness != __rhs.thickness)
        {
            return false;
        }
        if(sleeveWidth != __rhs.sleeveWidth)
        {
            return false;
        }
        if(nextUnitNo != __rhs.nextUnitNo)
        {
            return false;
        }
        if(contractNo != __rhs.contractNo)
        {
            return false;
        }
        if(steelGrandId != __rhs.steelGrandId)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CoilDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(stockNo < __rhs.stockNo)
        {
            return true;
        }
        else if(__rhs.stockNo < stockNo)
        {
            return false;
        }
        if(actWeight < __rhs.actWeight)
        {
            return true;
        }
        else if(__rhs.actWeight < actWeight)
        {
            return false;
        }
        if(width < __rhs.width)
        {
            return true;
        }
        else if(__rhs.width < width)
        {
            return false;
        }
        if(inDia < __rhs.inDia)
        {
            return true;
        }
        else if(__rhs.inDia < inDia)
        {
            return false;
        }
        if(outDia < __rhs.outDia)
        {
            return true;
        }
        else if(__rhs.outDia < outDia)
        {
            return false;
        }
        if(packFlag < __rhs.packFlag)
        {
            return true;
        }
        else if(__rhs.packFlag < packFlag)
        {
            return false;
        }
        if(openDirection < __rhs.openDirection)
        {
            return true;
        }
        else if(__rhs.openDirection < openDirection)
        {
            return false;
        }
        if(actWidth < __rhs.actWidth)
        {
            return true;
        }
        else if(__rhs.actWidth < actWidth)
        {
            return false;
        }
        if(weight < __rhs.weight)
        {
            return true;
        }
        else if(__rhs.weight < weight)
        {
            return false;
        }
        if(thickness < __rhs.thickness)
        {
            return true;
        }
        else if(__rhs.thickness < thickness)
        {
            return false;
        }
        if(sleeveWidth < __rhs.sleeveWidth)
        {
            return true;
        }
        else if(__rhs.sleeveWidth < sleeveWidth)
        {
            return false;
        }
        if(nextUnitNo < __rhs.nextUnitNo)
        {
            return true;
        }
        else if(__rhs.nextUnitNo < nextUnitNo)
        {
            return false;
        }
        if(contractNo < __rhs.contractNo)
        {
            return true;
        }
        else if(__rhs.contractNo < contractNo)
        {
            return false;
        }
        if(steelGrandId < __rhs.steelGrandId)
        {
            return true;
        }
        else if(__rhs.steelGrandId < steelGrandId)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CoilDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CoilDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CoilDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CoilDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::CLTS::CoilDesc> CoilDescSeq;
void __writeCoilDescSeq(::IceInternal::BasicStream*, const ::CLTS::CoilDesc*, const ::CLTS::CoilDesc*);
void __readCoilDescSeq(::IceInternal::BasicStream*, CoilDescSeq&);

struct CoilConfirmDesc
{
    ::std::string coilNo;
    bool bConfirmed;
    bool bPacked;
    ::Ice::Int openDirection;

    bool operator==(const CoilConfirmDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(coilNo != __rhs.coilNo)
        {
            return false;
        }
        if(bConfirmed != __rhs.bConfirmed)
        {
            return false;
        }
        if(bPacked != __rhs.bPacked)
        {
            return false;
        }
        if(openDirection != __rhs.openDirection)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CoilConfirmDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(coilNo < __rhs.coilNo)
        {
            return true;
        }
        else if(__rhs.coilNo < coilNo)
        {
            return false;
        }
        if(bConfirmed < __rhs.bConfirmed)
        {
            return true;
        }
        else if(__rhs.bConfirmed < bConfirmed)
        {
            return false;
        }
        if(bPacked < __rhs.bPacked)
        {
            return true;
        }
        else if(__rhs.bPacked < bPacked)
        {
            return false;
        }
        if(openDirection < __rhs.openDirection)
        {
            return true;
        }
        else if(__rhs.openDirection < openDirection)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CoilConfirmDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const CoilConfirmDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const CoilConfirmDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const CoilConfirmDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

const ::Ice::Int InStock = 100;

const ::Ice::Int LiftUp = 200;

const ::Ice::Int InLine = 300;

const ::Ice::Int Produceing = 400;

const ::Ice::Int Produced = 500;

const ::Ice::Int InTruck = 410;

const ::Ice::Int TruckLeave = 510;

}

namespace CLTS
{

class Callback_Coil_getDesc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_getDesc_Base> Callback_Coil_getDescPtr;

class Callback_Coil_createByL2CoilInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_createByL2CoilInfo_Base> Callback_Coil_createByL2CoilInfoPtr;

class Callback_Coil_createByL2EntryCoilInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_createByL2EntryCoilInfo_Base> Callback_Coil_createByL2EntryCoilInfoPtr;

class Callback_Coil_move2Stock_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_move2Stock_Base> Callback_Coil_move2StockPtr;

class Callback_Coil_book2Saddle_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_book2Saddle_Base> Callback_Coil_book2SaddlePtr;

class Callback_Coil_liftUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_liftUp_Base> Callback_Coil_liftUpPtr;

class Callback_Coil_liftDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_liftDown_Base> Callback_Coil_liftDownPtr;

class Callback_Coil_move2Coils_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_move2Coils_Base> Callback_Coil_move2CoilsPtr;

class Callback_Coil_confirm_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_confirm_Base> Callback_Coil_confirmPtr;

class Callback_Coil_setStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Coil_setStatus_Base> Callback_Coil_setStatusPtr;

}

namespace IceProxy
{

namespace CLTS
{

class Coil : virtual public ::IceProxy::Ice::Object
{
public:

    ::CLTS::CoilDesc getDesc()
    {
        return getDesc(0);
    }
    ::CLTS::CoilDesc getDesc(const ::Ice::Context& __ctx)
    {
        return getDesc(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDesc()
    {
        return begin_getDesc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx)
    {
        return begin_getDesc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::CLTS::Callback_Coil_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::CLTS::CoilDesc end_getDesc(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::CoilDesc getDesc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void createByL2CoilInfo()
    {
        createByL2CoilInfo(0);
    }
    void createByL2CoilInfo(const ::Ice::Context& __ctx)
    {
        createByL2CoilInfo(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo()
    {
        return begin_createByL2CoilInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::Ice::Context& __ctx)
    {
        return begin_createByL2CoilInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2CoilInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2CoilInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::CLTS::Callback_Coil_createByL2CoilInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2CoilInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_createByL2CoilInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2CoilInfo(&__ctx, __del, __cookie);
    }

    void end_createByL2CoilInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void createByL2CoilInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createByL2CoilInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void createByL2EntryCoilInfo(const ::std::string& unitNo)
    {
        createByL2EntryCoilInfo(unitNo, 0);
    }
    void createByL2EntryCoilInfo(const ::std::string& unitNo, const ::Ice::Context& __ctx)
    {
        createByL2EntryCoilInfo(unitNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo)
    {
        return begin_createByL2EntryCoilInfo(unitNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo, const ::Ice::Context& __ctx)
    {
        return begin_createByL2EntryCoilInfo(unitNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2EntryCoilInfo(unitNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2EntryCoilInfo(unitNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo, const ::CLTS::Callback_Coil_createByL2EntryCoilInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2EntryCoilInfo(unitNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string& unitNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_createByL2EntryCoilInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createByL2EntryCoilInfo(unitNo, &__ctx, __del, __cookie);
    }

    void end_createByL2EntryCoilInfo(const ::Ice::AsyncResultPtr&);
    
private:

    void createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string move2Stock(const ::std::string& stockNo)
    {
        return move2Stock(stockNo, 0);
    }
    ::std::string move2Stock(const ::std::string& stockNo, const ::Ice::Context& __ctx)
    {
        return move2Stock(stockNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo)
    {
        return begin_move2Stock(stockNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo, const ::Ice::Context& __ctx)
    {
        return begin_move2Stock(stockNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Stock(stockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Stock(stockNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo, const ::CLTS::Callback_Coil_move2StockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Stock(stockNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string& stockNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_move2StockPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Stock(stockNo, &__ctx, __del, __cookie);
    }

    ::std::string end_move2Stock(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string move2Stock(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_move2Stock(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string book2Saddle(const ::std::string& saddleNo)
    {
        return book2Saddle(saddleNo, 0);
    }
    ::std::string book2Saddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx)
    {
        return book2Saddle(saddleNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo)
    {
        return begin_book2Saddle(saddleNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx)
    {
        return begin_book2Saddle(saddleNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_book2Saddle(saddleNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_book2Saddle(saddleNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo, const ::CLTS::Callback_Coil_book2SaddlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_book2Saddle(saddleNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string& saddleNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_book2SaddlePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_book2Saddle(saddleNo, &__ctx, __del, __cookie);
    }

    ::std::string end_book2Saddle(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string book2Saddle(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_book2Saddle(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc& operDesc)
    {
        return liftUp(operDesc, 0);
    }
    ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return liftUp(operDesc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc)
    {
        return begin_liftUp(operDesc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return begin_liftUp(operDesc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::CLTS::Callback_Coil_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_liftUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftUp(operDesc, &__ctx, __del, __cookie);
    }

    ::CLTS::OrderOperDesc end_liftUp(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc& operDesc)
    {
        return liftDown(operDesc, 0);
    }
    ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return liftDown(operDesc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc)
    {
        return begin_liftDown(operDesc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx)
    {
        return begin_liftDown(operDesc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::CLTS::Callback_Coil_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc& operDesc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_liftDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_liftDown(operDesc, &__ctx, __del, __cookie);
    }

    ::CLTS::OrderOperDesc end_liftDown(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void move2Coils(const ::std::string& coil1, const ::std::string& coil2)
    {
        move2Coils(coil1, coil2, 0);
    }
    void move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::Ice::Context& __ctx)
    {
        move2Coils(coil1, coil2, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2)
    {
        return begin_move2Coils(coil1, coil2, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::Ice::Context& __ctx)
    {
        return begin_move2Coils(coil1, coil2, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Coils(coil1, coil2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Coils(coil1, coil2, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::CLTS::Callback_Coil_move2CoilsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Coils(coil1, coil2, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string& coil1, const ::std::string& coil2, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_move2CoilsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_move2Coils(coil1, coil2, &__ctx, __del, __cookie);
    }

    void end_move2Coils(const ::Ice::AsyncResultPtr&);
    
private:

    void move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void confirm(const ::CLTS::CoilConfirmDesc& confirmDesc)
    {
        confirm(confirmDesc, 0);
    }
    void confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::Ice::Context& __ctx)
    {
        confirm(confirmDesc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc)
    {
        return begin_confirm(confirmDesc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::Ice::Context& __ctx)
    {
        return begin_confirm(confirmDesc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirm(confirmDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirm(confirmDesc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::CLTS::Callback_Coil_confirmPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirm(confirmDesc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc& confirmDesc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_confirmPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_confirm(confirmDesc, &__ctx, __del, __cookie);
    }

    void end_confirm(const ::Ice::AsyncResultPtr&);
    
private:

    void confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setStatus(::Ice::Int coilStatus)
    {
        setStatus(coilStatus, 0);
    }
    void setStatus(::Ice::Int coilStatus, const ::Ice::Context& __ctx)
    {
        setStatus(coilStatus, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus)
    {
        return begin_setStatus(coilStatus, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus, const ::Ice::Context& __ctx)
    {
        return begin_setStatus(coilStatus, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(coilStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(coilStatus, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus, const ::CLTS::Callback_Coil_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(coilStatus, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int coilStatus, const ::Ice::Context& __ctx, const ::CLTS::Callback_Coil_setStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setStatus(coilStatus, &__ctx, __del, __cookie);
    }

    void end_setStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void setStatus(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setStatus(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Coil> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Coil> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Coil*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Coil*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class Coil : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::CLTS::CoilDesc getDesc(const ::Ice::Context*) = 0;

    virtual void createByL2CoilInfo(const ::Ice::Context*) = 0;

    virtual void createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::std::string move2Stock(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::std::string book2Saddle(const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*) = 0;

    virtual void move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual void confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Context*) = 0;

    virtual void setStatus(::Ice::Int, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class Coil : virtual public ::IceDelegate::CLTS::Coil,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::CLTS::CoilDesc getDesc(const ::Ice::Context*);

    virtual void createByL2CoilInfo(const ::Ice::Context*);

    virtual void createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Context*);

    virtual ::std::string move2Stock(const ::std::string&, const ::Ice::Context*);

    virtual ::std::string book2Saddle(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Context*);

    virtual void setStatus(::Ice::Int, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class Coil : virtual public ::IceDelegate::CLTS::Coil,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::CLTS::CoilDesc getDesc(const ::Ice::Context*);

    virtual void createByL2CoilInfo(const ::Ice::Context*);

    virtual void createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Context*);

    virtual ::std::string move2Stock(const ::std::string&, const ::Ice::Context*);

    virtual ::std::string book2Saddle(const ::std::string&, const ::Ice::Context*);

    virtual ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Context*);

    virtual void move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual void confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Context*);

    virtual void setStatus(::Ice::Int, const ::Ice::Context*);
};

}

}

namespace CLTS
{

class Coil : virtual public ::Ice::Object
{
public:

    typedef CoilPrx ProxyType;
    typedef CoilPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::CLTS::CoilDesc getDesc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDesc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createByL2CoilInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createByL2CoilInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createByL2EntryCoilInfo(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createByL2EntryCoilInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string move2Stock(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___move2Stock(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string book2Saddle(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___book2Saddle(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::OrderOperDesc liftUp(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::OrderOperDesc liftDown(const ::CLTS::OrderOperDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___liftDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void move2Coils(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___move2Coils(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void confirm(const ::CLTS::CoilConfirmDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___confirm(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setStatus(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Coil& l, const Coil& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Coil& l, const Coil& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_Coil_getDesc : public Callback_Coil_getDesc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::CoilDesc&);

    CallbackNC_Coil_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_getDescPtr
newCallback_Coil_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_getDescPtr
newCallback_Coil_getDesc(T* instance, void (T::*cb)(const ::CLTS::CoilDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_getDesc : public Callback_Coil_getDesc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::CoilDesc&, const CT&);

    Callback_Coil_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_getDescPtr
newCallback_Coil_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_getDescPtr
newCallback_Coil_getDesc(T* instance, void (T::*cb)(const ::CLTS::CoilDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_createByL2CoilInfo : public Callback_Coil_createByL2CoilInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Coil_createByL2CoilInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createByL2CoilInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2CoilInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2CoilInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2CoilInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2CoilInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_createByL2CoilInfo : public Callback_Coil_createByL2CoilInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Coil_createByL2CoilInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createByL2CoilInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2CoilInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2CoilInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2CoilInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2CoilInfoPtr
newCallback_Coil_createByL2CoilInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2CoilInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_createByL2EntryCoilInfo : public Callback_Coil_createByL2EntryCoilInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Coil_createByL2EntryCoilInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createByL2EntryCoilInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2EntryCoilInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2EntryCoilInfo<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2EntryCoilInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_createByL2EntryCoilInfo<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_createByL2EntryCoilInfo : public Callback_Coil_createByL2EntryCoilInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Coil_createByL2EntryCoilInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_createByL2EntryCoilInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2EntryCoilInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2EntryCoilInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2EntryCoilInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_createByL2EntryCoilInfoPtr
newCallback_Coil_createByL2EntryCoilInfo(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_createByL2EntryCoilInfo<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_move2Stock : public Callback_Coil_move2Stock_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Coil_move2Stock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_move2Stock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_move2StockPtr
newCallback_Coil_move2Stock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Stock<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_move2StockPtr
newCallback_Coil_move2Stock(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Stock<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_move2Stock : public Callback_Coil_move2Stock_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Coil_move2Stock(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_move2Stock(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_move2StockPtr
newCallback_Coil_move2Stock(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Stock<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_move2StockPtr
newCallback_Coil_move2Stock(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Stock<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_book2Saddle : public Callback_Coil_book2Saddle_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Coil_book2Saddle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_book2Saddle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_book2SaddlePtr
newCallback_Coil_book2Saddle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_book2Saddle<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_book2SaddlePtr
newCallback_Coil_book2Saddle(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_book2Saddle<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_book2Saddle : public Callback_Coil_book2Saddle_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Coil_book2Saddle(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_book2Saddle(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_book2SaddlePtr
newCallback_Coil_book2Saddle(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_book2Saddle<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_book2SaddlePtr
newCallback_Coil_book2Saddle(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_book2Saddle<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_liftUp : public Callback_Coil_liftUp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::OrderOperDesc&);

    CallbackNC_Coil_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::OrderOperDesc __ret;
        try
        {
            __ret = __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_liftUpPtr
newCallback_Coil_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::OrderOperDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_liftUpPtr
newCallback_Coil_liftUp(T* instance, void (T::*cb)(const ::CLTS::OrderOperDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_liftUp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_liftUp : public Callback_Coil_liftUp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::OrderOperDesc&, const CT&);

    Callback_Coil_liftUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::OrderOperDesc __ret;
        try
        {
            __ret = __proxy->end_liftUp(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_liftUpPtr
newCallback_Coil_liftUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::OrderOperDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_liftUpPtr
newCallback_Coil_liftUp(T* instance, void (T::*cb)(const ::CLTS::OrderOperDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_liftUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_liftDown : public Callback_Coil_liftDown_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::OrderOperDesc&);

    CallbackNC_Coil_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::OrderOperDesc __ret;
        try
        {
            __ret = __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_liftDownPtr
newCallback_Coil_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::OrderOperDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_liftDownPtr
newCallback_Coil_liftDown(T* instance, void (T::*cb)(const ::CLTS::OrderOperDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_liftDown<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_liftDown : public Callback_Coil_liftDown_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::OrderOperDesc&, const CT&);

    Callback_Coil_liftDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        ::CLTS::OrderOperDesc __ret;
        try
        {
            __ret = __proxy->end_liftDown(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_liftDownPtr
newCallback_Coil_liftDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::OrderOperDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_liftDownPtr
newCallback_Coil_liftDown(T* instance, void (T::*cb)(const ::CLTS::OrderOperDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_liftDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_move2Coils : public Callback_Coil_move2Coils_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Coil_move2Coils(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_move2Coils(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Coils<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Coils<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Coils<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_move2Coils<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_move2Coils : public Callback_Coil_move2Coils_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Coil_move2Coils(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_move2Coils(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Coils<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Coils<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Coils<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_move2CoilsPtr
newCallback_Coil_move2Coils(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_move2Coils<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_confirm : public Callback_Coil_confirm_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Coil_confirm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_confirm(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_confirmPtr
newCallback_Coil_confirm(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_confirm<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_confirmPtr
newCallback_Coil_confirm(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_confirm<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Coil_confirmPtr
newCallback_Coil_confirm(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_confirm<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_confirmPtr
newCallback_Coil_confirm(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_confirm<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_confirm : public Callback_Coil_confirm_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Coil_confirm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_confirm(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_confirmPtr
newCallback_Coil_confirm(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_confirm<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_confirmPtr
newCallback_Coil_confirm(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_confirm<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_confirmPtr
newCallback_Coil_confirm(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_confirm<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_confirmPtr
newCallback_Coil_confirm(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_confirm<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Coil_setStatus : public Callback_Coil_setStatus_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Coil_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_setStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Coil_setStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Coil_setStatus : public Callback_Coil_setStatus_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Coil_setStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::CoilPrx __proxy = ::CLTS::CoilPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setStatus(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_setStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_setStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Coil_setStatusPtr
newCallback_Coil_setStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Coil_setStatus<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
