// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `Area.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#ifndef ___________include_clts_slice_Area_h__
#define ___________include_clts_slice_Area_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <CltsException.h>
#include <RowCol.h>
#include <Coil.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace CLTS
{

class Area;

}

}

namespace CLTS
{

class Area;
bool operator==(const Area&, const Area&);
bool operator<(const Area&, const Area&);

}

namespace IceInternal
{

::Ice::Object* upCast(::CLTS::Area*);
::IceProxy::Ice::Object* upCast(::IceProxy::CLTS::Area*);

}

namespace CLTS
{

typedef ::IceInternal::Handle< ::CLTS::Area> AreaPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::CLTS::Area> AreaPrx;

void __read(::IceInternal::BasicStream*, AreaPrx&);
void __patch__AreaPtr(void*, ::Ice::ObjectPtr&);

}

namespace CLTS
{

enum AreaType
{
    NormalArea,
    SmalCoilArea,
    ManPickArea,
    TaoTongArea,
    LineRWArea,
    LineCWArea,
    TrolleyArea,
    VechicalArea
};

void __write(::IceInternal::BasicStream*, AreaType);
void __read(::IceInternal::BasicStream*, AreaType&);

struct AreaDesc
{
    ::std::string no;
    ::std::string name;
    ::std::string bayNo;
    ::std::string yardNo;
    ::CLTS::AreaType type;
    ::Ice::Int xStart;
    ::Ice::Int xEnd;
    ::Ice::Int yStart;
    ::Ice::Int yEnd;
    ::Ice::Int rowNum;
    ::Ice::Int colNum;
    ::std::string direction;

    bool operator==(const AreaDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(no != __rhs.no)
        {
            return false;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(bayNo != __rhs.bayNo)
        {
            return false;
        }
        if(yardNo != __rhs.yardNo)
        {
            return false;
        }
        if(type != __rhs.type)
        {
            return false;
        }
        if(xStart != __rhs.xStart)
        {
            return false;
        }
        if(xEnd != __rhs.xEnd)
        {
            return false;
        }
        if(yStart != __rhs.yStart)
        {
            return false;
        }
        if(yEnd != __rhs.yEnd)
        {
            return false;
        }
        if(rowNum != __rhs.rowNum)
        {
            return false;
        }
        if(colNum != __rhs.colNum)
        {
            return false;
        }
        if(direction != __rhs.direction)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AreaDesc& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(no < __rhs.no)
        {
            return true;
        }
        else if(__rhs.no < no)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(bayNo < __rhs.bayNo)
        {
            return true;
        }
        else if(__rhs.bayNo < bayNo)
        {
            return false;
        }
        if(yardNo < __rhs.yardNo)
        {
            return true;
        }
        else if(__rhs.yardNo < yardNo)
        {
            return false;
        }
        if(type < __rhs.type)
        {
            return true;
        }
        else if(__rhs.type < type)
        {
            return false;
        }
        if(xStart < __rhs.xStart)
        {
            return true;
        }
        else if(__rhs.xStart < xStart)
        {
            return false;
        }
        if(xEnd < __rhs.xEnd)
        {
            return true;
        }
        else if(__rhs.xEnd < xEnd)
        {
            return false;
        }
        if(yStart < __rhs.yStart)
        {
            return true;
        }
        else if(__rhs.yStart < yStart)
        {
            return false;
        }
        if(yEnd < __rhs.yEnd)
        {
            return true;
        }
        else if(__rhs.yEnd < yEnd)
        {
            return false;
        }
        if(rowNum < __rhs.rowNum)
        {
            return true;
        }
        else if(__rhs.rowNum < rowNum)
        {
            return false;
        }
        if(colNum < __rhs.colNum)
        {
            return true;
        }
        else if(__rhs.colNum < colNum)
        {
            return false;
        }
        if(direction < __rhs.direction)
        {
            return true;
        }
        else if(__rhs.direction < direction)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AreaDesc& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AreaDesc& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AreaDesc& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AreaDesc& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::CLTS::AreaDesc> AreaDescSeq;
void __writeAreaDescSeq(::IceInternal::BasicStream*, const ::CLTS::AreaDesc*, const ::CLTS::AreaDesc*);
void __readAreaDescSeq(::IceInternal::BasicStream*, AreaDescSeq&);

}

namespace CLTS
{

class Callback_Area_update_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_update_Base> Callback_Area_updatePtr;

class Callback_Area_addRowOrCol_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_addRowOrCol_Base> Callback_Area_addRowOrColPtr;

class Callback_Area_delRowOrCol_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_delRowOrCol_Base> Callback_Area_delRowOrColPtr;

class Callback_Area_getSaddles_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_getSaddles_Base> Callback_Area_getSaddlesPtr;

class Callback_Area_getStocks_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_getStocks_Base> Callback_Area_getStocksPtr;

class Callback_Area_getRowCols_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_getRowCols_Base> Callback_Area_getRowColsPtr;

class Callback_Area_getCoils_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_getCoils_Base> Callback_Area_getCoilsPtr;

class Callback_Area_getDesc_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Area_getDesc_Base> Callback_Area_getDescPtr;

}

namespace IceProxy
{

namespace CLTS
{

class Area : virtual public ::IceProxy::Ice::Object
{
public:

    void update(const ::CLTS::AreaDesc& desc)
    {
        update(desc, 0);
    }
    void update(const ::CLTS::AreaDesc& desc, const ::Ice::Context& __ctx)
    {
        update(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc)
    {
        return begin_update(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_update(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc, const ::CLTS::Callback_Area_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_updatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_update(desc, &__ctx, __del, __cookie);
    }

    void end_update(const ::Ice::AsyncResultPtr&);
    
private:

    void update(const ::CLTS::AreaDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_update(const ::CLTS::AreaDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addRowOrCol(const ::CLTS::RowColDesc& desc)
    {
        addRowOrCol(desc, 0);
    }
    void addRowOrCol(const ::CLTS::RowColDesc& desc, const ::Ice::Context& __ctx)
    {
        addRowOrCol(desc, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc)
    {
        return begin_addRowOrCol(desc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc, const ::Ice::Context& __ctx)
    {
        return begin_addRowOrCol(desc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRowOrCol(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRowOrCol(desc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc, const ::CLTS::Callback_Area_addRowOrColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRowOrCol(desc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc& desc, const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_addRowOrColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addRowOrCol(desc, &__ctx, __del, __cookie);
    }

    void end_addRowOrCol(const ::Ice::AsyncResultPtr&);
    
private:

    void addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void delRowOrCol(const ::std::string& rowcolNo)
    {
        delRowOrCol(rowcolNo, 0);
    }
    void delRowOrCol(const ::std::string& rowcolNo, const ::Ice::Context& __ctx)
    {
        delRowOrCol(rowcolNo, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo)
    {
        return begin_delRowOrCol(rowcolNo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo, const ::Ice::Context& __ctx)
    {
        return begin_delRowOrCol(rowcolNo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delRowOrCol(rowcolNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delRowOrCol(rowcolNo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo, const ::CLTS::Callback_Area_delRowOrColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delRowOrCol(rowcolNo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string& rowcolNo, const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_delRowOrColPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_delRowOrCol(rowcolNo, &__ctx, __del, __cookie);
    }

    void end_delRowOrCol(const ::Ice::AsyncResultPtr&);
    
private:

    void delRowOrCol(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_delRowOrCol(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getSaddles(::CLTS::SaddleDescSeq& saddles)
    {
        getSaddles(saddles, 0);
    }
    void getSaddles(::CLTS::SaddleDescSeq& saddles, const ::Ice::Context& __ctx)
    {
        getSaddles(saddles, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getSaddles()
    {
        return begin_getSaddles(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSaddles(const ::Ice::Context& __ctx)
    {
        return begin_getSaddles(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSaddles(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddles(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddles(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddles(const ::CLTS::Callback_Area_getSaddlesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddles(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSaddles(const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_getSaddlesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSaddles(&__ctx, __del, __cookie);
    }

    void end_getSaddles(::CLTS::SaddleDescSeq& saddles, const ::Ice::AsyncResultPtr&);
    
private:

    void getSaddles(::CLTS::SaddleDescSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSaddles(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getStocks(::CLTS::StockDescSeq& stocks)
    {
        getStocks(stocks, 0);
    }
    void getStocks(::CLTS::StockDescSeq& stocks, const ::Ice::Context& __ctx)
    {
        getStocks(stocks, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getStocks()
    {
        return begin_getStocks(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStocks(const ::Ice::Context& __ctx)
    {
        return begin_getStocks(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStocks(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStocks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStocks(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStocks(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStocks(const ::CLTS::Callback_Area_getStocksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStocks(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStocks(const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_getStocksPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStocks(&__ctx, __del, __cookie);
    }

    void end_getStocks(::CLTS::StockDescSeq& stocks, const ::Ice::AsyncResultPtr&);
    
private:

    void getStocks(::CLTS::StockDescSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStocks(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getRowCols(::CLTS::RowColDescSeq& rowcols)
    {
        getRowCols(rowcols, 0);
    }
    void getRowCols(::CLTS::RowColDescSeq& rowcols, const ::Ice::Context& __ctx)
    {
        getRowCols(rowcols, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getRowCols()
    {
        return begin_getRowCols(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowCols(const ::Ice::Context& __ctx)
    {
        return begin_getRowCols(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRowCols(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCols(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCols(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCols(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCols(const ::CLTS::Callback_Area_getRowColsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCols(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRowCols(const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_getRowColsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRowCols(&__ctx, __del, __cookie);
    }

    void end_getRowCols(::CLTS::RowColDescSeq& rowcols, const ::Ice::AsyncResultPtr&);
    
private:

    void getRowCols(::CLTS::RowColDescSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRowCols(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getCoils(::CLTS::CoilDescSeq& coils)
    {
        getCoils(coils, 0);
    }
    void getCoils(::CLTS::CoilDescSeq& coils, const ::Ice::Context& __ctx)
    {
        getCoils(coils, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_getCoils()
    {
        return begin_getCoils(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoils(const ::Ice::Context& __ctx)
    {
        return begin_getCoils(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCoils(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoils(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoils(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoils(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoils(const ::CLTS::Callback_Area_getCoilsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoils(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getCoils(const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_getCoilsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getCoils(&__ctx, __del, __cookie);
    }

    void end_getCoils(::CLTS::CoilDescSeq& coils, const ::Ice::AsyncResultPtr&);
    
private:

    void getCoils(::CLTS::CoilDescSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getCoils(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::CLTS::AreaDesc getDesc()
    {
        return getDesc(0);
    }
    ::CLTS::AreaDesc getDesc(const ::Ice::Context& __ctx)
    {
        return getDesc(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_getDesc()
    {
        return begin_getDesc(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx)
    {
        return begin_getDesc(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::CLTS::Callback_Area_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context& __ctx, const ::CLTS::Callback_Area_getDescPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDesc(&__ctx, __del, __cookie);
    }

    ::CLTS::AreaDesc end_getDesc(const ::Ice::AsyncResultPtr&);
    
private:

    ::CLTS::AreaDesc getDesc(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDesc(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Area> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Area> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Area*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Area*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace CLTS
{

class Area : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void update(const ::CLTS::AreaDesc&, const ::Ice::Context*) = 0;

    virtual void addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Context*) = 0;

    virtual void delRowOrCol(const ::std::string&, const ::Ice::Context*) = 0;

    virtual void getSaddles(::CLTS::SaddleDescSeq&, const ::Ice::Context*) = 0;

    virtual void getStocks(::CLTS::StockDescSeq&, const ::Ice::Context*) = 0;

    virtual void getRowCols(::CLTS::RowColDescSeq&, const ::Ice::Context*) = 0;

    virtual void getCoils(::CLTS::CoilDescSeq&, const ::Ice::Context*) = 0;

    virtual ::CLTS::AreaDesc getDesc(const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace CLTS
{

class Area : virtual public ::IceDelegate::CLTS::Area,
             virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void update(const ::CLTS::AreaDesc&, const ::Ice::Context*);

    virtual void addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Context*);

    virtual void delRowOrCol(const ::std::string&, const ::Ice::Context*);

    virtual void getSaddles(::CLTS::SaddleDescSeq&, const ::Ice::Context*);

    virtual void getStocks(::CLTS::StockDescSeq&, const ::Ice::Context*);

    virtual void getRowCols(::CLTS::RowColDescSeq&, const ::Ice::Context*);

    virtual void getCoils(::CLTS::CoilDescSeq&, const ::Ice::Context*);

    virtual ::CLTS::AreaDesc getDesc(const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace CLTS
{

class Area : virtual public ::IceDelegate::CLTS::Area,
             virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void update(const ::CLTS::AreaDesc&, const ::Ice::Context*);

    virtual void addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Context*);

    virtual void delRowOrCol(const ::std::string&, const ::Ice::Context*);

    virtual void getSaddles(::CLTS::SaddleDescSeq&, const ::Ice::Context*);

    virtual void getStocks(::CLTS::StockDescSeq&, const ::Ice::Context*);

    virtual void getRowCols(::CLTS::RowColDescSeq&, const ::Ice::Context*);

    virtual void getCoils(::CLTS::CoilDescSeq&, const ::Ice::Context*);

    virtual ::CLTS::AreaDesc getDesc(const ::Ice::Context*);
};

}

}

namespace CLTS
{

class Area : virtual public ::Ice::Object
{
public:

    typedef AreaPrx ProxyType;
    typedef AreaPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void update(const ::CLTS::AreaDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___update(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addRowOrCol(const ::CLTS::RowColDesc&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addRowOrCol(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void delRowOrCol(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___delRowOrCol(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getSaddles(::CLTS::SaddleDescSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSaddles(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStocks(::CLTS::StockDescSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStocks(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRowCols(::CLTS::RowColDescSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRowCols(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getCoils(::CLTS::CoilDescSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getCoils(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::CLTS::AreaDesc getDesc(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getDesc(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Area& l, const Area& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Area& l, const Area& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace CLTS
{

template<class T>
class CallbackNC_Area_update : public Callback_Area_update_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Area_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_updatePtr
newCallback_Area_update(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_updatePtr
newCallback_Area_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_update<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Area_updatePtr
newCallback_Area_update(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_update<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_updatePtr
newCallback_Area_update(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_update<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_update : public Callback_Area_update_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Area_update(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_update(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_updatePtr
newCallback_Area_update(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_updatePtr
newCallback_Area_update(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Area_updatePtr
newCallback_Area_update(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_update<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_updatePtr
newCallback_Area_update(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_update<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Area_addRowOrCol : public Callback_Area_addRowOrCol_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Area_addRowOrCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addRowOrCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_addRowOrCol<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_addRowOrCol<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_addRowOrCol<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_addRowOrCol<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_addRowOrCol : public Callback_Area_addRowOrCol_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Area_addRowOrCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_addRowOrCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_addRowOrCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_addRowOrCol<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_addRowOrCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_addRowOrColPtr
newCallback_Area_addRowOrCol(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_addRowOrCol<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Area_delRowOrCol : public Callback_Area_delRowOrCol_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Area_delRowOrCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delRowOrCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_delRowOrCol<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_delRowOrCol<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_delRowOrCol<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_delRowOrCol<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_delRowOrCol : public Callback_Area_delRowOrCol_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Area_delRowOrCol(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_delRowOrCol(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_delRowOrCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_delRowOrCol<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_delRowOrCol<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_delRowOrColPtr
newCallback_Area_delRowOrCol(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_delRowOrCol<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Area_getSaddles : public Callback_Area_getSaddles_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::SaddleDescSeq&);

    CallbackNC_Area_getSaddles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddleDescSeq saddles;
        try
        {
            __proxy->end_getSaddles(saddles, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(saddles);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(saddles);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_getSaddlesPtr
newCallback_Area_getSaddles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddleDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getSaddles<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_getSaddlesPtr
newCallback_Area_getSaddles(T* instance, void (T::*cb)(const ::CLTS::SaddleDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getSaddles<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_getSaddles : public Callback_Area_getSaddles_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::SaddleDescSeq&, const CT&);

    Callback_Area_getSaddles(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::SaddleDescSeq saddles;
        try
        {
            __proxy->end_getSaddles(saddles, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(saddles, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(saddles, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_getSaddlesPtr
newCallback_Area_getSaddles(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::SaddleDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getSaddles<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_getSaddlesPtr
newCallback_Area_getSaddles(T* instance, void (T::*cb)(const ::CLTS::SaddleDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getSaddles<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Area_getStocks : public Callback_Area_getStocks_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::StockDescSeq&);

    CallbackNC_Area_getStocks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockDescSeq stocks;
        try
        {
            __proxy->end_getStocks(stocks, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(stocks);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(stocks);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_getStocksPtr
newCallback_Area_getStocks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getStocks<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_getStocksPtr
newCallback_Area_getStocks(T* instance, void (T::*cb)(const ::CLTS::StockDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getStocks<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_getStocks : public Callback_Area_getStocks_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::StockDescSeq&, const CT&);

    Callback_Area_getStocks(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::StockDescSeq stocks;
        try
        {
            __proxy->end_getStocks(stocks, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(stocks, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(stocks, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_getStocksPtr
newCallback_Area_getStocks(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::StockDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getStocks<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_getStocksPtr
newCallback_Area_getStocks(T* instance, void (T::*cb)(const ::CLTS::StockDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getStocks<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Area_getRowCols : public Callback_Area_getRowCols_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::RowColDescSeq&);

    CallbackNC_Area_getRowCols(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::RowColDescSeq rowcols;
        try
        {
            __proxy->end_getRowCols(rowcols, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(rowcols);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(rowcols);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_getRowColsPtr
newCallback_Area_getRowCols(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::RowColDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getRowCols<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_getRowColsPtr
newCallback_Area_getRowCols(T* instance, void (T::*cb)(const ::CLTS::RowColDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getRowCols<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_getRowCols : public Callback_Area_getRowCols_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::RowColDescSeq&, const CT&);

    Callback_Area_getRowCols(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::RowColDescSeq rowcols;
        try
        {
            __proxy->end_getRowCols(rowcols, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(rowcols, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(rowcols, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_getRowColsPtr
newCallback_Area_getRowCols(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::RowColDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getRowCols<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_getRowColsPtr
newCallback_Area_getRowCols(T* instance, void (T::*cb)(const ::CLTS::RowColDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getRowCols<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Area_getCoils : public Callback_Area_getCoils_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::CoilDescSeq&);

    CallbackNC_Area_getCoils(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilDescSeq coils;
        try
        {
            __proxy->end_getCoils(coils, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(coils);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(coils);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_getCoilsPtr
newCallback_Area_getCoils(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getCoils<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_getCoilsPtr
newCallback_Area_getCoils(T* instance, void (T::*cb)(const ::CLTS::CoilDescSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getCoils<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_getCoils : public Callback_Area_getCoils_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::CoilDescSeq&, const CT&);

    Callback_Area_getCoils(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::CoilDescSeq coils;
        try
        {
            __proxy->end_getCoils(coils, __result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(coils, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(coils, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_getCoilsPtr
newCallback_Area_getCoils(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::CoilDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getCoils<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_getCoilsPtr
newCallback_Area_getCoils(T* instance, void (T::*cb)(const ::CLTS::CoilDescSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getCoils<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Area_getDesc : public Callback_Area_getDesc_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::CLTS::AreaDesc&);

    CallbackNC_Area_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::AreaDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Area_getDescPtr
newCallback_Area_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::AreaDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Area_getDescPtr
newCallback_Area_getDesc(T* instance, void (T::*cb)(const ::CLTS::AreaDesc&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Area_getDesc<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Area_getDesc : public Callback_Area_getDesc_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::CLTS::AreaDesc&, const CT&);

    Callback_Area_getDesc(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::CLTS::AreaPrx __proxy = ::CLTS::AreaPrx::uncheckedCast(__result->getProxy());
        ::CLTS::AreaDesc __ret;
        try
        {
            __ret = __proxy->end_getDesc(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Area_getDescPtr
newCallback_Area_getDesc(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::CLTS::AreaDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getDesc<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Area_getDescPtr
newCallback_Area_getDesc(T* instance, void (T::*cb)(const ::CLTS::AreaDesc&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Area_getDesc<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
