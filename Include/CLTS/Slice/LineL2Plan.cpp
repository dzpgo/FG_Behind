// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `LineL2Plan.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <LineL2Plan.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

void
CLTS::LineL2PlanDesc::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(unitNo);
    __os->write(seq);
    __os->write(planNo);
    __os->write(coilNo);
    __os->write(weight);
    __os->write(width);
    __os->write(inDia);
    __os->write(outDia);
    __os->write(packFlag);
    __os->write(sleeveWidth);
    __os->write(coilDirection);
    __os->write(alarmCode);
    __os->write(status);
}

void
CLTS::LineL2PlanDesc::__read(::IceInternal::BasicStream* __is)
{
    __is->read(unitNo);
    __is->read(seq);
    __is->read(planNo);
    __is->read(coilNo);
    __is->read(weight);
    __is->read(width);
    __is->read(inDia);
    __is->read(outDia);
    __is->read(packFlag);
    __is->read(sleeveWidth);
    __is->read(coilDirection);
    __is->read(alarmCode);
    __is->read(status);
}

void
CLTS::__writeLineL2PlanDescSeq(::IceInternal::BasicStream* __os, const ::CLTS::LineL2PlanDesc* begin, const ::CLTS::LineL2PlanDesc* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
CLTS::__readLineL2PlanDescSeq(::IceInternal::BasicStream* __is, ::CLTS::LineL2PlanDescSeq& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(34, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
CLTS::LineRejCoilDesc::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(unitNo);
    __os->write(saddleL2Name);
    __os->write(coilNo);
    __os->write(weight);
    __os->write(width);
    __os->write(inDia);
    __os->write(outDia);
    __os->write(sleeveWidth);
    __os->write(coilOpenDirection);
    __os->write(alarmCode);
    __os->write(nextUnitNo);
}

void
CLTS::LineRejCoilDesc::__read(::IceInternal::BasicStream* __is)
{
    __is->read(unitNo);
    __is->read(saddleL2Name);
    __is->read(coilNo);
    __is->read(weight);
    __is->read(width);
    __is->read(inDia);
    __is->read(outDia);
    __is->read(sleeveWidth);
    __is->read(coilOpenDirection);
    __is->read(alarmCode);
    __is->read(nextUnitNo);
}

void
CLTS::__writeLineRejCoilDescSeq(::IceInternal::BasicStream* __os, const ::CLTS::LineRejCoilDesc* begin, const ::CLTS::LineRejCoilDesc* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
CLTS::__readLineRejCoilDescSeq(::IceInternal::BasicStream* __is, ::CLTS::LineRejCoilDescSeq& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(29, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}
