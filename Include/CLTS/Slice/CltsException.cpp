// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `CltsException.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>

#include <CltsException.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

CLTS::CLTSException::CLTSException(const ::std::string& __ice_file, const ::std::string& __ice_function, ::Ice::Int __ice_line, const ::std::string& __ice_type, const ::std::string& __ice_reason, const ::std::string& __ice_callerApp, const ::std::string& __ice_callerFunc) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(),
#else
    ::Ice::UserException(),
#endif
    file(__ice_file),
    function(__ice_function),
    line(__ice_line),
    type(__ice_type),
    reason(__ice_reason),
    callerApp(__ice_callerApp),
    callerFunc(__ice_callerFunc)
{
}

CLTS::CLTSException::~CLTSException() throw()
{
}

static const char* __CLTS__CLTSException_name = "CLTS::CLTSException";

::std::string
CLTS::CLTSException::ice_name() const
{
    return __CLTS__CLTSException_name;
}

::Ice::Exception*
CLTS::CLTSException::ice_clone() const
{
    return new CLTSException(*this);
}

void
CLTS::CLTSException::ice_throw() const
{
    throw *this;
}

void
CLTS::CLTSException::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::CLTS::CLTSException"), false);
    __os->startWriteSlice();
    __os->write(file);
    __os->write(function);
    __os->write(line);
    __os->write(type);
    __os->write(reason);
    __os->write(callerApp);
    __os->write(callerFunc);
    __os->endWriteSlice();
}

void
CLTS::CLTSException::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->read(file);
    __is->read(function);
    __is->read(line);
    __is->read(type);
    __is->read(reason);
    __is->read(callerApp);
    __is->read(callerFunc);
    __is->endReadSlice();
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
CLTS::CLTSException::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception CLTS::CLTSException was not generated with stream support";
    throw ex;
}

void
CLTS::CLTSException::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception CLTS::CLTSException was not generated with stream support";
    throw ex;
}
#endif

struct __F__CLTS__CLTSException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::CLTS::CLTSException();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__CLTS__CLTSException__Ptr = new __F__CLTS__CLTSException;

const ::IceInternal::UserExceptionFactoryPtr&
CLTS::CLTSException::ice_factory()
{
    return __F__CLTS__CLTSException__Ptr;
}

class __F__CLTS__CLTSException__Init
{
public:

    __F__CLTS__CLTSException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::CLTS::CLTSException", ::CLTS::CLTSException::ice_factory());
    }

    ~__F__CLTS__CLTSException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::CLTS::CLTSException");
    }
};

static __F__CLTS__CLTSException__Init __F__CLTS__CLTSException__i;

#ifdef __APPLE__
extern "C" { void __F__CLTS__CLTSException__initializer() {} }
#endif
