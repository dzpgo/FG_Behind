###############################################################################
#
# Generic Makefile for C/C++ Program
#
# Author: whyglinux (whyglinux AT hotmail DOT com)
# Date:   2006/03/04

# Description:
# The makefile searches in <SRCDIRS> directories for the source files
# with extensions specified in <SOURCE_EXT>, then compiles the sources
# and finally produces the <PROGRAM>, the executable file, by linking
# the objectives.

# Usage:
#   $ make           compile and link the program.
#   $ make objs      compile only (no linking. Rarely used).
#   $ make clean     clean the objectives and dependencies.
#   $ make cleanall  clean the objectives, dependencies and executable.
#   $ make rebuild   rebuild the program. The same as make clean && make all.
#==============================================================================

## Customizing Section: adjust the following if necessary.
##=============================================================================

# The executable file name.
# It must be specified.
# PROGRAM   :=    # the executable name


# The directories in which source files reside.
# At least one path should be specified.
# SRCDIRS   := .        # current directory

IPDIR := ${IPLATURE}
IXDIR := ${IXCOMPCS}

# The source file types (headers excluded).
# At least one type should be specified.
# The valid suffixes are among of .c, .C, .cc, .cpp, .CPP, .c++, .cp, or .cxx.
# SRCEXTS   := .c      # C program
# SRCEXTS   := .cpp    # C++ program
# SRCEXTS   := .c .cpp # C/C++ program
SRCEXTS   := .cxx .cpp

# The flags used by the cpp (man cpp for more).
# CPPFLAGS  := -Wall -Werror # show all warnings and take them as errors
# CPPFLAGS  := -Wall -Werror
CPPFLAGS  := -w

# The compiling flags used only for C.
# If it is a C++ program, no need to set these flags.
# If it is a C and C++ merging program, set these flags for the C parts.
CFLAGS    := 
CFLAGS    +=

# The compiling flags used only for C++.
# If it is a C program, no need to set these flags.
# If it is a C and C++ merging program, set these flags for the C++ parts.

CXXFLAGS  := -D_LINUX -I${IPDIR}/include  
CXXFLAGS  += -I${IPDIR}/ThirdParty/Ice/include
CXXFLAGS  +=  -I${IPDIR}/ThirdParty/SQLAPI/include
CXXFLAGS  +=  -I${IXDIR}/Include
#CXXFLAGS  += -I${ORACLE_HOME}/rdbms/public 

# The library and the link options ( C and C++ common).
LINKWITH   := -L${IXDIR}/Library -liXcomTCP2 -lXmlRpc -lCommonLibrary -lboost_thread -lTinyXml -lCppSQLite3 -ldl
LINKWITH   += -L${IPDIR}/ThirdParty/Ice/lib64 -lIceGrid -lIceUtil -lIce -lIceStorm -lFreeze -lGlacier2 -lIceBox -lIcePatch2
LINKWITH   += -L${IPDIR}/library -liML -lTag -lpace -lLic -lLOG -liDA -lutility -llog4cplus -lPowerTranser -lCppSQLite3
LINKWITH   += -L${IPDIR}/ThirdParty/SQLAPI/lib -lsqlapi
LINKWITH   += -L${IPDIR}/ThirdParty/db-4.8.30.NC/lib64 -ldb_cxx-4.8
LINKWITH   += -L${IPDIR}/ThirdParty/expat-2.0.1/lib -lexpat
#LINKWITH   +=  -L ${ORACLE_HOME}/lib -lclntsh -lsql10

## Implict Section: change the following only when necessary.
##=============================================================================
# The C program compiler. Uncomment it to specify yours explicitly.
#CC      = gcc

# The C++ program compiler. Uncomment it to specify yours explicitly.
CXX     = g++

# Uncomment the 2 lines to compile C programs as C++ ones.
#CC      = $(CXX)
#CFLAGS  = $(CXXFLAGS)

# The command used to delete file.
#RM        = rm -f

## Stable Section: usually no need to be changed. But you can add more.
##=============================================================================
SHELL   = /bin/sh
SOURCES = $(foreach d,$(SRCDIRS),$(wildcard $(addprefix $(d)/*,$(SRCEXTS))))
OBJS    = $(foreach x,$(SRCEXTS), \
      $(patsubst %$(x),%.o,$(filter %$(x),$(SOURCES))))
DEPS    = $(patsubst %.o,%.d,$(OBJS))

.PHONY : all objs clean cleanall rebuild

all : $(PROGRAM)

# Rules for creating the dependency files (.d).
#---------------------------------------------------
%.d : %.c
	@$(CC) $(CFLAGS) -MM -MD $< -o $@

%.d : %.C
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.cc
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.cpp
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.CPP
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.c++
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.cp
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

%.d : %.cxx
	@$(CC) $(CXXFLAGS) -MM -MD $< -o $@

# Rules for producing the objects.
#---------------------------------------------------
objs : $(OBJS)

%.o : %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

%.o : %.C
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.CPP
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.c++
	$(CXX $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.cp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

%.o : %.cxx
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

# Rules for producing the executable.
#----------------------------------------------
$(PROGRAM) : $(OBJS)
ifeq ($(strip $(SRCEXTS)), .c)  # C file
	$(CC) -o $(PROGRAM) $(OBJS) $(LINKWITH)
else                            # C++ file
	$(CXX) -o $(PROGRAM) $(OBJS) $(LINKWITH)
endif

-include $(DEPS)

rebuild: clean all

clean :
	@$(RM) *.o *.d

cleanall: clean
	@$(RM) $(PROGRAM) $(PROGRAM).exe

### End of the Makefile ##  Suggestions are welcome  ## All rights reserved ###
###############################################################################
